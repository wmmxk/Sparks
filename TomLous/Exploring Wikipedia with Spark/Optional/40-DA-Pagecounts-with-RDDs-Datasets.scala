{"version":"NotebookV1","origId":503877321546688,"name":"40-DA-Pagecounts-with-RDDs-Datasets","language":"scala","commands":[{"version":"CommandV1","origId":503877321546690,"guid":"c66b064c-a059-46ab-be03-cc813a99c381","subtype":"command","commandType":"auto","position":1.0,"command":"%md\n\n#![Wikipedia Logo](http://sameerf-dbc-labs.s3-website-us-west-2.amazonaws.com/data/wikipedia/images/w_logo_for_labs.png)\n\n# Analyzing the Wikipedia PageCounts with RDDs and Datasets\n### Time to complete: 20 minutes\n\n#### Business questions:\n\n* Question # 1) How many unique articles in English Wikipedia were requested in the past hour?\n* Question # 2) How many requests total did English Wikipedia get in the past hour?\n* Question # 3) How many requests total did each Wikipedia project get total during this hour?\n* Question # 4) How many requests did the \"Apache Spark\" article recieve during this hour? Which Wikipedia language got the most requests for \"Apache Spark\"?\n* Question # 5) How many requests did the English Wiktionary project get during the captured hour?\n* Question # 6) Which Apache project in English Wikipedia got the most hits during the captured hour?\n* Question # 7) What were the top 30 pages viewed in English Wikipedia during the capture hour?\n\n#### Technical Accomplishments:\n\n* Understand the difference between Dataframes, RDDs and Datasets\n* Learn how to use the following RDD actions: `count`, `take`, `takeSample`, `collect`\n* Learn the following RDD transformations: `filter`, `map`, `groupByKey`, `reduceByKey`, `sortBy`\n* Learn how to convert your RDD code to Datasets\n* Learn how to cache an RDD or Dataset and view its number of partitions and total size in memory\n* Learn how to send a closure function to a map transformation\n* Learn how to define a case class to organize data in an RDD or Dataset into objects\n* Learn how to interpret a DAG visualization and understand the number of stages and tasks\n* When using the RDD API, learn why groupByKey should be avoided in favor of reducebyKey\n\n\n\nDataset: https://dumps.wikimedia.org/other/pagecounts-raw/","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"198a1a69-8a04-4619-96e5-a00d83347b80"},{"version":"CommandV1","origId":503877321546691,"guid":"339ad12c-99d0-420d-b57d-647487540820","subtype":"command","commandType":"auto","position":2.0,"command":"%md Attach to, and then restart your cluster first to clear out old memory caches and get to a default, standard environment. The restart should take 1 - 2 minutes.\n\n#![Restart cluster](http://i.imgur.com/xkRjRYy.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b2a9dfe8-9c26-4686-a4cb-9344038b5916"},{"version":"CommandV1","origId":503877321546692,"guid":"409c79fe-e813-4513-8abe-4684f4817bdf","subtype":"command","commandType":"auto","position":3.0,"command":"%md\n### Getting to know the Data\nRecall that we are running an hourly job in Databricks to download the latest Pagecounts file to S3 in a staging folder. How large is the data from the past hour? Let's use `%fs` to find out.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f45b41c1-2cbb-4e85-b13e-e2854becd3cc"},{"version":"CommandV1","origId":503877321546693,"guid":"5be4e360-8098-4ba2-9836-90022ab3794c","subtype":"command","commandType":"auto","position":4.0,"command":"%fs ls /mnt/wikipedia-readwrite/pagecounts/staging/","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"932f30c2-5e44-4da1-9d63-1d51dff34ba7"},{"version":"CommandV1","origId":503877321546694,"guid":"297b9528-3634-4666-a648-7cee7b5d563e","subtype":"command","commandType":"auto","position":5.0,"command":"%md The file is approximately 75 - 100 MB.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"518146ee-16eb-432e-9b08-1b6f1775ac2f"},{"version":"CommandV1","origId":503877321546695,"guid":"f9c05f16-21d6-4fc1-8086-52730e661c25","subtype":"command","commandType":"auto","position":6.0,"command":"%md Notice that the file name has the date and time of when the file was created by the Wikimedia Foundation. This file contains recent web traffic data to Wikipedia, that is less than 1 hour old. It captures 1 hour of page counts to all of Wikipedia languages and projects.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"fdcc781e-82c5-4910-96cc-f4b8de1837da"},{"version":"CommandV1","origId":503877321546696,"guid":"9e8d9c28-ea37-4fe0-bcbf-a1d2f35d66e7","subtype":"command","commandType":"auto","position":7.0,"command":"%md\n### RDDs\nRDDs can be created by using the Spark Context object's `textFile()` method.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"404b8b23-8233-451b-a691-787eaa0dd3cd"},{"version":"CommandV1","origId":503877321546697,"guid":"f1ceb43e-911e-4458-a9cd-48f4f040e527","subtype":"command","commandType":"auto","position":8.0,"command":"// In Databricks, the SparkContext is already created for you as the variable sc\nsc","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"69bf8444-4060-4438-80ba-3ceea1d0f967"},{"version":"CommandV1","origId":503877321546698,"guid":"f3582b0a-680c-4f5e-ad6c-e1c0add67197","subtype":"command","commandType":"auto","position":9.0,"command":"%md Create an RDD from the recent pagecounts file:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"685a636f-3fc8-4fe2-9f62-d1ceed91e7b8"},{"version":"CommandV1","origId":503877321546699,"guid":"f43dd5fe-c81b-42b9-8b03-0b94a4d3d5bd","subtype":"command","commandType":"auto","position":10.0,"command":"// Notice that this returns a RDD of Strings\nval pagecountsRDD = sc.textFile(\"dbfs:/mnt/wikipedia-readwrite/pagecounts/staging/\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1fbdf965-0001-499c-8914-e946eb795180"},{"version":"CommandV1","origId":503877321546700,"guid":"eceac6c4-096e-4033-b9fc-b62b9e3b1674","subtype":"command","commandType":"auto","position":11.0,"command":"%md The `count` action counts how many items (lines) total are in the RDD (this requires a full scan of the file):","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a2e7e335-fa4c-46b7-a94a-09946d3b2578"},{"version":"CommandV1","origId":503877321546701,"guid":"e642012f-ee6b-42c7-94a9-3ade5da02210","subtype":"command","commandType":"auto","position":12.0,"command":"pagecountsRDD.count()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d44390b4-6276-4e17-a821-9f273189d171"},{"version":"CommandV1","origId":503877321546702,"guid":"3c5d6ca3-8d9d-4707-8428-65e20b4405a5","subtype":"command","commandType":"auto","position":13.0,"command":"%md The Spark UI will show that just one task read the entire file and the Input column should match the size of the file. For example, if the file were 72.4 MB, you would see:\n#![1 task](http://i.imgur.com/Xu9LjbU.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5e4a1b5d-d3d5-4fbf-8c87-faa1026ac091"},{"version":"CommandV1","origId":503877321546703,"guid":"5bf0cc80-27e6-4a56-a39a-4676d3fd86b6","subtype":"command","commandType":"auto","position":14.0,"command":"%md So the count shows that there are about 5 - 7 million lines in the file. Notice that the `count()` action took 3 - 25 seconds to run b/c it had to read the entire file remotely from S3.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6249eac9-6bc7-46c5-b5bb-242fbc11ca83"},{"version":"CommandV1","origId":503877321546704,"guid":"ae0fcacb-713b-4ef2-af1e-e536e9c5bae9","subtype":"command","commandType":"auto","position":15.0,"command":"%md ** Challenge 1:**  Why is only one task being used to read this file? If the S3 input split is 64 MB, then why aren't two tasks being used? ","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"22504476-8027-4bc0-993d-8f84a98ba955"},{"version":"CommandV1","origId":503877321546705,"guid":"8a16a3e6-db1b-4a39-afec-43f51bffc127","subtype":"command","commandType":"auto","position":16.0,"command":"// Speculate upon your answer here\n\n// gzip is an unsplittable compression format released in 1992. Therefore to uncompress a gzip file, it has to be read entirely in one machine and uncompressed together. It is not possible to parallelize this, so Spark ends up using just one task to read the file. bzip2, LZO and Snappy are  are examples of splittable compression formats.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2e5ca782-4108-4c3f-97b6-abfdbad1c2d6"},{"version":"CommandV1","origId":503877321546706,"guid":"ed23a806-caef-4ad0-84d5-e865f46539d7","subtype":"command","commandType":"auto","position":17.0,"command":"%md You can use the take action to get the first 10 records:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"7385b3cd-5b4b-4321-a792-a40adecf70f0"},{"version":"CommandV1","origId":503877321546707,"guid":"264982a7-d47f-41a3-90e1-05256330066b","subtype":"command","commandType":"auto","position":18.0,"command":"pagecountsRDD.take(10)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2f23f807-0903-465e-ac17-ef907c390a49"},{"version":"CommandV1","origId":503877321546708,"guid":"f724149b-e250-4baa-924f-86f36f769360","subtype":"command","commandType":"auto","position":19.0,"command":"%md The take command is much faster because it does not have read the entire file, it only reads 10 lines:\n\n#![1 task](http://i.imgur.com/MpYvzeA.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8e1e7558-3509-40f8-98a8-8cb0c0c015fe"},{"version":"CommandV1","origId":503877321546709,"guid":"786ca3a1-3bba-46be-96c1-6b573726ae51","subtype":"command","commandType":"auto","position":20.0,"command":"%md Unfortunately results returned by `.take(10)` are not very readable because `take()` returns an array and Scala simply prints the array with each element separated by a comma. \n\nWe can make the output prettier by traversing the array to print each record on its own line *(the .foreach() here is NOT a Spark operation, it's a local Scala operator)*:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"06cf0660-0cdd-47b2-83a3-2039c832c17b"},{"version":"CommandV1","origId":503877321546710,"guid":"04727a98-bee5-42bc-90c9-3217fad4450a","subtype":"command","commandType":"auto","position":21.0,"command":"pagecountsRDD.take(10).foreach(println)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5b894284-210c-4889-9caa-db3b5a89671d"},{"version":"CommandV1","origId":503877321546711,"guid":"40fb268f-566d-4335-88a0-88e16a2c0e84","subtype":"command","commandType":"auto","position":22.0,"command":"%md Notice that each line in the file actually contains 2 strings and 2 numbers, but our RDD is treating each line as a long string. We'll fix this typing issue shortly by using a custom parsing function.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0615c103-6848-4094-9575-c8714cabf7ee"},{"version":"CommandV1","origId":503877321546712,"guid":"5cc4139a-27f4-4632-82fc-a0c6e9754db9","subtype":"command","commandType":"auto","position":23.0,"command":"%md In the output above, the first column (like `aa`) is the Wikimedia project name. The following abbreviations are used for the first column:\n```\nwikibooks: \".b\"\nwiktionary: \".d\"\nwikimedia: \".m\"\nwikipedia mobile: \".mw\"\nwikinews: \".n\"\nwikiquote: \".q\"\nwikisource: \".s\"\nwikiversity: \".v\"\nmediawiki: \".w\"\n```\n\nProjects without a period and a following character are Wikipedia projects. So, any line starting with the column `aa` refers to the Aragonés language Wikipedia. Similarly, any line starting with the column `en` refers to the English language Wikipedia. `en.b` refers to English Language Wikibooks.\n\nThe second column is the title of the page retrieved, the third column is the number of requests, and the fourth column is the size of the content returned.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f898bc59-1036-4e0d-9070-35c54756566b"},{"version":"CommandV1","origId":503877321546713,"guid":"dcc371b7-8001-41d7-acc5-552f8292cfaf","subtype":"command","commandType":"auto","position":24.0,"command":"%md\n### Datasets\nDatasets can be created by using the SQL Context object's `read.text()` method:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f1cb04f9-146b-4707-be07-6c883f3d7abd"},{"version":"CommandV1","origId":503877321546714,"guid":"10d03dec-66e7-41f8-b566-84b1ef5823bc","subtype":"command","commandType":"auto","position":25.0,"command":"// Notice that this returns a Dataset of Strings\nval pagecountsDS = sqlContext.read.text(\"dbfs:/mnt/wikipedia-readwrite/pagecounts/staging/\").as[String]","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d80b377c-efa2-4461-ae0f-01de266f48a8"},{"version":"CommandV1","origId":503877321546715,"guid":"ddea2c81-5763-497e-8c4d-631f48900c5d","subtype":"command","commandType":"auto","position":26.0,"command":"// Notice that you get an array of Strings back\npagecountsDS.take(10)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a8561792-1c06-4be8-9933-77ed40f9b65d"},{"version":"CommandV1","origId":503877321546716,"guid":"6ceb2c01-dad3-47a5-b341-1a912f20b95b","subtype":"command","commandType":"auto","position":27.0,"command":"pagecountsDS.take(10).foreach(println)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"aae30003-71ec-4ff7-b0e0-3a13a577449f"},{"version":"CommandV1","origId":503877321546717,"guid":"3e10717d-e4fb-4139-86bd-796c406f3103","subtype":"command","commandType":"auto","position":28.0,"command":"%md\n### Caching RDDs vs Datasets in memory\nNext, let's cache both the `pagecountsRDD` and `pagecountsDS` into memory and see how much space they take.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8919f918-9431-431b-8376-7ab7e14062c7"},{"version":"CommandV1","origId":503877321546718,"guid":"a395fbea-cf50-4617-8805-efdcf68cc55e","subtype":"command","commandType":"auto","position":29.0,"command":"pagecountsRDD.setName(\"pagecountsRDD\").cache.count // call count after the cache to force the materialization immediately","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1815156c-6b99-444a-a1c8-08b43b2fe9ca"},{"version":"CommandV1","origId":503877321546719,"guid":"7d5adcf2-6b08-4c35-a9d7-6f398f00f82d","subtype":"command","commandType":"auto","position":30.0,"command":"pagecountsDS.cache.count","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"196a6f60-4f3f-48e6-a12d-65c0ce164be4"},{"version":"CommandV1","origId":503877321546720,"guid":"4acb1cf1-e72b-4385-9a0d-0faf9cbbe7ad","subtype":"command","commandType":"auto","position":31.0,"command":"%md The Spark UI's Storage tab now shows both in memory. Notice that the Dataset is compressed in memory by default, so it takes up much less space *(your exact size numbers will vary depending how the last hours's file size)*:\n\n#![DS vs RDD](http://i.imgur.com/RsDpcD8.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b733cdc0-f2f7-4b76-a211-c3a0f5e7cd1f"},{"version":"CommandV1","origId":503877321546721,"guid":"9c4df7a4-08a5-40a3-8f96-3121f44a859a","subtype":"command","commandType":"auto","position":32.0,"command":"%md\n### Pagecount Parsing Function\n\nStoring each line in the file as a String item in the RDD or Dataset is not the most effective solution, since each line actually has 4 fields in it. \n\nLet's define a function, `parse`, to parse out the 4 fields on each line. Then we'll run the parse function on each item in the RDD or Dataset and create a new RDDs and Datasets with the correct types for each item.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a9176d48-aafb-4307-968a-5d74308403a0"},{"version":"CommandV1","origId":503877321546722,"guid":"c5c2b185-7464-4d5e-bf35-7a2f2b163a0a","subtype":"command","commandType":"auto","position":33.0,"command":"// Define a parsing function that takes in a line string and returns the 4 fields on each line, correctly typed\ndef parse(line:String) = {\n  val fields = line.split(' ') //Split the original line with 4 fields according to spaces\n  (fields(0), fields(1), fields(2).toInt, fields(3).toLong) // return the 4 fields with their correct data types\n}","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8029c88e-12e8-47aa-bebc-dd03768d108c"},{"version":"CommandV1","origId":503877321546723,"guid":"bbbf2db6-5a4f-42d9-968f-ca65991c2968","subtype":"command","commandType":"auto","position":34.0,"command":"// Now we get back a RDD with the correct types, each line has 2 strings and 2 numbers\nval pagecountsParsedRDD = pagecountsRDD.map(parse)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4d087770-8a5c-4139-bea0-6e843a86f15b"},{"version":"CommandV1","origId":503877321546724,"guid":"0d29edc5-93cf-417d-99fe-0162f2bd9e21","subtype":"command","commandType":"auto","position":35.0,"command":"// Here we get back a Dataset with the correct types, each line has 2 strings and 2 numbers\nval pagecountsParsedDS = pagecountsDS.map(parse)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"72f6b692-5435-4da4-a998-8864af334f53"},{"version":"CommandV1","origId":503877321546725,"guid":"49ae7572-39e4-4721-9ab9-540600b07ee4","subtype":"command","commandType":"auto","position":36.0,"command":"%md\n### Revisiting caching RDDs vs Datasets in memory\nNext, let's cache both the new `pagecountsParsedRDD` and `pagecountsParsedDS` into memory and see how much space they take.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"9231c7f2-4295-49e2-9db3-893011d27e56"},{"version":"CommandV1","origId":503877321546726,"guid":"b6b9b695-5931-48e0-af9a-9f4d0fccfa55","subtype":"command","commandType":"auto","position":37.0,"command":"pagecountsParsedRDD.setName(\"pagecountsParsedRDD\").cache.count","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6c9ff695-053e-4800-9ec1-6d7053b74d88"},{"version":"CommandV1","origId":503877321546727,"guid":"6f5ef765-dbda-4b79-923a-79e91a5087a4","subtype":"command","commandType":"auto","position":38.0,"command":"pagecountsParsedDS.cache.count","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1e9782b3-0224-47cd-bad8-2dffb15af7a8"},{"version":"CommandV1","origId":503877321546728,"guid":"77ced6cd-e3ff-4523-b405-080d22b5e7ca","subtype":"command","commandType":"auto","position":39.0,"command":"%md The Spark UI's Storage tab now shows all four in memory (2 RDDs, 2 Datasets). Notice that the Parsed RDD takes up more space than the base RDD, but the Parsed Dataset uses less space than the base Dataset:\n\n#![DS vs RDD](http://i.imgur.com/H5zMT8n.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ab80f6a5-741b-4270-a5cf-d0d7047478e7"},{"version":"CommandV1","origId":503877321546729,"guid":"37551872-23d4-471d-8e56-2e7508389c37","subtype":"command","commandType":"auto","position":40.0,"command":"%md Notice that the Parsed RDD is more costly in memory (compared to the first RDD) but  the Parsed Dataset is cheaper to store in memory (compared to the first Dataset).\n\nThis is because of the way Java objects are represented normally in memory. When using RDDs, Java objects are many times larger than their underlying fields, with a bunch of data structures and pointers floating around. \n\nConsider the fact that a 4 byte string with UTF-8 encoding in Java actually ends up taking 48 bytes of memory in the JVM.\n\nHowever, Project Tungsten's UnsafeRow format is far more efficient and operates directly on binary data rather than Java objects by using `sun.misc.Unsafe`. Learn more about Project Tungsten via [Josh Rosen's YouTube video](https://www.youtube.com/watch?v=5ajs8EIPWGI) and the Reynold and Josh's [Databricks blog post](https://databricks.com/blog/2015/04/28/project-tungsten-bringing-spark-closer-to-bare-metal.html).","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"803bdd37-317c-4fde-930f-c6b6bd3095fe"},{"version":"CommandV1","origId":503877321546730,"guid":"42ed0a8c-c71f-419c-bf60-db34845aed88","subtype":"command","commandType":"auto","position":41.0,"command":"%md\n### Common RDD and Dataset Transformantions and Actions\nNext, we'll explore some common transformation and actions.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"be5ca5d8-3640-4196-9ee8-6535f611c781"},{"version":"CommandV1","origId":503877321546731,"guid":"c15df124-4906-4694-a3f4-73b238eac54f","subtype":"command","commandType":"auto","position":42.0,"command":"%md Consider opening the [RDD API docs](https://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.rdd.RDD) and [Dataset API docs](https://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.Dataset) in new tabs to keep them handy. Remember that you can also hit 'tab' after the RDD or Dataset name to see a drop down of the available methods.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0eae42d6-6c28-4fa7-87a5-2a5aea91e821"},{"version":"CommandV1","origId":503877321546732,"guid":"cc6a6f0f-b424-4986-b9a3-ba90b063e2c8","subtype":"command","commandType":"auto","position":43.0,"command":"%md \n### Question #1: \n** How many unique articles in English Wikipedia were requested in the past hour?**","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3c53e438-2fbd-4402-a231-354d0aa3bbdd"},{"version":"CommandV1","origId":503877321546733,"guid":"437d7fb9-c2a6-4553-aaa5-6a575514f705","subtype":"command","commandType":"auto","position":44.0,"command":"%md ##### RDD answer:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"508303e8-d5be-437d-b5fd-360deb018d1a"},{"version":"CommandV1","origId":503877321546734,"guid":"2c8046f9-a051-4a88-a266-ccff62be8c4e","subtype":"command","commandType":"auto","position":45.0,"command":"%md Let's filter out just the lines referring to English Wikipedia:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"9251ce6e-9adb-46e7-ba55-6aa53aee84e2"},{"version":"CommandV1","origId":503877321546735,"guid":"bad2741a-2afe-4be3-b6b2-dae4f0099bdf","subtype":"command","commandType":"auto","position":46.0,"command":"// Note: _._1 is just scala syntax for yanking out the first element from each line\nval enPagecountsRDD = pagecountsParsedRDD.filter(_._1 == \"en\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6349baaf-3478-4081-ac13-9a5a8c13896a"},{"version":"CommandV1","origId":503877321546736,"guid":"bf16dae5-b2e4-4a1a-a656-bd59c8ca6327","subtype":"command","commandType":"auto","position":47.0,"command":"%md Note that the above line is lazy and doesn't actually run the filter. We have to trigger the filter transformation to run by calling an action:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a10836e7-df1a-4941-9b38-f8ee4d672019"},{"version":"CommandV1","origId":503877321546737,"guid":"a139b52b-7343-4c00-9439-4c80176abb7e","subtype":"command","commandType":"auto","position":48.0,"command":"enPagecountsRDD.count()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ed30ee87-3489-4bdb-ad98-169075bded12"},{"version":"CommandV1","origId":503877321546738,"guid":"a8288158-85ab-4e42-9512-95a44f06c7f7","subtype":"command","commandType":"auto","position":49.0,"command":"%md Around 2 million lines refer to the English Wikipedia project. So about half of the 5 million articles in English Wikipedia get requested per hour. Let's take a look at 10 random lines:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"85abbdf8-603f-4ad0-a8d6-f68976d61628"},{"version":"CommandV1","origId":503877321546739,"guid":"ac581f2f-ce5b-4495-8808-922499fc6d52","subtype":"command","commandType":"auto","position":50.0,"command":"enPagecountsRDD.takeSample(true, 10).foreach(println)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c863be7d-9742-4b5b-af16-9d90e9a62561"},{"version":"CommandV1","origId":503877321546740,"guid":"59d65988-2a89-4756-9d42-c76f5e3ccfda","subtype":"command","commandType":"auto","position":51.0,"command":"%md ##### Dataset answer:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"dc77674d-c5c8-4e33-9d81-2441a99e6dd3"},{"version":"CommandV1","origId":503877321546741,"guid":"396e6368-6d33-4e86-ab0c-4c3ca7623413","subtype":"command","commandType":"auto","position":52.0,"command":"%md Running a filter and count on a Dataset looks very similar:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"523caadc-2751-4d22-982a-a5901f7d7c63"},{"version":"CommandV1","origId":503877321546742,"guid":"c09f3e6f-7d40-4c0e-88ce-394fdfddf91d","subtype":"command","commandType":"auto","position":53.0,"command":"val enPagecountsDS = pagecountsParsedDS.filter(_._1 == \"en\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"189a15f3-aebb-49c7-bb46-2d4c5292ed12"},{"version":"CommandV1","origId":503877321546743,"guid":"cb273c16-4dd6-4cea-8c34-baa598eb1881","subtype":"command","commandType":"auto","position":54.0,"command":"enPagecountsDS.count()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2bd66b25-9fd7-4caf-a35a-34e04173f9ae"},{"version":"CommandV1","origId":503877321546744,"guid":"e0aefd35-1376-45a8-aa2b-f5e854022e09","subtype":"command","commandType":"auto","position":55.0,"command":"%md \n### Question #2:\n** How many requests total did English Wikipedia get in the past hour?**","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e41dae21-1131-4536-8513-f3e9f78b63e4"},{"version":"CommandV1","origId":503877321546745,"guid":"951a68d4-1f3e-40b3-9673-e68150979b5a","subtype":"command","commandType":"auto","position":56.0,"command":"%md ##### RDD answer:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"7e40ede0-1a54-43fe-b8c5-fa0ade93239c"},{"version":"CommandV1","origId":503877321546746,"guid":"c5826b2a-81f0-482e-a81f-727e446bd7fd","subtype":"command","commandType":"auto","position":57.0,"command":"%md Start with the `enPagecountsRDD`:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6380eb2f-15e4-4202-9282-74ecd10373d9"},{"version":"CommandV1","origId":503877321546747,"guid":"667bced2-a84f-423d-9691-b445e69c4f79","subtype":"command","commandType":"auto","position":58.0,"command":"enPagecountsRDD.take(5)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b658f359-099d-42ee-bbe3-1c1ae2c7ad0c"},{"version":"CommandV1","origId":503877321546748,"guid":"e03b55c1-a33e-4d40-87c3-b47d94825011","subtype":"command","commandType":"auto","position":59.0,"command":"%md ** Challenge 2:** Can you figure out how to yank out just the requests column and then sum all of the requests?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"cbc7a41e-9f37-4db4-bbab-6b1edaf91422"},{"version":"CommandV1","origId":503877321546749,"guid":"436f9c8e-8068-4f07-a5a5-6591e44b2ea1","subtype":"command","commandType":"auto","position":60.0,"command":"// Type your answer here... Yank out just the requests column\nenPagecountsRDD.map(x => x._3).take(5)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"fe4de68b-8d7d-4c9a-94fb-7cb901871b15"},{"version":"CommandV1","origId":503877321546750,"guid":"b5806eb8-4968-4d68-8884-91738e0b5b81","subtype":"command","commandType":"auto","position":61.0,"command":"// Type your answer here... Then build upon that by summing up all of the requests\nenPagecountsRDD.map(x => x._3).sum","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f64695b4-b161-41a1-b195-cc18e41b2701"},{"version":"CommandV1","origId":503877321546751,"guid":"bd59cbe0-bdad-451c-8d84-0c7f53711fae","subtype":"command","commandType":"auto","position":62.0,"command":"%md We can see that there were between 5 - 10 million requests to English Wikipedia in the past hour.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6407f49e-f514-4466-bc9d-bb23ed7d12a2"},{"version":"CommandV1","origId":503877321546752,"guid":"1304df69-e1ef-4924-887d-f20569a989b4","subtype":"command","commandType":"auto","position":63.0,"command":"%md ##### Dataset answer:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2ca42b86-e622-44b3-ae15-9d40294758a4"},{"version":"CommandV1","origId":503877321546753,"guid":"c15a4fed-ae2a-4501-8a06-56a971ed8eec","subtype":"command","commandType":"auto","position":64.0,"command":"%md Let's re-write the same query using Datasets:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d91d112e-b7ac-4849-84fc-25d45fc32fc7"},{"version":"CommandV1","origId":503877321546754,"guid":"1c42f241-a543-4926-b735-50059eb13d41","subtype":"command","commandType":"auto","position":65.0,"command":"// The map() operation looks the same as the RDD version\nenPagecountsDS.map(x => x._3).take(5)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"9c33a0bc-3a5e-4b58-af67-66a94b764b75"},{"version":"CommandV1","origId":503877321546755,"guid":"4ef42516-265c-479e-a60d-c6809f5f6870","subtype":"command","commandType":"auto","position":66.0,"command":"%md Note that there is no available `.sum()` method on Datasets:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c0aa2071-4b4b-45c8-9017-2afd033140f1"},{"version":"CommandV1","origId":503877321546756,"guid":"dcb4e16d-d9ab-4337-8f12-389f9c3f21a1","subtype":"command","commandType":"auto","position":67.0,"command":"// This will return an error\nenPagecountsDS.map(x => x._3).sum","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b7a43179-d63c-42cd-a820-221e037598ea"},{"version":"CommandV1","origId":503877321546757,"guid":"76034072-67ce-4cff-a1f1-c993f0eb25f5","subtype":"command","commandType":"auto","position":68.0,"command":"%md The Datasets API in Spark 1.6 is still experimental, so full functionality is not available yet.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"68987228-4eeb-40ae-99a3-c200140cb8fe"},{"version":"CommandV1","origId":503877321546758,"guid":"1be15fdb-d08e-4757-a5f7-484560fac167","subtype":"command","commandType":"auto","position":69.0,"command":"%md #### Strategy #1) Collect on Driver and sum locally","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f4e39c74-7ea5-4fd2-a1b2-55e8b9d916d8"},{"version":"CommandV1","origId":503877321546759,"guid":"f426b944-0b50-424c-86ee-faa06f69dcef","subtype":"command","commandType":"auto","position":70.0,"command":"%md Instead, if the data is small enough, we can collect it on the Driver and sum it locally.\n\n** Challenge 3:** Implement this new strategy of collecting the data on the Driver for the summation.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5d2e2ae3-2b84-442b-a16d-f0741d9e4392"},{"version":"CommandV1","origId":503877321546760,"guid":"8c55fb54-9fe2-44c3-9912-53151d88ada5","subtype":"command","commandType":"auto","position":71.0,"command":"// Type your answer here...\n\nenPagecountsDS.map(x => x._3).collect.sum","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a78c79fa-6fbe-433b-a697-68608dae9607"},{"version":"CommandV1","origId":503877321546761,"guid":"daa1c47f-5f17-4173-8635-49c71ab1f577","subtype":"command","commandType":"auto","position":72.0,"command":"%md Performance here may appear fast in a local mode cluster because no network transfer has to take place. Also, collecting data at the driver to perform a sum won't scale if the data set is too large to fit on one machine (which could cause an Out of Memory condition).","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0fd46a02-9c4a-4a63-8012-c516994d1e64"},{"version":"CommandV1","origId":503877321546762,"guid":"151f7728-0b53-4856-a0c2-382c3cfa8e85","subtype":"command","commandType":"auto","position":73.0,"command":"%md #### Strategy #2) Convert DS to a DF for the sum","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"33c113b4-5f5a-4fb8-ac8e-c69e0b75d422"},{"version":"CommandV1","origId":503877321546763,"guid":"04ea754f-e77d-47b7-9eac-0a14d3daefe2","subtype":"command","commandType":"auto","position":74.0,"command":"%md Another strategy is to convert the Dataset to a Dataframe just to perform the sum.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c8cd2e42-8b23-4b58-97ac-e7f7f44bf62a"},{"version":"CommandV1","origId":503877321546764,"guid":"65d9e497-d9f2-4baf-98aa-aea65e51e5a8","subtype":"command","commandType":"auto","position":75.0,"command":"%md ** Challenge 4:** See if you can start with the `enPagecountsDS` Dataset, run a map on it like above, then convert it to a Dataframe and sum the `value` column.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e9d1cef3-9879-45a6-879a-4ca349386e20"},{"version":"CommandV1","origId":503877321546765,"guid":"18ea3f5c-2e57-46d0-8570-9c860969bd7d","subtype":"command","commandType":"auto","position":76.0,"command":"// Type your answer here...\n// Hint: Remember to import org.apache.spark.sql.functions._\n\nimport org.apache.spark.sql.functions._\n\nenPagecountsDS \n  .map(x => x._3)\n  .toDF\n  .select(sum($\"value\"))\n  .show()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d8063a61-3d92-41f9-b329-1bb34f40aa4d"},{"version":"CommandV1","origId":503877321546766,"guid":"62b40b73-194e-46dc-aca4-5bbcf828b6a0","subtype":"command","commandType":"auto","position":77.0,"command":"%md #### Strategy #3) Implement a custom Aggregator for sum","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"177f64e4-eece-4056-abaf-7a98b5079df5"},{"version":"CommandV1","origId":503877321546767,"guid":"fa2f8835-d58f-4363-aec2-001ce8e32a64","subtype":"command","commandType":"auto","position":78.0,"command":"%md In the final strategy, we construct a simple Aggregator that sums up a collection of `Int`s.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"22bc19c1-ba9d-4c23-a545-72e366751ac3"},{"version":"CommandV1","origId":503877321546768,"guid":"0d837f93-5abb-43f2-84b5-9a05bcdb59f7","subtype":"command","commandType":"auto","position":79.0,"command":"%md Aggregators provide a mechanism for adding up all of the elements in a Dataset, returning a single result. An Aggregator is similar to a User Defined Aggregate Function (UDAF), but the interface is expressed in terms of JVM objects instead of as a Row.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6382ded8-765c-45e2-a5a0-beef84ff46c6"},{"version":"CommandV1","origId":503877321546769,"guid":"1a206919-835c-497e-bb85-7cfa4c066463","subtype":"command","commandType":"auto","position":80.0,"command":"import org.apache.spark.sql.functions._\nimport org.apache.spark.sql.Encoder\nimport org.apache.spark.sql.expressions.Aggregator\nimport org.apache.spark.sql.TypedColumn","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ef3296ed-bc0f-451a-bc85-4043cd45fa20"},{"version":"CommandV1","origId":503877321546770,"guid":"4f574c03-31da-403a-a522-8ba6ec3d323e","subtype":"command","commandType":"auto","position":81.0,"command":"val simpleSum = new Aggregator[Int, Int, Int] with Serializable {\n  def zero: Int = 0                     // The initial value.\n  def reduce(b: Int, a: Int) = b + a    // Add an element to the running total\n  def merge(b1: Int, b2: Int) = b1 + b2 // Merge intermediate values.\n  def finish(b: Int) = b                // Return the final result.\n}.toColumn","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c8d6bed4-8496-4445-9daa-ae833bcf9199"},{"version":"CommandV1","origId":503877321546771,"guid":"6ea993f0-3f92-4eb1-a4f9-79797370b2a3","subtype":"command","commandType":"auto","position":82.0,"command":"// Why is this so slow? This cell takes about 1 minute to complete! We will optimize this next.\nenPagecountsDS.map(x => x._3).select(simpleSum).collect","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f58de4f3-9781-49b5-a949-8e02f8bede26"},{"version":"CommandV1","origId":503877321546772,"guid":"5f74a720-2fa5-49c9-8e9c-ebc3ba6ec680","subtype":"command","commandType":"auto","position":83.0,"command":"%md \n##### Performance Optimization: Understanding the relationship between # of partitions and # of tasks","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d7cec370-db2a-4454-9b5f-c0727f3ede80"},{"version":"CommandV1","origId":503877321546773,"guid":"86d3e866-1a6b-4e5f-9b5f-47ed96c86f67","subtype":"command","commandType":"auto","position":84.0,"command":"%md The slow Spark job above launches two stages and one task in each stage. Recall that each local mode cluster in Databricks has 4 slots, so 4 tasks can be run simultaneously.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3004a603-32a4-497b-aede-023b06a29af4"},{"version":"CommandV1","origId":503877321546774,"guid":"7c01acca-f501-4ce6-8aa7-e4b2a4e14aa8","subtype":"command","commandType":"auto","position":85.0,"command":"%md Let's repartition the Dataset from 1 partition to 4 partitions so that we can run 4 tasks in parallel when analyzing it:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"47da89c0-1c7c-41a9-90bc-647858fc6dad"},{"version":"CommandV1","origId":503877321546775,"guid":"8cd4e5d6-82f1-4e9a-a48c-7949e975ff86","subtype":"command","commandType":"auto","position":86.0,"command":"val pagecounts4PartitionsDS = pagecountsParsedDS.repartition(4).cache","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a72a6d0f-489d-464c-92ae-2d7fac483b36"},{"version":"CommandV1","origId":503877321546776,"guid":"7266054f-0103-496e-b84a-cf2ae6a72dbd","subtype":"command","commandType":"auto","position":87.0,"command":"pagecounts4PartitionsDS.count // Materialize the cache","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8e1df5f9-76ca-42f4-b110-a50f700d6af7"},{"version":"CommandV1","origId":503877321546777,"guid":"ee465cf9-8fd3-4630-b585-78590e11a011","subtype":"command","commandType":"auto","position":88.0,"command":"%md The new Dataset with 4 partitions should now be materialized:\n\n#![4 partitions DS](http://i.imgur.com/zByahcZ.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2ee24e07-fce1-447c-82d7-4df8b4d28407"},{"version":"CommandV1","origId":503877321546778,"guid":"a0ad611e-863c-4305-967c-4a36c38298b3","subtype":"command","commandType":"auto","position":89.0,"command":"// The same operations now complete in about 15-20 seconds, when reading from 4 partitions in memory\npagecounts4PartitionsDS.filter(_._1 == \"en\" ).map(x => x._3).select(simpleSum).collect","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0c8298db-674a-493b-8511-a85abf4c7749"},{"version":"CommandV1","origId":503877321546779,"guid":"52e90b3f-70fa-4bda-8793-08a1b807be5d","subtype":"command","commandType":"auto","position":90.0,"command":"%md The second stage in the command above runs four tasks in parallel to compute the results.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a0cd9134-bda7-46df-8373-44813f087be4"},{"version":"CommandV1","origId":503877321546780,"guid":"a3defa09-835e-400b-8374-96f28fb544fb","subtype":"command","commandType":"auto","position":91.0,"command":"%md Go ahead and re-partition the `pagecountsParsedRDD` into 4 partitions also, for similar speed increases:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b3a4d66b-7d37-499f-a2a0-ca84d9836038"},{"version":"CommandV1","origId":503877321546781,"guid":"5eccabda-13e4-41f3-86dc-4cdae1479a93","subtype":"command","commandType":"auto","position":92.0,"command":"val pagecounts4PartitionsRDD = pagecountsParsedRDD.repartition(4).setName(\"pagecounts4PartitionsRDD\").cache","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ffb1a212-2c57-47af-802a-fa3c9f19c915"},{"version":"CommandV1","origId":503877321546782,"guid":"4c044da8-42ec-41b2-8d1b-d8513ba37f42","subtype":"command","commandType":"auto","position":93.0,"command":"pagecounts4PartitionsRDD.count // Materialize the cache","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e8d5e62f-02cf-4ac1-b9f6-74bfd2428b42"},{"version":"CommandV1","origId":503877321546783,"guid":"cfdf2c84-faa5-4015-9bb4-843380b401ea","subtype":"command","commandType":"auto","position":94.0,"command":"%md The new RDD with 4 partitions should now be materialized:\n\n#![4 partitions RDD](http://i.imgur.com/GkXqg9I.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f4a4c4be-ced6-4dab-8324-6b1304fe2a55"},{"version":"CommandV1","origId":503877321546784,"guid":"1953319b-d1dd-4265-90d8-98042f5a002d","subtype":"command","commandType":"auto","position":95.0,"command":"%md \n### Question #3:\n** How many requests total did each Wikipedia project get total during this hour?**","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d17309f1-d9c5-4f27-bffc-c35470cc894e"},{"version":"CommandV1","origId":503877321546785,"guid":"f5b47150-73a4-4ffe-8491-c1474e27593b","subtype":"command","commandType":"auto","position":96.0,"command":"%md Recall that our data file contains requests to all of the Wikimedia projects, including Wikibooks, Wiktionary, Wikinews, Wikiquote... and all of the 200+ languages.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e35db024-97df-40ea-9124-c5c5a7a1eee9"},{"version":"CommandV1","origId":503877321546786,"guid":"daa073f6-e5c4-4ef7-a852-9d8af9f638bb","subtype":"command","commandType":"auto","position":97.0,"command":"%md ##### RDD answer:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5ec23be7-919d-435d-b9df-06cdb11ec331"},{"version":"CommandV1","origId":503877321546787,"guid":"db8274fd-2416-425d-abe6-48ce2a22827c","subtype":"command","commandType":"auto","position":98.0,"command":"%md ** Challenge 5:** First, we'll create key/value pairs from the project prefix and the number of requests, so we want to see results like: `((en, 3), (en.b, 2), (aa, 2), (en, 7))`. Can you use a map operation to get an RDD back with just k/v pairs?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"94a13566-89c9-43d0-8435-2a5d9de914c9"},{"version":"CommandV1","origId":503877321546788,"guid":"d191397c-4907-468c-84b3-7fee3ee67d31","subtype":"command","commandType":"auto","position":99.0,"command":"// Type you answer here...\n\npagecounts4PartitionsRDD\n  .map(line => (line._1, line._3))\n  .take(10)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"685ab5e5-eb8d-4df7-988d-338a4474c14a"},{"version":"CommandV1","origId":503877321546789,"guid":"b2029a4b-9437-4af6-8df0-f64523a51430","subtype":"command","commandType":"auto","position":100.0,"command":"%md Then try calling groupByKey() to gather all of the similar project prefixes together and then sum them using map():","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a228e20b-4b1a-43cf-a545-1d1a2549b1a3"},{"version":"CommandV1","origId":503877321546790,"guid":"430ff367-8be9-46d1-ae7d-761718bfe0f9","subtype":"command","commandType":"auto","position":101.0,"command":"pagecounts4PartitionsRDD\n  .map(line => (line._1, line._3))\n  .groupByKey()\n  .map(kv => (kv._1, kv._2.sum))\n  .collect()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"47a29873-aed0-4c86-9857-61c83354e90c"},{"version":"CommandV1","origId":503877321546791,"guid":"476f2da9-0260-4cb1-bd9a-f141896d8de2","subtype":"command","commandType":"auto","position":102.0,"command":"%md That collected a lot of data at the Driver. To make the results more readable, let's sort by the number of requests, from highest to lowest and just display the top ten projects:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1a5bde65-164b-48e3-8bce-a964b077ec3b"},{"version":"CommandV1","origId":503877321546792,"guid":"4a304c84-b158-461d-b514-fa9c0d522e2b","subtype":"command","commandType":"auto","position":103.0,"command":"// Sort by the value (number of requests) and pass in false to sort in descending order\npagecounts4PartitionsRDD\n  .map(line => (line._1, line._3))\n  .groupByKey()\n  .map(kv => (kv._1, kv._2.sum))\n  .sortBy(kv => kv._2, false)\n  .take(10)\n  .foreach(println)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2f11467e-a8a6-4fe3-a975-119df386a5ea"},{"version":"CommandV1","origId":503877321546793,"guid":"0babf016-d77a-4e7c-a641-6ee957b8b269","subtype":"command","commandType":"auto","position":104.0,"command":"%md We can see that the English Wikipedia Desktop and the English Wikipedia Mobile got the most hits this hour, followed by some other languages (usually depending on where the sun is currently up, check out: http://www.die.net/earth/).","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3c29c8c6-bb9c-4a5a-885b-5832c1448293"},{"version":"CommandV1","origId":503877321546794,"guid":"248b45c0-b0e7-410f-996e-e491bdfbdd09","subtype":"command","commandType":"auto","position":105.0,"command":"%md The previous command is a bit slow... it takes about 8-9 seconds to run.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0985fa28-6987-4274-9592-bb41ba65e6e5"},{"version":"CommandV1","origId":503877321546795,"guid":"efb6b614-a39f-4aa5-befe-10ca40250534","subtype":"command","commandType":"auto","position":106.0,"command":"%md \n##### Performance Optimization: Use reduceByKey() instead of groupByKey()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ff50c6d3-f608-4dc6-98cb-2998fceb3716"},{"version":"CommandV1","origId":503877321546796,"guid":"e2b9003e-64b8-4e90-b3c1-a82cbe12f058","subtype":"command","commandType":"auto","position":107.0,"command":"%md Actually, we can also use `reduceByKey()` to calculate the answer much faster:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e13791d5-17bf-487a-96e0-c2a2c84144c6"},{"version":"CommandV1","origId":503877321546797,"guid":"9c87e2f5-8d35-4d0c-9819-2f3eee911b4b","subtype":"command","commandType":"auto","position":108.0,"command":"pagecounts4PartitionsRDD\n  .map(line => (line._1, line._3))\n  .reduceByKey(_ + _)\n  .sortBy(x => x._2, false)\n  .take(10)\n  .foreach(println)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ed05bfad-dcd7-4f60-a5bd-05f77c5f81c9"},{"version":"CommandV1","origId":503877321546798,"guid":"0f52531e-c776-415e-b1cf-d6a4fad9f12e","subtype":"command","commandType":"auto","position":109.0,"command":"%md Curious about why `reduceByKey()` is more efficient?\n\nCheck out the \n[Databricks Knowledge Base](https://databricks.gitbooks.io/databricks-spark-knowledge-base/content/best_practices/prefer_reducebykey_over_groupbykey.html) for a quick explanation.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"881b5f11-2f8c-41e9-8969-d6cd6f766cc7"},{"version":"CommandV1","origId":503877321546799,"guid":"47042a63-b418-40ce-a3da-c1c34cd54e11","subtype":"command","commandType":"auto","position":110.0,"command":"%md ##### Dataset answer:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"669e912c-2aee-47df-bd9c-5c41ee25bb4f"},{"version":"CommandV1","origId":503877321546800,"guid":"b238503b-2174-4779-88e0-70262b7d2c1a","subtype":"command","commandType":"auto","position":111.0,"command":"%md When using Datasets, you don't have to worry about picking the perfect Spark operation (like `reduceByKey()` above). Instead, the Catalyst Optimizer will pick the most performant physical plan automatically!","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"196995b1-6b44-496e-a9aa-3deb15cc17ad"},{"version":"CommandV1","origId":503877321546801,"guid":"68fc5a08-a1ea-4e69-b3c7-b60b1c1c70b7","subtype":"command","commandType":"auto","position":112.0,"command":"%md Start by creating key/value pairs from the project prefix and the number of requests:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"441a2e6f-2a12-4724-afe7-18fa81ff7ef0"},{"version":"CommandV1","origId":503877321546802,"guid":"1081918e-b114-44a9-b96a-a0ca4e6241d7","subtype":"command","commandType":"auto","position":113.0,"command":"pagecounts4PartitionsDS.map(line => (line._1, line._3)).take(5)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"703eb0bd-a706-4f35-873c-9b5aba774069"},{"version":"CommandV1","origId":503877321546803,"guid":"4beb552a-fe92-4cb8-aa99-cbba7abb1627","subtype":"command","commandType":"auto","position":114.0,"command":"pagecounts4PartitionsDS.map(line => (line._1, line._3)).groupBy(_._1).count().take(5)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a38f1ffc-d96d-49b7-bb97-15200be5cd1b"},{"version":"CommandV1","origId":503877321546804,"guid":"ae5f8d63-cba0-4222-939b-f7575f76d9c6","subtype":"command","commandType":"auto","position":115.0,"command":"%md Since Datasets are still an experimental API and aggregations/sorting are not yet fully supported, let's switch the Dataset to a Dataframe for an aggregation:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"bc07facc-f245-47b1-9ec2-f0aad9b0303c"},{"version":"CommandV1","origId":503877321546805,"guid":"29ab1d89-7ed6-400a-a686-b0576fa75d9d","subtype":"command","commandType":"auto","position":116.0,"command":"pagecounts4PartitionsDS\n  .map(line => (line._1, line._3))     // yank out k/v pairs of the project and # of requests\n  .toDF()                              // Convert to DataFrame to perform aggregation / sorting\n  .groupBy($\"_1\")                      // Group the k/v pairs by the key (project name)\n  .agg(sum(\"_2\") as \"sumOccurances\")   // Sum up how many occurrances there are of each project\n  .orderBy($\"sumOccurances\" desc)      // Order in descening order\n  .take(10)\n  .foreach(println)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5b566b7d-ce05-4f64-8663-6f441c3c4531"},{"version":"CommandV1","origId":503877321546806,"guid":"073d2170-1857-4f36-b4bf-d29f7af02eec","subtype":"command","commandType":"auto","position":117.0,"command":"%md \n### Question #4:\n** How many requests did the \"Apache Spark\" article recieve during this hour? Which Wikipedia language got the most requests for \"Apache Spark\"?**","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5b2eaa45-9af7-43b1-8ea6-96934b40aa52"},{"version":"CommandV1","origId":503877321546807,"guid":"0539c2eb-682b-4ee3-a08d-177e1a655174","subtype":"command","commandType":"auto","position":118.0,"command":"%md ##### RDD answer:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"90809a32-fd3d-4d00-9158-bf1c0ca18141"},{"version":"CommandV1","origId":503877321546808,"guid":"83fb51a9-c987-4e0b-9ffe-0cb0bf2b7a22","subtype":"command","commandType":"auto","position":119.0,"command":"%md Using our existing RDDs and Datasets are kind of confusing to work with because we have not named the columns. We've been having to refer to columns using arcane syntax like `._1` or `$\"_1\"`. \n\nSo, let's define a case class to organize our data in PageCount objects with named + typed columns:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d4d6bedb-8c5b-42bb-be08-38b966fe5dbf"},{"version":"CommandV1","origId":503877321546809,"guid":"f5310772-4244-4c68-8068-940f0fe1ac11","subtype":"command","commandType":"auto","position":120.0,"command":"case class PageCount(val project: String, val title: String, val requests: Long, val size: Long) extends java.io.Serializable","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e62d69c1-c458-4664-8286-de35f8df8161"},{"version":"CommandV1","origId":503877321546810,"guid":"289ac476-3997-4fb5-b1b1-aaf8d788b17c","subtype":"command","commandType":"auto","position":121.0,"command":"val pagecountObjectsRDD = pagecountsRDD\n  .map(_.split(' '))\n  .filter(_.size == 4)\n  .map(pc => new PageCount(pc(0), pc(1), pc(2).toLong, pc(3).toLong))\n  .repartition(4)\n  .setName(\"pagecountObjectsRDD\")\n  .cache()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"770cd3fd-4ed5-4191-a7ee-6f6b3256a628"},{"version":"CommandV1","origId":503877321546811,"guid":"f7a94fbb-cdaa-4d9f-9cf5-abec3d2f5b63","subtype":"command","commandType":"auto","position":122.0,"command":"pagecountObjectsRDD.count // Materialize the cache","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"53cab84d-9969-44b4-9b84-6a041e5a0b78"},{"version":"CommandV1","origId":503877321546812,"guid":"f693970a-d164-4a15-8319-2000b0ded80f","subtype":"command","commandType":"auto","position":123.0,"command":"%md The new pagecountObjectsRDD with 4 partitions which contains the named + type columns takes up a lot more space in memory than the RDD with just typed columns:\n\n#![RDD comparison](http://i.imgur.com/xk4PFOk.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c05e5ff4-f89b-46ff-abd0-5ed1ad22f9df"},{"version":"CommandV1","origId":503877321546813,"guid":"8c845ce0-42c4-49fa-bd84-04257419d07b","subtype":"command","commandType":"auto","position":124.0,"command":"%md Filter out just the lines that mention \"Apache_Spark\" in the title:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c0386a30-7a11-4dfa-b5c2-845fff906069"},{"version":"CommandV1","origId":503877321546814,"guid":"cbe47e6f-88cf-4bb7-a86f-5bf7e80c04e9","subtype":"command","commandType":"auto","position":125.0,"command":"// Note that now we can refer to the fields on each line with its friendly name, for example title here\npagecountObjectsRDD\n  .filter(_.title.contains(\"Apache_Spark\"))\n  .count","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a765f325-455f-4629-82c0-f621fe544ea8"},{"version":"CommandV1","origId":503877321546815,"guid":"e5414196-0383-49fe-896d-994a305eed55","subtype":"command","commandType":"auto","position":126.0,"command":"%md The number you see in the cell above is how many different lines in this hour's pagecounts file refer to the \"Apache Spark\" article. ","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"deeda29e-a881-48c9-af0f-d0ce35652d41"},{"version":"CommandV1","origId":503877321546816,"guid":"3099ea5d-008c-4b4b-ac18-82210b8b1b03","subtype":"command","commandType":"auto","position":127.0,"command":"%md ** Challenge 6:** Can you figure out which language edition of the Apache Spark page got the most hits? \n\nHint: Consider using a .map() after the filter() in the cell above.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c9915eb3-b4a4-46c4-8239-bd37a7aab886"},{"version":"CommandV1","origId":503877321546817,"guid":"efdcaf67-c2e5-46bc-8046-15b73f82ceb6","subtype":"command","commandType":"auto","position":128.0,"command":"// Type your answer here...\npagecountObjectsRDD\n  .filter(_.title.contains(\"Apache_Spark\"))\n  .map(x => (x.project, x.requests))\n  .collect","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2833f980-5ffb-43b5-a616-2acb411d0ca9"},{"version":"CommandV1","origId":503877321546818,"guid":"37392288-caf3-4f03-8003-77411c723c3f","subtype":"command","commandType":"auto","position":129.0,"command":"%md It seems like the English version of the Apache Spark page got the most hits by far.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"790fcb23-5b7c-42b3-91c1-33915702192d"},{"version":"CommandV1","origId":503877321546819,"guid":"c11af582-7cde-431b-ba54-9f8555bfe553","subtype":"command","commandType":"auto","position":130.0,"command":"%md ##### Dataset answer:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f524c5eb-8a56-437c-a2ad-b9671d9cee03"},{"version":"CommandV1","origId":503877321546820,"guid":"1ace9d67-a353-48cc-a293-7ad07148aaa2","subtype":"command","commandType":"auto","position":131.0,"command":"%md First use the PageCount case class to create a Dataset named `pagecountObjectsDS`:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"7bdd1eaf-58c7-499d-8629-3b1734079c34"},{"version":"CommandV1","origId":503877321546821,"guid":"01f6af87-0ae9-4d24-a89e-a955be09fa14","subtype":"command","commandType":"auto","position":132.0,"command":"val pagecountObjectsDS = pagecountsDS\n  .filter(_.split(' ').size == 4)\n  .map { line =>\n    val fields = line.split(' ')\n    PageCount(fields(0), fields(1), fields(2).toLong, fields(3).toLong)\n  }\n  .repartition(4)\n  .cache()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4534fce6-3ceb-443b-ad67-91935c82dd7f"},{"version":"CommandV1","origId":503877321546822,"guid":"1eb50466-eeda-45a0-940b-5533623f2628","subtype":"command","commandType":"auto","position":133.0,"command":"%md Then do the calculation:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"de9fd8b7-75dc-47cd-ad39-dddfdb9a7169"},{"version":"CommandV1","origId":503877321546823,"guid":"ac0c7f66-d61f-42b9-a97d-45eb7f41b87e","subtype":"command","commandType":"auto","position":134.0,"command":"// Notice how similar this code looks to the RDD version a few cells above\npagecountObjectsDS\n  .filter(_.title.contains(\"Apache_Spark\"))\n  .map(x => (x.project, x.requests))\n  .collect","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b6574c8c-a997-44a7-95e9-1de4ba6890a0"},{"version":"CommandV1","origId":503877321546824,"guid":"d03cc54a-e6ba-4203-98bb-17568e9aacee","subtype":"command","commandType":"auto","position":135.0,"command":"%md At this time, check out the Spark UI and compare the `pagecountObjectsDS` in memory to the `pagecounts4PartitionsDS`, which was parsed fields with just type info (not col names). Note both have 4 partitions. You will notice that when adding a column name to the 4 partitions RDD, it blew up in memory space by 3-4x. Datasets however, don't do this.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d06ec11e-cd4b-42a6-aed8-7f81f22db8c9"},{"version":"CommandV1","origId":503877321546825,"guid":"586ddf4b-c634-472d-80d1-a617239d16e5","subtype":"command","commandType":"auto","position":136.0,"command":"%md \n### Question #5:\n** How many requests did the English Wiktionary project get during the captured hour?**","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"908692fb-56f3-4b3c-bae6-41e8d29c4a3e"},{"version":"CommandV1","origId":503877321546826,"guid":"0ef8a497-9d36-43ad-93b1-2727bb5763d9","subtype":"command","commandType":"auto","position":137.0,"command":"%md \nThe [Wiktionary](https://en.wiktionary.org/wiki/Wiktionary:Main_Page) project is a free dictionary with 4 million+ entries from over 1,500 languages.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"44112f1e-1582-49eb-b430-32912a252887"},{"version":"CommandV1","origId":503877321546827,"guid":"f69adee1-7916-4b85-aece-78af15b0a33b","subtype":"command","commandType":"auto","position":138.0,"command":"%md ##### RDD answer:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0e31a8b4-9f54-4875-b753-b63ef8b6425e"},{"version":"CommandV1","origId":503877321546828,"guid":"8abb76d3-0e1e-46d9-a15f-ac53c928357d","subtype":"command","commandType":"auto","position":139.0,"command":"%md ** Challenge 7:** Can you figure this out? Start by figuring out the correct prefix that identifies the English Wikitionary project.\n\nHint: This one's easy!","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8db05a0f-a8f8-4507-b72c-0fcd0261e166"},{"version":"CommandV1","origId":503877321546829,"guid":"f8712f55-5f6f-4912-9759-33afa4b9cbde","subtype":"command","commandType":"auto","position":140.0,"command":"// Type your answer here...\npagecountObjectsRDD\n  .filter(_.project.contains(\"en.d\"))\n  .count","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1ef85059-9f5f-4423-a420-34f863ed44bb"},{"version":"CommandV1","origId":503877321546830,"guid":"a89721fe-f752-432d-a01d-ba4a2509f0bb","subtype":"command","commandType":"auto","position":141.0,"command":"%md The English Wikionary project gets approximately 100,000 requests each hour.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"9a0a0e61-42a9-4757-b035-40504a41e6c6"},{"version":"CommandV1","origId":503877321546831,"guid":"09b21ce3-bfee-4896-bcb4-3a848d134e29","subtype":"command","commandType":"auto","position":142.0,"command":"%md Note that RDDs have compile-time type safety and will complain right away if you issue a bad column name or make a comparison between incompatible data types:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"de311bd9-a429-43f1-8a9d-bd7adf19529b"},{"version":"CommandV1","origId":503877321546832,"guid":"10b2983c-502c-4a41-87cd-f2a817f455cc","subtype":"command","commandType":"auto","position":143.0,"command":"// This command will fail because the \"badColName\" does not exist\npagecountObjectsRDD\n  .filter(_.badColName.contains(\"en.d\"))","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"179e8bcc-63e7-483a-b322-c0cd9f142bdc"},{"version":"CommandV1","origId":503877321546833,"guid":"687b7d8b-25a6-40b2-8c87-cdc49e929bae","subtype":"command","commandType":"auto","position":144.0,"command":"// This command will fail because it's not possible to subtract a number (50) from a String (_.project)\npagecountObjectsRDD\n  .filter(_.project - 50)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3b501f3c-7d0e-4c62-8c4e-c69f0805501d"},{"version":"CommandV1","origId":503877321546834,"guid":"2c4e85b1-c6f7-4ba5-bd67-ceb796784ccf","subtype":"command","commandType":"auto","position":145.0,"command":"%md Note that the above 2 errors are caught at compile time by the Scala compiler.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"cc058dcd-cbe3-424a-a262-b491cbcf042c"},{"version":"CommandV1","origId":503877321546835,"guid":"4acdec0d-4336-4a3b-a65e-2df5391238fd","subtype":"command","commandType":"auto","position":146.0,"command":"%md ##### Dataset answer:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c071603e-0c4a-4014-b50b-b11ac25f7c8c"},{"version":"CommandV1","origId":503877321546836,"guid":"c05dd1cb-c041-499a-bfe2-0750f4d629b4","subtype":"command","commandType":"auto","position":147.0,"command":"pagecountObjectsDS\n  .filter(_.project.contains(\"en.d\"))\n  .count","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"81e2a62b-2101-4502-9b99-cd53764dd8ab"},{"version":"CommandV1","origId":503877321546837,"guid":"fdf29b6c-34ca-423a-9290-c81d3e886f3e","subtype":"command","commandType":"auto","position":148.0,"command":"%md Similar to RDDs, Datasets also have compile-time type safety and will complain right away if you issue a bad column name make a comparison between incompatible data types:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"af8317f3-e5ba-49cc-9e40-23f95734364e"},{"version":"CommandV1","origId":503877321546838,"guid":"c321bff0-b16f-4fdc-b11b-b5f5a07faae8","subtype":"command","commandType":"auto","position":149.0,"command":"// This command will fail because the \"badColName\" does not exist\npagecountObjectsDS\n  .filter(_.badColName.contains(\"en.d\"))","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f5e17469-1f43-4886-8145-8be234ce7d4d"},{"version":"CommandV1","origId":503877321546839,"guid":"337c4a48-6f80-4dad-ba05-81321abe95a2","subtype":"command","commandType":"auto","position":150.0,"command":"// This command will fail because it's not possible to subtract a number (50) from a String (_.project)\npagecountObjectsDS\n  .filter(_.project - 50)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"63caf7ce-2c17-4f5c-83b5-178f168c701d"},{"version":"CommandV1","origId":503877321546840,"guid":"a9e4dfc6-0c95-4d8a-af8f-daa1be560329","subtype":"command","commandType":"auto","position":151.0,"command":"%md Note that the above 2 errors are caught at compile time by the Scala compiler before the query plan gets sent to the Catalyst optimizer.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ba3a4030-e2db-4551-82d9-bf5a81c578c0"},{"version":"CommandV1","origId":503877321546841,"guid":"22a71924-6629-4e68-b536-02b014849ead","subtype":"command","commandType":"auto","position":152.0,"command":"%md ##### Dataframe answer:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4d8ae2f6-fd1a-43a3-9ee1-d6ea4abf9541"},{"version":"CommandV1","origId":503877321546842,"guid":"9d7ee53b-2552-4640-88f9-ce47c628cbe7","subtype":"command","commandType":"auto","position":153.0,"command":"%md Let's write a solution for this question via Dataframes API also for a comparison:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0e71d569-d173-4c38-8cfe-a09fb8959028"},{"version":"CommandV1","origId":503877321546843,"guid":"bbb78cfc-d3a0-46c2-bb75-1834c49518cc","subtype":"command","commandType":"auto","position":154.0,"command":"display(pagecountObjectsDS.toDF)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"48358a50-ea86-45e6-8a4f-6794074dc809"},{"version":"CommandV1","origId":503877321546844,"guid":"c1ad1b7e-a425-4dac-910e-02ab4a8cd1b2","subtype":"command","commandType":"auto","position":155.0,"command":"// Here is the answer using Dataframes. The syntax for the filter is a bit different\npagecountObjectsDS\n  .toDF\n  .filter($\"project\" === \"en.d\")\n  .count","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"74408ff4-d5c3-44aa-a2b7-47af6efdb43a"},{"version":"CommandV1","origId":503877321546845,"guid":"97d2a0a2-d919-4a14-8d13-05f3fd134085","subtype":"command","commandType":"auto","position":156.0,"command":"%md Unlike RDDs and Datasets, Dataframes are not compile time type-safe:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f92b61d4-0316-4dc4-b421-699773e58daa"},{"version":"CommandV1","origId":503877321546846,"guid":"2e17f483-5c4e-40f0-8342-ef9d2e320a0e","subtype":"command","commandType":"auto","position":157.0,"command":"// Here we are trying to access an invalid column name and the Catalyst optimizer throws an error\npagecountObjectsDS\n  .toDF\n  .filter($\"badColName\" === \"en.d\")\n  .count","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"59475655-cb81-4cc0-8e53-5f278d4648f2"},{"version":"CommandV1","origId":503877321546847,"guid":"f95c0475-13c9-4c2a-b4ce-2968c5ca5c62","subtype":"command","commandType":"auto","position":158.0,"command":"// Here we are trying to access an invalid column name and the Catalyst optimizer throws an error\npagecountObjectsDS\n  .toDF\n  .filter($\"project\" - 50)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"acd58e80-9fe6-415e-88b9-f93bdb9f35fa"},{"version":"CommandV1","origId":503877321546848,"guid":"3d8f93aa-fff4-4840-814d-31ee0437c77f","subtype":"command","commandType":"auto","position":159.0,"command":"%md The above errors are run time errors thrown by Spark SQL (it was not caught by Scala at compile time and got sent to Catalyst, which threw an error). Notice how the error is different here than the RDD and Dataset errors above.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"33899ed2-077a-47de-a800-08652c3a7896"},{"version":"CommandV1","origId":503877321546849,"guid":"c42ce751-3e87-48c9-bc07-aacc6fe25cce","subtype":"command","commandType":"auto","position":160.0,"command":"%md \n### Question #6:\n** Which Apache project in English Wikipedia got the most hits during the captured hour?**","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f8503dcb-be6e-46c4-b7f2-640e08f9f3ee"},{"version":"CommandV1","origId":503877321546850,"guid":"1fa286f1-b5f2-4f3f-a9cf-2e482393b8e5","subtype":"command","commandType":"auto","position":161.0,"command":"%md ##### RDD answer:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ed8e7636-d00c-4f47-892a-24410c2b8a2c"},{"version":"CommandV1","origId":503877321546851,"guid":"84e788d9-903e-4fcc-a538-d3173a97b59a","subtype":"command","commandType":"auto","position":162.0,"command":"// Here we reuse the pagecountObjectsRDD we had defined earlier\npagecountObjectsRDD\n  .filter(_.project.contains(\"en\"))\n  .filter(_.title.contains(\"Apache_\"))\n  .map(x => (x.title, x.requests))\n  .collect\n  .foreach(println)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"205e3a7b-fe8a-43de-b54b-601be7f8efed"},{"version":"CommandV1","origId":503877321546852,"guid":"4d867b61-da3c-454f-ba2b-95d82cd19c79","subtype":"command","commandType":"auto","position":163.0,"command":"%md The results above are not sorted. Let's sort them by the value, from highest to lowest:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8d131c9d-db53-41d4-9963-9fe8df4cdbbe"},{"version":"CommandV1","origId":503877321546853,"guid":"00ef4918-88f7-4fdc-a4f7-50a2db8c437f","subtype":"command","commandType":"auto","position":164.0,"command":"// Here we reuse the pagecountObjectsRDD we had defined earlier\npagecountObjectsRDD\n  .filter(_.project.contains(\"en\"))\n  .filter(_.title.contains(\"Apache_\"))\n  .map(x => (x.title, x.requests))\n  .map(item => item.swap) // interchanges position of entries in each tuple\n  .sortByKey(false, 1) // 1st arg configures ascending sort, 2nd arg configures one task\n  .map(item => item.swap)\n  .collect\n  .foreach(println)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c6cafea2-4d77-4bde-8fcc-e94c0613e37e"},{"version":"CommandV1","origId":503877321546854,"guid":"b6bb1618-4d05-4895-a311-569ce139bbc3","subtype":"command","commandType":"auto","position":165.0,"command":"%md We can infer from the above results which Apache projects were the most popular in the past hour.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c1b81168-11d2-4c74-a2f8-668b99ad0afc"},{"version":"CommandV1","origId":503877321546855,"guid":"da18bf65-db0e-4afb-a474-c4fad0704c46","subtype":"command","commandType":"auto","position":166.0,"command":"%md ##### Dataset + Dataframe answer:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f534a5ec-de0b-4448-acef-534b7f683f6a"},{"version":"CommandV1","origId":503877321546856,"guid":"b77c941c-059d-46af-9feb-fecafd1bc041","subtype":"command","commandType":"auto","position":167.0,"command":"%md Currently, we have to convert a Dataset to a Dataframe to perform aggregation or sorting operations. Display the Dataframe before the sort:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4295754b-99c5-42ba-89bc-f8a09a75487b"},{"version":"CommandV1","origId":503877321546857,"guid":"6fc03aa8-bc4f-423e-8765-fdb5ef8bd427","subtype":"command","commandType":"auto","position":168.0,"command":"display(pagecountObjectsDS\n  .filter(_.project.contains(\"en\"))\n  .filter(_.title.contains(\"Apache_\"))\n  .map(x => (x.title, x.requests))\n  .toDF)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"af62e942-af71-43e4-812f-28db9e56f1d4"},{"version":"CommandV1","origId":503877321546858,"guid":"7b7c7825-8c09-4c98-b601-67a1a1cd42a1","subtype":"command","commandType":"auto","position":169.0,"command":"%md ** Challenge 8:** Sort the Dataframe above in descending order of the value column (_2):","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"357e53bf-2452-4ec1-9045-d0745db647f8"},{"version":"CommandV1","origId":503877321546859,"guid":"c737a9c9-9ca0-4249-b3e0-cc90a4672728","subtype":"command","commandType":"auto","position":170.0,"command":"// Type your answer where it says <<fill in here>> below\n\ndisplay(pagecountObjectsDS\n  .filter(_.project.contains(\"en\"))\n  .filter(_.title.contains(\"Apache_\"))\n  .map(x => (x.title, x.requests))\n  .toDF\n  .orderBy($\"_2\".desc))//<<fill in here>>","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d814719a-ac7c-4fc0-8740-4e77fe61db6d"},{"version":"CommandV1","origId":503877321546860,"guid":"d1d9a043-4bdf-4873-bb9b-11b48764bc2e","subtype":"command","commandType":"auto","position":171.0,"command":"%md \n### Question #7:\n** What were the top 30 articles viewed in English Wikipedia during the capture hour?**","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"fc72af93-302c-43e5-90e6-d8e2b78d9c21"},{"version":"CommandV1","origId":503877321546861,"guid":"652cfed4-d402-4794-a578-6c0bf54c2210","subtype":"command","commandType":"auto","position":172.0,"command":"%md ##### RDD answer:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"564f32ea-7d5b-4fd9-93a4-1ae12c5d8e3e"},{"version":"CommandV1","origId":503877321546862,"guid":"438d0800-aeb7-46bb-b3f7-caf9b0f1f590","subtype":"command","commandType":"auto","position":173.0,"command":"//Recall that we already have a RDD created that we can use for this analysis\npagecountObjectsRDD","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b8e04047-9ea0-43f2-b2d5-04be5f06457e"},{"version":"CommandV1","origId":503877321546863,"guid":"650f92d5-afb1-4634-9d6b-264c8c83a3df","subtype":"command","commandType":"auto","position":174.0,"command":"pagecountObjectsRDD\n  .filter(_.project.contains(\"en\"))\n  .map(x => (x.title, x.requests))\n  .map(item => item.swap) // interchanges position of entries in each tuple\n  .sortByKey(false, 1) // 1st arg configures ascending sort, 2nd arg configures one task\n  .map(item => item.swap)\n  .take(30)\n  .foreach(println)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1ba36afd-0e01-495c-a3e0-c2c023fbaabd"},{"version":"CommandV1","origId":503877321546864,"guid":"464a2bad-2f27-4e1d-87db-6c394defcd25","subtype":"command","commandType":"auto","position":175.0,"command":"%md ##### Dataset answer:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5d9d82fa-8aa4-4604-a563-8a5dc5073da4"},{"version":"CommandV1","origId":503877321546865,"guid":"6e8fa17e-ba03-405a-8596-dd12769f687f","subtype":"command","commandType":"auto","position":176.0,"command":"// Notice how much simpler the Dataset answer is compared to the RDD answer above, and it'll get even simpler when you don't have to convert to a DF for aggregations in the future (Spark 2.0)!\n\npagecountObjectsDS\n  .filter(_.project.contains(\"en\"))\n  .map(x => (x.title, x.requests))\n  .toDF\n  .orderBy($\"_2\".desc)\n  .show(30)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b9a8b32f-802d-4b79-9ab5-3ac2e2acb388"},{"version":"CommandV1","origId":503877321546866,"guid":"046ab503-4da8-4181-b6e9-22e0fd0f2c4e","subtype":"command","commandType":"auto","position":177.0,"command":"%md This concludes the lab.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"62c35749-f172-4cd6-8878-d7f5f88137a1"}],"dashboards":[],"guid":"a5789fcc-2fb7-402d-a48e-efa5c9bc56cd","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}