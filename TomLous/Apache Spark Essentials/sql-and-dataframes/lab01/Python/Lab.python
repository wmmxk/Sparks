{"version":"NotebookV1","origId":503877321548224,"name":"Lab","language":"python","commands":[{"version":"CommandV1","origId":503877321548226,"guid":"d9884ce2-3854-42c4-87a9-3bd19bead611","subtype":"command","commandType":"auto","position":1.0,"command":"%md # DataFrames Python Lab\n\nFor this lab, refer to the <a href=\"http://spark.apache.org/docs/1.6.1/api/python/pyspark.sql.html#pyspark.sql.DataFrame\" target=\"_blank\">DataFrames API documentation</a>.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a9652aa9-2adf-4e28-87d9-a59674369744"},{"version":"CommandV1","origId":503877321548227,"guid":"517fd643-bd08-41d2-9123-9f2eaf0d18a5","subtype":"command","commandType":"auto","position":2.0,"command":"%md **Remember**: In the notebook, you already have a `SQLContext` object, called `sqlContext`. However, if you need to create one yourself (e.g., for a non-notebook application), do it like this:\n```\n# assuming \"sc\" is some existing SparkContext object\nsqlContext = SQLContext(sc)\n```\n\n**WARNING: Don't ever do this IN the notebook!**","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b4ca5885-40b9-42ee-bb69-f6f84ac25e70"},{"version":"CommandV1","origId":503877321548228,"guid":"34213c72-3b74-42ab-82f1-b248bf937670","subtype":"command","commandType":"auto","position":3.0,"command":"%md We've already created a Parquet table containing popular first names by gender and year, for all years between 1880 and 2014. (This data comes from the United States Social Security Administration.) We can create a DataFrame from that data, by calling `sqlContext.read.parquet()`.\n\n**NOTE**: That's the Spark 1.4 API. The API is slightly different in Spark 1.3.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"099c9bc7-58a9-497a-805e-6076414dec28"},{"version":"CommandV1","origId":503877321548229,"guid":"3fc0b9ca-0158-4e5a-9899-0570519ac8aa","subtype":"command","commandType":"auto","position":4.0,"command":"# Spark 1.4 and later\ndf = sqlContext.read.parquet(\"dbfs:/mnt/training/ssn/names.parquet\")\n\n# Spark 1.3 and earlier\n#df = sqlContext.parquetFile(\"dbfs:/mnt/training/ssn/names.parquet\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e882006d-b022-4327-8a51-364e0202b6b0"},{"version":"CommandV1","origId":503877321548230,"guid":"98048d53-880f-4b2c-942a-947a72f61aff","subtype":"command","commandType":"auto","position":5.0,"command":"%md Let's cache our Social Security names DataFrame, to speed things up.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4fd39899-81ab-42db-acc4-f0e5d69d4a7f"},{"version":"CommandV1","origId":503877321548231,"guid":"697fcfee-1f15-4724-b775-e1a042720844","subtype":"command","commandType":"auto","position":6.0,"command":"df.cache()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"af478312-7167-4a15-a009-6cbaca775c9f"},{"version":"CommandV1","origId":503877321548232,"guid":"1fea3537-c7d6-489f-b49d-66170a5ae152","subtype":"command","commandType":"auto","position":7.0,"command":"%md Let's take a quick look at the first 20 items of the data.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"69c7f13c-9303-4a41-a2e1-69b6793f94ae"},{"version":"CommandV1","origId":503877321548233,"guid":"65ab0d3b-92fb-47a0-9eb5-231cf2486d12","subtype":"command","commandType":"auto","position":8.0,"command":"df.show()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a1908037-dfb6-4a7f-ad52-4285db0e5421"},{"version":"CommandV1","origId":503877321548234,"guid":"e10c6933-b0b4-410f-be90-d966b58687f5","subtype":"command","commandType":"auto","position":9.0,"command":"%md You can also use the `display()` helper, to get more useful (and graphable) output:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"156da78d-fd15-432e-8292-5b0b145c4102"},{"version":"CommandV1","origId":503877321548235,"guid":"63cccf95-3ca4-4218-88b9-cb98ad6eca05","subtype":"command","commandType":"auto","position":10.0,"command":"display(df)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"37960bf4-5507-47fa-85fe-315a04decad8"},{"version":"CommandV1","origId":503877321548236,"guid":"271726b3-48bc-49c4-ac87-ddca781ebdf5","subtype":"command","commandType":"auto","position":11.0,"command":"%md Take a look at the data schema, as well. Note that, in this case, the schema was read from the columns (and types) in the Parquet table.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0f6955d6-42fe-4627-9241-d551bc0c0ea5"},{"version":"CommandV1","origId":503877321548237,"guid":"befb00de-fbde-4712-b53a-d00fe8fba221","subtype":"command","commandType":"auto","position":12.0,"command":"df.printSchema()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f0306be2-98d7-4b8a-a9d0-f95bd559fb9d"},{"version":"CommandV1","origId":503877321548238,"guid":"f88ecece-e6db-46f7-aeda-6c9c5546c684","subtype":"command","commandType":"auto","position":13.0,"command":"%md You can create a new DataFrame that looks at a subset of the columns in the first DataFrame.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6e942c31-2e69-4b9f-9962-fc88041bbfe9"},{"version":"CommandV1","origId":503877321548239,"guid":"cf2c9fb5-9596-4f43-88ad-746df8095f3d","subtype":"command","commandType":"auto","position":14.0,"command":"firstNamesDF = df.select(\"firstName\", \"year\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"084e2bf6-54bb-45ea-b00f-1de4785b1d91"},{"version":"CommandV1","origId":503877321548240,"guid":"8b79b860-9289-4889-b638-b63c60cf801d","subtype":"command","commandType":"auto","position":15.0,"command":"%md Then, you can examine the values in the `nameDF` DataFrame, using an action like `show()` or the `display()` helper: ","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"87d4de9b-b571-4a7a-a12b-0f3b9a6a85db"},{"version":"CommandV1","origId":503877321548241,"guid":"a982091c-0bb6-44cc-892c-99f3d9d6d0f6","subtype":"command","commandType":"auto","position":16.0,"command":"display(firstNamesDF)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"7d77bc6d-0f65-4c33-a88c-43bb2dab1ec0"},{"version":"CommandV1","origId":503877321548242,"guid":"5bc9d1fa-1e58-4362-b8ff-650f4d90313b","subtype":"command","commandType":"auto","position":17.0,"command":"%md You can also count the number of items in the data set...","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3d25c3c6-f4bf-4571-b5b5-b554702f8bc5"},{"version":"CommandV1","origId":503877321548243,"guid":"d5c7a697-e8a2-4740-a43b-49b8a7a5d717","subtype":"command","commandType":"auto","position":18.0,"command":"firstNamesDF.count()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f9ac341b-d666-4b50-8823-c62f59ef9cc6"},{"version":"CommandV1","origId":503877321548244,"guid":"30df2b56-c94d-4915-ae4c-fdc0d0cee3f7","subtype":"command","commandType":"auto","position":19.0,"command":"%md ...or determine how many distinct names there are.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b4877426-faf9-41f6-a950-245273990b19"},{"version":"CommandV1","origId":503877321548245,"guid":"f225e4f5-7085-4871-9359-33e4bb097f9a","subtype":"command","commandType":"auto","position":20.0,"command":"firstNamesDF.select(\"firstName\").distinct().count()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"17d6dc11-f482-44c6-811a-0c5b7fa78e02"},{"version":"CommandV1","origId":503877321548246,"guid":"413ba79c-e076-446e-8aa9-e3f67fa0d598","subtype":"command","commandType":"auto","position":21.0,"command":"%md Let's do something a little more complicated. Let's use the original data frame to find the five most popular names for girls born in 1980. Note the `desc()` in the `orderBy()` call. `orderBy()` (which can also be invoked as `sort()`) sorts in ascending order. `desc()` causes the sort to be in _descending_ order for the column to which `desc()` is attached.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"cecb1270-a729-4033-93d9-a26d4888d560"},{"version":"CommandV1","origId":503877321548247,"guid":"19afb10d-5d50-4c41-8a22-b0c7c5eee7bb","subtype":"command","commandType":"auto","position":22.0,"command":"display(df.filter(df['year'] == 1980).\n           filter(df['gender'] == 'F').\n           orderBy(df['total'].desc(), df['firstName']).\n           select(\"firstName\").\n           limit(5))","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6e457c85-2f9e-4eb4-910c-aa4996187926"},{"version":"CommandV1","origId":503877321548248,"guid":"71991306-ac00-4ac8-9e5a-c77c756da94c","subtype":"command","commandType":"auto","position":23.0,"command":"%md Note that we can do the same thing using the lower-level RDD operations. However, use the DataFrame operations, when possible. In general, they're more convenient. More important, though, they allow Spark to build a query plan that can be optimized through [Catalyst](https://databricks.com/blog/2015/04/13/deep-dive-into-spark-sqls-catalyst-optimizer.html).","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1af80512-2578-4c0a-a450-a6f3af6475b8"},{"version":"CommandV1","origId":503877321548249,"guid":"836f7b2b-ec43-4e76-bbfe-4855eebecef9","subtype":"command","commandType":"auto","position":24.0,"command":"%md ## Joins","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d339206c-2c6f-401f-873a-8a97c51312b9"},{"version":"CommandV1","origId":503877321548250,"guid":"2128fa0b-a3a5-4189-8b35-43502da43a6c","subtype":"command","commandType":"auto","position":25.0,"command":"%md Let's use two views of our SSN data to answer this question: How popular were the top 10 female names of 2010 back in 1930?\n\nBefore we can do that, though, we need to define a utility function. Spark SQL doesn't support the SQL `LOWER` function. To ensure that our data matches up properly, it'd be nice to force the names to lower case before doing the match. Fortunately, it's easy to define our own `LOWER` function:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"18bb2581-02b8-4512-8e84-946b41a89e42"},{"version":"CommandV1","origId":503877321548251,"guid":"0da35f22-63dd-4485-ba28-94a8757e916a","subtype":"command","commandType":"auto","position":26.0,"command":"lower = udf(lambda s: s.lower())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d14607c7-c870-4a4d-a513-4d8027fe2a82"},{"version":"CommandV1","origId":503877321548252,"guid":"4fcbcdcf-c51b-4399-b5c5-e04f9961d2da","subtype":"command","commandType":"auto","position":27.0,"command":"%md Okay, now we can go to work.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ccdbec68-b9e7-4d36-801b-86e997cbe804"},{"version":"CommandV1","origId":503877321548253,"guid":"debc2bb8-e6af-460b-b03e-45cc11229686","subtype":"command","commandType":"auto","position":28.0,"command":"# Create a new DataFrame from the SSNA DataFrame, so that:\n# - We have a lower case version of the name, for joining\n# - We've weeded out the year\n#\n# NOTE: The aliases are necessary; otherwise, the query analyzer\n# generates false equivalences between the columns.\nssn2010 = df.filter(df['year'] == 2010).\\\n             select(df['total'].alias(\"total2010\"), \n                    df['gender'].alias(\"gender2010\"), \n                    df['firstName'].alias(\"firstName2010\"),\n                    lower(df['firstName']).alias(\"name2010\"))\n\n# Let's do the same for 1930.\nssn1930 = df.filter(df['year'] == 1930).\\\n             select(df['total'].alias(\"total1930\"), \n                    df['gender'].alias(\"gender1930\"), \n                    df['firstName'].alias(\"firstName1930\"),\n                    lower(df['firstName']).alias(\"name1930\"))\n\n# Now, let's find out how popular the top 10 New York 2010 girls' names were in 1880.\n# This join works fine in Scala, but not (yet) in Python.\n#\n# j1 = ssn2010.join(ssn1930, (ssn2010.name2010 == ssn1930.name1930) and (ssn2010.gender2010 == ssn1930.gender1930))\n\n# So, we'll do a slightly different version.\njoined = ssn2010.filter(ssn2010.gender2010 == \"F\").\\\n                 join(ssn1930.filter(ssn1930.gender1930 == \"F\"), ssn2010.name2010 == ssn1930.name1930).\\\n                 orderBy(ssn2010.total2010.desc()).\\\n                 limit(10).\\\n                 select(ssn2010.firstName2010.alias(\"name\"), ssn1930.total1930, ssn2010.total2010)\n\ndisplay(joined)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a26efcdf-ed1d-4662-a8e6-f87f5bf6bcab"},{"version":"CommandV1","origId":503877321548254,"guid":"5a6e84cf-6e81-45ee-8c62-1b24906937a0","subtype":"command","commandType":"auto","position":29.0,"command":"%md ## Assignment","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"45715b36-ff47-46e8-b127-b9bfc4eb80fb"},{"version":"CommandV1","origId":503877321548255,"guid":"38005f24-eb07-4f50-a537-1d3ec6191cf2","subtype":"command","commandType":"auto","position":30.0,"command":"%md In the cell below, you'll see an empty function, `top_female_names_for_year`. It takes three arguments:\n\n* A year\n* A number, _n_\n* A starting DataFrame (which will be `df`, from above)\n\nIt returns a new DataFrame that can be used to retrieve the top _n_ female names for that year (i.e., the _n_ names with the highest _total_ values). If there are multiple names with the same total, order those names alphabetically.\n\nWrite that function. To test it, run the cell _following_ the function—i.e., the one containing the `run_tests()` function. (This might take a few minutes.)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c74ee7a0-107c-4837-a47b-b48800f050d3"},{"version":"CommandV1","origId":503877321548256,"guid":"773cc074-6a25-4522-9b22-0a08d5570b39","subtype":"command","commandType":"auto","position":31.0,"command":"def top_female_names_for_year(year, n, df):\n  return df.limit(10) # THIS IS NOT CORRECT! FIX IT.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"496a4637-8856-4202-a482-840c7c54f277"},{"version":"CommandV1","origId":503877321548257,"guid":"bc4af858-0964-429c-a700-f962dbc46e53","subtype":"command","commandType":"auto","position":32.0,"command":"# Transparent Tests\nfrom test_helper import Test\ndef test_year(year, df):\n    return [row.firstName for row in top_female_names_for_year(year, 5, df).collect()]","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"41ebd9df-20b7-419c-8466-ec77c4f028de"},{"version":"CommandV1","origId":503877321548258,"guid":"593d3fc4-3a96-490e-911e-6133d0b8903e","subtype":"command","commandType":"auto","position":33.0,"command":"def run_tests():\n  Test.assertEquals(test_year(1945, df), [u'Mary', u'Linda', u'Barbara', u'Patricia', u'Carol'], 'incorrect top 5 names for 1945')\n  Test.assertEquals(test_year(1970, df), [u'Jennifer', u'Lisa', u'Kimberly', u'Michelle', u'Amy'], 'incorrect top 5 names for 1970')\n  Test.assertEquals(test_year(1987, df), [u'Jessica', u'Ashley', u'Amanda', u'Jennifer', u'Sarah'], 'incorrect top 5 names for 1987')\n  Test.assertTrue(len(test_year(1945, df)) <= 5, 'list not limited to 5 names')\n  Test.assertTrue(u'James' not in test_year(1945, df), 'male names not filtered')\n  Test.assertTrue(test_year(1945, df) != [u'Linda', u'Linda', u'Linda', u'Linda', u'Mary'], 'year not filtered')\n  Test.assertEqualsHashed(test_year(1880, df), \"2038e2c0bb0b741797a47837c0f94dbf24123447\", \"incorrect top 5 names for 1880\")\n  \nrun_tests()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5a71b769-25da-481e-9cab-7cc06203f65a"},{"version":"CommandV1","origId":503877321548259,"guid":"86509c41-54ac-4b94-998a-097da2bdbb50","subtype":"command","commandType":"auto","position":34.0,"command":"%md","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4aed4a7c-9ace-40f2-b1aa-1930d9b689d6"},{"version":"CommandV1","origId":503877321548260,"guid":"0ffb6356-d018-4870-a278-229c6cf0e3b5","subtype":"command","commandType":"auto","position":35.0,"command":"%md \n## Solution\n\nIf you're stuck, and you're really not sure how to proceed, feel free to check out the solution. You'll find it in the same folder as the lab.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"44505e52-932d-41eb-94ee-f11c6abdfecb"},{"version":"CommandV1","origId":503877321548261,"guid":"09d9bd39-49b3-4a17-861c-bb7e52c0a59e","subtype":"command","commandType":"auto","position":36.0,"command":"","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ae20f775-37d7-49a4-8c79-f053b1d3d0de"}],"dashboards":[],"guid":"293bef4a-7165-44c9-9dd8-e33f28c87fa7","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}