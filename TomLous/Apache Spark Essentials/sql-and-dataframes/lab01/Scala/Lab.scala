{"version":"NotebookV1","origId":503877321548176,"name":"Lab","language":"scala","commands":[{"version":"CommandV1","origId":503877321548178,"guid":"519dfc55-e913-4766-ab75-3aad63ab1a79","subtype":"command","commandType":"auto","position":1.0,"command":"%md # DataFrames Scala Lab\n\n<a href=\"http://spark.apache.org/docs/1.6.1/api/scala/index.html#org.apache.spark.sql.DataFrame\" target=\"_blank\">DataFrames API documentation</a>","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e37dbb2b-6d09-463c-a6bd-d6b88b7289a4"},{"version":"CommandV1","origId":503877321548179,"guid":"30fb354b-71b4-4ec9-ac94-ffb2c15e2ac3","subtype":"command","commandType":"auto","position":2.0,"command":"// this is used to implicitly convert an RDD to a DataFrame.\nimport sqlContext.implicits._\nimport org.apache.spark.sql.DataFrame","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b4e28495-98d1-46a2-a8af-7be8b0e1b047"},{"version":"CommandV1","origId":503877321548180,"guid":"18a307d7-b9f9-44b4-8f64-8e89472c2ae6","subtype":"command","commandType":"auto","position":3.0,"command":"%md **Remember**: In the notebook, you already have a `SQLContext` object, called `sqlContext`. (This is also true of a Python notebook.) However, if you need to create one yourself (e.g., for a non-notebook application), do it like this:\n```\nval sc: SparkContext // some existing SparkContext object\nval sqlContext = new org.apache.spark.sql.SQLContext(sc)\n```\n\n**WARNING: Don't ever do this IN the notebook!**","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e6b816cf-53e0-4f2c-a627-ac97448e38c5"},{"version":"CommandV1","origId":503877321548181,"guid":"25c1beb5-7384-4ff4-af73-0cb83485ff2c","subtype":"command","commandType":"auto","position":4.0,"command":"%md We've already created a Parquet table containing popular first names by gender and year, for all years between 1880 and 2014. (This data comes from the United States Social Security Administration.) We can create a DataFrame from that data, by calling `sqlContext.read.parquet()`.\n\n**NOTE**: That's the Spark 1.4 API. The API is slightly different in Spark 1.3.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"19f2fc53-81ed-44fe-a969-bd4d168a514e"},{"version":"CommandV1","origId":503877321548182,"guid":"a2b73558-80bd-425c-947c-12b5f426b0e1","subtype":"command","commandType":"auto","position":5.0,"command":"// Spark 1.4 and 1.5\nval df = sqlContext.read.parquet(\"dbfs:/mnt/training/ssn/names.parquet\")\n\n// Spark 1.3\n//val df = sqlContext.parquetFile(\"dbfs:/mnt/training/ssn/names.parquet\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8118ecec-c2c6-4f78-abe8-e45b4b0fde9a"},{"version":"CommandV1","origId":503877321548183,"guid":"a9f36f9e-f4a5-4cdb-bb50-417c97e85eed","subtype":"command","commandType":"auto","position":6.0,"command":"%md Let's cache it, to speed things up.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"139f4ee8-3c1d-4a65-bd94-2eda6198904a"},{"version":"CommandV1","origId":503877321548184,"guid":"da08bf6c-151c-4410-9650-c08da8aafdd8","subtype":"command","commandType":"auto","position":7.0,"command":"df.cache()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"bb126887-ccfa-47c2-97c2-39fb8c42c1b5"},{"version":"CommandV1","origId":503877321548185,"guid":"386281f7-817f-4dc4-aba7-ea525e56f361","subtype":"command","commandType":"auto","position":8.0,"command":"%md Let's take a quick look at the first 20 items of the data.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5b3d8ae9-c21c-44c7-b9f9-4b4f25aaa54e"},{"version":"CommandV1","origId":503877321548186,"guid":"de50303a-a9da-4d0d-baf7-e6b9d53158d9","subtype":"command","commandType":"auto","position":9.0,"command":"df.show()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"44c75102-b3be-4916-be91-871c6a085375"},{"version":"CommandV1","origId":503877321548187,"guid":"6cbb75ed-1855-4b5d-b8d1-cdcd9640e11b","subtype":"command","commandType":"auto","position":10.0,"command":"%md You can also use the `display()` helper, to get more useful (and graphable) output:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1ed97bc6-1b6c-4642-88a3-fade22d86d9a"},{"version":"CommandV1","origId":503877321548188,"guid":"a9819c16-187e-49df-b931-c68357054722","subtype":"command","commandType":"auto","position":11.0,"command":"display(df)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b728b2b7-029f-4528-a759-12651a14d9ba"},{"version":"CommandV1","origId":503877321548189,"guid":"12df9180-fcdd-4c57-ac8c-0237c4d8f90e","subtype":"command","commandType":"auto","position":12.0,"command":"%md Take a look at the data schema, as well. Note that, in this case, the schema was read from the columns (and types) in the Parquet table.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d22a8cd8-4ece-487e-b1f6-36472c02057a"},{"version":"CommandV1","origId":503877321548190,"guid":"01ea3c1f-9664-48a2-9f93-3ab1e4ddbdc8","subtype":"command","commandType":"auto","position":13.0,"command":"df.printSchema()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3d13f8ac-c5b5-4cfa-a2b1-9857a9961770"},{"version":"CommandV1","origId":503877321548191,"guid":"40800424-b27f-4d7e-b9c2-ea6df6d128f9","subtype":"command","commandType":"auto","position":14.0,"command":"%md You can create a new DataFrame that looks at a subset of the columns in the first DataFrame.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ea998bb4-c283-4c26-92fe-154b0d852f2c"},{"version":"CommandV1","origId":503877321548192,"guid":"77a1eac7-1911-47f7-bfe5-f43e5d090c2b","subtype":"command","commandType":"auto","position":15.0,"command":"val firstNameDF = df.select(\"firstName\", \"year\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2e4a310b-72bf-42a3-9123-cca2b03329f8"},{"version":"CommandV1","origId":503877321548193,"guid":"6b076059-fb16-43e5-9d02-bd676b2f39dc","subtype":"command","commandType":"auto","position":16.0,"command":"%md Then, you can examine the values in the `nameDF` DataFrame, using an action like `show()` or the `display()` helper:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4e5da78b-55b2-4378-8233-c0274ecd6c6e"},{"version":"CommandV1","origId":503877321548194,"guid":"3a9680c2-549c-4ea2-b89c-4702459b389e","subtype":"command","commandType":"auto","position":17.0,"command":"display(firstNameDF)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"85dd5ddf-0e72-47d0-ba9e-ab64e2e156fc"},{"version":"CommandV1","origId":503877321548195,"guid":"fc524ee5-1b8e-4ad8-b488-cfdb028995af","subtype":"command","commandType":"auto","position":18.0,"command":"%md You can also count the number of items in the data set...","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4375bcf3-a69f-4de5-a53f-7a9315aedd25"},{"version":"CommandV1","origId":503877321548196,"guid":"3bd24f13-58d2-4294-a8b2-010fca8c3d59","subtype":"command","commandType":"auto","position":19.0,"command":"firstNameDF.count()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"40505c9d-98f8-434c-a1c7-739e80104608"},{"version":"CommandV1","origId":503877321548197,"guid":"d948136e-abf4-4e13-9bb7-06e7b20c9ab0","subtype":"command","commandType":"auto","position":20.0,"command":"%md ...or determine how many distinct names there are.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a9cc210a-869e-429a-a97e-049f291acaef"},{"version":"CommandV1","origId":503877321548198,"guid":"9920ea40-ed86-4441-95ef-1a9d8abd522b","subtype":"command","commandType":"auto","position":21.0,"command":"firstNameDF.select(\"firstName\").distinct.count()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"70e0c294-cd70-4d6e-8893-8e762cf21b21"},{"version":"CommandV1","origId":503877321548199,"guid":"ec59375d-9900-4053-b32a-6253dd37d728","subtype":"command","commandType":"auto","position":22.0,"command":"%md Let's do something a little more complicated. Let's use the original data frame to find the five most popular names for girls born in 1980.\n\n**Things to Notes**\n\n1. Look closely, and you'll see a `desc` after the `orderBy()` call. `orderBy()` (which can also be invoked as `sort()`) sorts in ascending order. Adding the `desc` suffix causes the sort to be in _descending_ order.\n2. The Scala DataFrames API's comparison operator is `===` (_triple_ equals), not the usual `==` (_double_ equals). If you get it wrong, you'll get a Scala compiler error.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a9835f3e-5cb7-453d-97c4-4a486460301d"},{"version":"CommandV1","origId":503877321548200,"guid":"b1e23c17-bf61-42fb-aceb-06f3bd0fdbfc","subtype":"command","commandType":"auto","position":23.0,"command":"display(df.filter(df(\"year\") === 1980).\n           filter(df(\"gender\") === \"F\").\n           orderBy(df(\"total\").desc, df(\"firstName\")).\n           select(\"firstName\").\n           limit(5))","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f70bb619-e93c-487a-a381-05b31b389a59"},{"version":"CommandV1","origId":503877321548201,"guid":"00092bfe-ffa6-45a1-8356-32e9e28558dd","subtype":"command","commandType":"auto","position":24.0,"command":"%md You can also use the `$` interpolator syntax to produce column references:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"38764c68-51c5-45fe-9461-289d957d281b"},{"version":"CommandV1","origId":503877321548202,"guid":"4c34045e-9871-43bf-a59e-49cb48b42178","subtype":"command","commandType":"auto","position":25.0,"command":"display(df.filter($\"year\" === 1980).\n           filter($\"gender\" === \"F\").\n           orderBy($\"total\".desc, $\"firstName\").\n           select(\"firstName\").\n           limit(5))","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4acec7eb-140e-465b-ad57-a060890848dd"},{"version":"CommandV1","origId":503877321548203,"guid":"9e80ad34-4ee6-4a74-9853-b6a2b40ed37d","subtype":"command","commandType":"auto","position":26.0,"command":"%md Note that we can do the same thing using the lower-level RDD operations. However, use the DataFrame operations, when possible. In general, they're more convenient. More important, though, they allow Spark to build a query plan that can be optimized through [Catalyst](https://databricks.com/blog/2015/04/13/deep-dive-into-spark-sqls-catalyst-optimizer.html).","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ad4fa3c9-d17b-4051-8c31-6ec2467faa86"},{"version":"CommandV1","origId":503877321548204,"guid":"9a78aff3-6f46-4eac-9a03-4c433d4998d7","subtype":"command","commandType":"auto","position":27.0,"command":"%md ## Joins","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"962f8849-8652-4740-a425-db77e089b3cd"},{"version":"CommandV1","origId":503877321548205,"guid":"6b3a8426-1504-4bd2-83b6-3ced9d5adb1e","subtype":"command","commandType":"auto","position":28.0,"command":"%md Let's use two views of our data to answer this question: How popular were the top 10 female names of 2010 back in 1930?\n\nBefore we can do that, though, we need to define a utility function. The DataFrame SCala API doesn't support the SQL `LOWER` function. To ensure that our data matches up properly, it'd be nice to force the names to lower case before doing the match. Fortunately, it's easy to define our own `LOWER` function:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1aa796af-40ec-4976-b9e1-37b0cc6270b6"},{"version":"CommandV1","origId":503877321548206,"guid":"1e4107ac-bf7c-4fc6-a374-f784c4d7d4ab","subtype":"command","commandType":"auto","position":29.0,"command":"val lower = sqlContext.udf.register(\"lower\", (s: String) => s.toLowerCase)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0d61259d-bf9d-4956-8828-35a256cf8529"},{"version":"CommandV1","origId":503877321548207,"guid":"f2c75d2a-106a-422f-8b71-9f8d19d8e1a1","subtype":"command","commandType":"auto","position":30.0,"command":"%md Okay, now we can go to work.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"754ca436-0de4-452e-b80d-29e78984db26"},{"version":"CommandV1","origId":503877321548208,"guid":"f36414bf-bbbd-4cca-a4d4-fffe790d0b07","subtype":"command","commandType":"auto","position":31.0,"command":"// Create a new DataFrame from the SSNA DataFrame, so that:\n// - We have a lower case version of the name, for joining\n// - We've weeded out the year\n//\n// NOTE: The aliases are necessary; otherwise, the query analyzer\n// generates false equivalences between the columns.\nval ssn2010 = df.filter($\"year\" === 2010).\n                 select($\"total\".as(\"total2010\"), \n                        $\"gender\".as(\"gender2010\"), \n                        lower($\"firstName\").as(\"name2010\"))\n\n// Let's do the same for 1930.\nval ssn1930 = df.filter($\"year\" === 1930).\n                 select($\"total\".as(\"total1930\"), \n                        $\"gender\".as(\"gender1930\"), \n                        lower($\"firstName\").as(\"name1930\"))\n\n// Now, let's find out how popular the top 10 New York 2010 girls' names were in 1880.\nval joined = ssn2010.join(ssn1930, ($\"name2010\" === $\"name1930\") && ($\"gender2010\" === $\"gender1930\")).\n                     filter($\"gender2010\" === \"F\").\n                     orderBy($\"total2010\".desc).\n                     limit(10).\n                     select($\"name2010\".as(\"name\"), $\"total1930\", $\"total2010\")\n\ndisplay(joined)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"27eb3b66-b0d8-4bc6-9f29-882128ef2c41"},{"version":"CommandV1","origId":503877321548209,"guid":"45704b54-28ed-4a5a-9add-07ed2706ba67","subtype":"command","commandType":"auto","position":32.0,"command":"%md ## Assignment","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c6929d0d-0a3c-4df9-ba05-e2f8fb41ab3e"},{"version":"CommandV1","origId":503877321548210,"guid":"baf8c1e1-5de0-40d9-a058-6e4ffa187925","subtype":"command","commandType":"auto","position":33.0,"command":"%md In the cell below, you'll see an empty function, `topFemaleNamesForYear`. It takes three arguments:\n\n* A year\n* A number, _n_\n* A starting DataFrame (which will be `ssnNames`, from above)\n\nIt returns a new DataFrame that can be used to retrieve the top _n_ female names for that year (i.e., the _n_ names with the highest _total_ values). If there are multiple names with the same total, order those names alphabetically.\n\nWrite that function. To test it, run the cell _following_ the function—i.e., the one containing the `runTests()` function. (This might take a few minutes.)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5547d377-cb9f-42c1-aa78-a857bfcc2578"},{"version":"CommandV1","origId":503877321548211,"guid":"40642292-e90d-4926-9c06-4de22a198579","subtype":"command","commandType":"auto","position":34.0,"command":"def topFemaleNamesForYear(year: Int, n: Int, df: DataFrame): DataFrame = {\n  df.limit(n) // THIS IS NOT CORRECT. FIX IT.\n}","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"20463599-cd84-4ab0-812e-4235c3cca8e6"},{"version":"CommandV1","origId":503877321548212,"guid":"4f708a59-076c-4df8-ad0b-70542093df88","subtype":"command","commandType":"auto","position":35.0,"command":"def runTests(fcn: (Int, Int, DataFrame) => DataFrame): Unit = {\n  import com.databricks.training.test.Test\n\n  val test = Test()\n  def getNames(df: DataFrame) = {\n    df.collect().map { row => row(0).toString }\n  }\n\n  test.assertArrayEquals(getNames(fcn(1945, 5, df)), Array(\"Mary\", \"Linda\", \"Barbara\", \"Patricia\", \"Carol\"), \"Wrong list returned for 1945\")\n  test.assertArrayEquals(getNames(fcn(1970, 5, df)), Array(\"Jennifer\", \"Lisa\", \"Kimberly\", \"Michelle\", \"Amy\"), \"Wrong list returned for 1970\")\n  test.assertArrayEquals(getNames(fcn(1987, 5, df)), Array(\"Jessica\", \"Ashley\", \"Amanda\", \"Jennifer\", \"Sarah\"), \"Wrong list returned for 1987\")\n  \n  // Arrays are not objects in the JVM.\n  val list = getNames(fcn(1880, 5, df)).toList\n  test.assertEqualsHashed(list, \"dfb52c0fb408b89c9bb30b3d95f2aa33ba9888e5\", \"Bad result for 1880\")\n  \n  test.printStats()\n}\n\nrunTests(topFemaleNamesForYear)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"89205532-0688-4cd1-9a0e-6164a97eebcd"},{"version":"CommandV1","origId":503877321548213,"guid":"f16be662-5d23-4ca8-9a2f-f5bf03d7339f","subtype":"command","commandType":"auto","position":36.0,"command":"%md ## Solution\n\nIf you're stuck, and you're really not sure how to proceed, feel free to check out the solution. You'll find it in the same folder as the lab.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"57cb2419-2918-4bad-9299-d50df2c5d81f"},{"version":"CommandV1","origId":503877321548214,"guid":"26df58c5-1aac-488f-929d-d4472a0bbcd9","subtype":"command","commandType":"auto","position":37.0,"command":"","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8e5cab06-6d85-464f-bc24-8710045d78cb"}],"dashboards":[],"guid":"55cbbf10-daa1-431f-92f0-e7200577a753","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}