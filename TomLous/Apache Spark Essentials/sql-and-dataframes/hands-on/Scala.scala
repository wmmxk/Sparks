{"version":"NotebookV1","origId":503877321548304,"name":"Scala","language":"scala","commands":[{"version":"CommandV1","origId":503877321548306,"guid":"09186936-6c64-4701-81be-bc24967bfed6","subtype":"command","commandType":"auto","position":1.0,"command":"%md\n# SQL and DataFrames: Hands-on Exercises (Scala)\n\nThis notebook contains hands-on exercises used in conjunction with the DataFrames module. Each section corresponds to a section in the lecture. Your instructor will tell you when it's time to do each section of this notebook. You can refer to the <a href=\"http://spark.apache.org/docs/1.6.1/api/scala/index.html#org.apache.spark.sql.DataFrame\" target=\"_blank\">DataFrames API documentation</a>.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8d82aead-7a87-496c-8a90-e0a670192ac9"},{"version":"CommandV1","origId":503877321548307,"guid":"437c1daa-1fa0-4146-a861-74032d8a9df5","subtype":"command","commandType":"auto","position":2.0,"command":"%md\n## Schema Inference\n\nIn this exercise, let's explore schema inference. We're going to be using a file called `people.txt`. The data is structured, but it has no self-describing schema. And, it's not JSON, so Spark can't infer the schema automatically. Let's create an RDD and look at the first few rows of the file.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"dbf9a848-83f8-4ea8-b2be-88ef88f0210b"},{"version":"CommandV1","origId":503877321548308,"guid":"72119037-e1a1-41ef-b2b3-e77be422cc0c","subtype":"command","commandType":"auto","position":3.0,"command":"val rdd = sc.textFile(\"dbfs:/mnt/training/dataframes/people.txt\")\nrdd.take(10).foreach(println)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f3a6ec66-4587-4e2c-9145-68fc0130df95"},{"version":"CommandV1","origId":503877321548309,"guid":"b64fe682-9115-4fa0-95de-7367455427fa","subtype":"command","commandType":"auto","position":4.0,"command":"%md As you can see, each line consists of the same information about a person:\n\n* first name\n* middle name\n* last name\n* gender (\"M\" or \"F\")\n* birth date, in `yyyy-mm-dd` form\n* a salary\n* a United States Social Security Number\n\n(Before you get _too_ excited and run out to apply for a bunch of credit cards, the Social Security Numbers are all fake.)\n\nClearly, the file has a schema, but Spark can't figure out what it is.\n\nRead through the following code to see how we can apply a schema to the file. Then, run it, and see what happens.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f6a7044c-68b3-4848-a274-d729beb23ad0"},{"version":"CommandV1","origId":503877321548310,"guid":"73051b90-093d-422a-a3ec-efde290e924e","subtype":"command","commandType":"auto","position":5.0,"command":"import sqlContext.implicits._\nimport java.util.Date\nimport java.text.SimpleDateFormat\nimport java.sql.Timestamp\n\nval dateFmt = new SimpleDateFormat(\"yyyy-MM-dd\")\n\ncase class Person(firstName:  String,\n                  middleName: String,\n                  lastName:   String,\n\t\t          gender:     String,\n                  birthDate:  Timestamp,\n                  salary:     Int,\n                  ssn:        String)\n\nval peopleRDD = rdd.map { line =>\n  val cols = line.split(\":\")\n  Person(firstName  = cols(0),\n         middleName = cols(1), \n         lastName   = cols(2), \n         gender     = cols(3),\n         birthDate  = new Timestamp(dateFmt.parse(cols(4)).getTime),\n         salary     = cols(5).toInt,\n         ssn        = cols(6))\n}\n\nval df = peopleRDD.toDF","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ce032fb6-4479-4b83-b91a-881ce139cabd"},{"version":"CommandV1","origId":503877321548311,"guid":"a3af1a20-e029-4f98-85bf-ff11d57d8a96","subtype":"command","commandType":"auto","position":6.0,"command":"%md\n**Question:** What could go wrong in the above code? How would you fix the problems?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c538ac71-9fd7-4768-8c1d-0ff2ae3a62c6"},{"version":"CommandV1","origId":503877321548312,"guid":"a5613b5e-ea04-4777-be6e-edc9556de00c","subtype":"command","commandType":"auto","position":7.0,"command":"%md Now, let's sample some of the data.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ca49d69e-bed8-4c88-aba6-eb3f216c30d7"},{"version":"CommandV1","origId":503877321548313,"guid":"482523aa-2599-401d-bff7-d92b9abd106a","subtype":"command","commandType":"auto","position":8.0,"command":"val sampledDF = df.sample(withReplacement = false, fraction = 0.02, seed = 1887348908234L)\ndisplay(sampledDF)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"9ff1f53d-5728-4c96-949c-542f53aa8c2f"},{"version":"CommandV1","origId":503877321548314,"guid":"89d92253-35a3-4ea5-84b0-b8f5a73cc572","subtype":"command","commandType":"auto","position":9.0,"command":"%md Finally, let's run a couple SQL commands.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8fcd8e49-2fe3-4119-b63a-d19cab597055"},{"version":"CommandV1","origId":503877321548315,"guid":"4e53b911-a770-4922-870d-58c91eead239","subtype":"command","commandType":"auto","position":10.0,"command":"df.registerTempTable(\"people\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"9d420ed9-b39e-4ffe-9d3d-813a0a913c72"},{"version":"CommandV1","origId":503877321548316,"guid":"eda0a3da-0707-4b89-91cb-98f02d496b80","subtype":"command","commandType":"auto","position":11.0,"command":"%sql SELECT * FROM people WHERE birthDate >= '1970-01-01' AND birthDate <= '1979-12-31' ORDER BY birthDate, salary","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8c174aa2-b2ef-45c5-a5f2-ebcbeeeccb31"},{"version":"CommandV1","origId":503877321548317,"guid":"0eecb886-4df1-4aed-a0b1-206a43cccc96","subtype":"command","commandType":"auto","position":12.0,"command":"%sql SELECT concat(firstName, \" \", lastName) AS name, gender, year(birthDate) AS birthYear, salary FROM people WHERE salary < 50000","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"9767f629-7f11-4e20-ac86-3589d6d7d45e"},{"version":"CommandV1","origId":503877321548318,"guid":"29c95dbc-c30d-436a-a0b1-6b9467875861","subtype":"command","commandType":"auto","position":13.0,"command":"%md\n## select and filter (and a couple more)\n\nWe've now seen `printSchema()`, `show()`, `select()` and `filter()`. Let's take them for a test drive.\n\nFirst, let's look at the schema.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"25c2c5c4-dae6-4f30-aa4a-a596e67d6375"},{"version":"CommandV1","origId":503877321548319,"guid":"62c0ef54-7d5d-4674-9740-686a5ea05f9b","subtype":"command","commandType":"auto","position":14.0,"command":"df.printSchema()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"fbd3c981-25e5-4f66-9dde-49ece326e7d9"},{"version":"CommandV1","origId":503877321548320,"guid":"73366a85-b0ab-4afd-b2b2-86445fd27154","subtype":"command","commandType":"auto","position":15.0,"command":"%md Now, let's look at `show()`.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"56a415c8-c6c4-4f04-bcbf-eff85a9622d0"},{"version":"CommandV1","origId":503877321548321,"guid":"183b7b72-43a9-4a4e-8619-ab6d88823cda","subtype":"command","commandType":"auto","position":16.0,"command":"df.show() // show the first 20 rows of the DataFrame","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ef309176-e96f-4fe2-adf2-a3a19869629d"},{"version":"CommandV1","origId":503877321548322,"guid":"fc29eb60-8aa9-4b5a-807c-90a0469e9dca","subtype":"command","commandType":"auto","position":17.0,"command":"%md `show()` is a good way to get a quick feel for your data. Of course, in a Databricks notebook, the `display()` helper is better. However, if you're using `spark-shell`, the `display()` helper isn't available.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4f095bb2-1ff4-4a2f-abb2-905830f37261"},{"version":"CommandV1","origId":503877321548323,"guid":"ff72c2a9-a6df-4f31-af02-d9f7158deb9a","subtype":"command","commandType":"auto","position":18.0,"command":"display(df)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"dd918758-df86-4e50-8b58-696dd90b23e6"},{"version":"CommandV1","origId":503877321548324,"guid":"51fa7fb0-ad4f-4b59-a512-d0c50084b811","subtype":"command","commandType":"auto","position":19.0,"command":"%md\nLet's look at `select()`. Run the following cell. What does it return?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b9ea06e2-006a-40bf-8bbb-7799f64ff847"},{"version":"CommandV1","origId":503877321548325,"guid":"90746b9c-5662-4813-83e2-d05a716307a3","subtype":"command","commandType":"auto","position":20.0,"command":"df.select($\"firstName\", $\"lastName\", $\"gender\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"cc38350f-5d33-462d-ae7d-dfc95ae9e79d"},{"version":"CommandV1","origId":503877321548326,"guid":"d41a78d0-4ff4-408f-9e30-417541f8aa61","subtype":"command","commandType":"auto","position":21.0,"command":"%md\n**Remember**: Transformations are _lazy_. The `select()` method is a transformation.\n\nAll right. Let's look at result of a `select()` call.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6dc07cd0-1060-40d9-a2ac-454bea16da7e"},{"version":"CommandV1","origId":503877321548327,"guid":"0f9c722d-5f45-4bbd-b0c6-60d68e0ac7e6","subtype":"command","commandType":"auto","position":22.0,"command":"df.select($\"firstName\", $\"lastName\", $\"gender\").show(10)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"105522af-5ceb-41c1-a03f-f8baf9cd36a7"},{"version":"CommandV1","origId":503877321548328,"guid":"2b496b19-adc1-4024-bd2e-edf73c2bf2ee","subtype":"command","commandType":"auto","position":23.0,"command":"%md\nFinally, let's take a look at `filter()`, which can be used to filter data _out_ of a data set.\n\n**Question**: What the does the following code actually do?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"093e119b-024f-435d-902c-01c2092214af"},{"version":"CommandV1","origId":503877321548329,"guid":"0577e57a-90a5-48df-973f-d86bae319781","subtype":"command","commandType":"auto","position":24.0,"command":"df.filter($\"gender\" === \"M\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ebb08bb6-869f-413c-b7b8-cffbe175bbf6"},{"version":"CommandV1","origId":503877321548330,"guid":"e5e8c782-ebe5-413f-bd3c-aaa032d6bf70","subtype":"command","commandType":"auto","position":25.0,"command":"%md Note the use of a triple-equals (`===`) there. In Scala, that's required. You'll get a compiler error if you use `==`. (Try it.) If you like to switch between Python and Scala, be aware that you use double-equals (`==`) in Python and triple-equals in Scala.\n\n`filter()`, like `select()`, is a transformation: It's _lazy_.\n\nLet's try something a little more complicated. Let's combine two `filter()` operations with a `select()`, displaying the results.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ba215abb-8b0a-4e39-b920-ccde0d04b30a"},{"version":"CommandV1","origId":503877321548331,"guid":"c7000092-9172-4490-a583-6d20fecdb0b1","subtype":"command","commandType":"auto","position":26.0,"command":"val df2 = df.filter($\"gender\" === \"M\").filter($\"salary\" > 100000).select($\"firstName\", $\"lastName\", $\"salary\")\ndisplay(df2)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f8984a9a-9235-4a5e-8e24-45245cea0e26"},{"version":"CommandV1","origId":503877321548332,"guid":"52e1ac3d-d282-44d9-b0c6-69937ecf0180","subtype":"command","commandType":"auto","position":27.0,"command":"%md \n## orderBy, groupBy and alias","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ae8c3de1-cc82-4b53-8ded-6d1686c45597"},{"version":"CommandV1","origId":503877321548333,"guid":"60a2ccb4-0825-48f7-a965-c405cd0b3433","subtype":"command","commandType":"auto","position":28.0,"command":"%md Up in the first section of this notebook, we ran this SQL statement:\n\n```\nSELECT * FROM people WHERE birthDate >= '1970-01-01' AND birthDate <= '1979-12-31' ORDER BY birthDate, salary\n```\n\nLet's try that same query with the programmatic DataFrames API.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b1f187f8-f703-4f7a-860d-93249fdc3fad"},{"version":"CommandV1","origId":503877321548334,"guid":"4f0954d5-5a1b-4c42-ae0d-95440d2be913","subtype":"command","commandType":"auto","position":29.0,"command":"display( df.filter($\"birthDate\" >= \"1970-01-01\" && $\"birthDate\" <= \"1979-12-31\").orderBy(df(\"birthDate\"), df(\"salary\")) )","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3ec8a16f-5fac-4b1e-ad8f-241d4a350048"},{"version":"CommandV1","origId":503877321548335,"guid":"b93ee10f-6580-48e7-ac3d-dd85463af48e","subtype":"command","commandType":"auto","position":30.0,"command":"%md There are several things to note.\n\n1. This time, we _combined_ two filter expressions into one `filter()` call, instead of chaining two `filter()` calls.\n2. We did not have to convert the date literals (\"1970-01-01\" and \"1979-12-31\") into `java.sql.Timestamp` objects before using them in the comparisons.\n3. We used two different ways to specify the columns: `$(\"firstName\")` and `df(\"firstName\")`.\n\nLet's try a `groupBy()` next.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"526bb17f-0648-4193-aacf-9bf9fbbca5cf"},{"version":"CommandV1","origId":503877321548336,"guid":"f5f97537-eab2-455e-b445-761e469277e8","subtype":"command","commandType":"auto","position":31.0,"command":"display( df.groupBy($\"salary\") )","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6b25becb-6ada-4d31-b342-be083aa20323"},{"version":"CommandV1","origId":503877321548337,"guid":"d17be144-b278-4851-8115-8f71bab8986d","subtype":"command","commandType":"auto","position":32.0,"command":"%md Okay, that didn't work. Note that `groupBy()` returns something of type `GroupedData`, instead of a `DataFrame`. There are other methods on `GroupedData` that will convert back to a DataFrame. A useful one is `count()`.\n\n**WARNING**: Don't confuse `GroupedData.count()` with `DataFrame.count()`. `GroupedData.count()` is _not_ an action. `DataFrame.count()` _is_ an action.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8c87fc00-fdf3-4ac8-b16c-64108edceaae"},{"version":"CommandV1","origId":503877321548338,"guid":"0f33bda0-be50-485a-a803-c37859202945","subtype":"command","commandType":"auto","position":33.0,"command":"val x = df.groupBy($\"salary\").count()  // What is x?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1c70a2bf-4c11-487e-ad74-1163223f9e75"},{"version":"CommandV1","origId":503877321548339,"guid":"051545ee-4c3b-4bef-aecb-6d405dd5383f","subtype":"command","commandType":"auto","position":34.0,"command":"display(x)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"14635f62-56d4-4b87-8383-8fba2fc0748c"},{"version":"CommandV1","origId":503877321548340,"guid":"e4aac947-5bb3-41e9-b511-d46229b25bc1","subtype":"command","commandType":"auto","position":35.0,"command":"%md Let's add a filter and, while we're at it, rename the `count` column.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e56deda0-457e-45da-b9ae-a701548e5f76"},{"version":"CommandV1","origId":503877321548341,"guid":"290e64f5-b4e4-4a5a-bbc3-1f4f4459f484","subtype":"command","commandType":"auto","position":36.0,"command":"display( df.groupBy($\"salary\").count().filter($\"count\" > 1).select($\"salary\", $\"count\".as(\"total\")) )","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f55a2b89-9b18-4ffd-9da0-023261ce4e57"},{"version":"CommandV1","origId":503877321548342,"guid":"e036f7c5-6675-4516-9ca9-bd2dc0db686c","subtype":"command","commandType":"auto","position":37.0,"command":"","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"52b3c267-ca60-4c40-8f3e-379f3af497e7"}],"dashboards":[],"guid":"c7172d4d-876e-446e-97ae-89eebb45bc9a","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}