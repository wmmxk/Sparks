{"version":"NotebookV1","origId":503877321548263,"name":"Python","language":"python","commands":[{"version":"CommandV1","origId":503877321548265,"guid":"8f3a220b-46e4-4f88-b840-fdc7ce0a4380","subtype":"command","commandType":"auto","position":1.0,"command":"%md\n# SQL and DataFrames: Hands-on Exercises (Python)\n\nThis notebook contains hands-on exercises used in conjunction with the DataFrames module. Each section corresponds to a section in the lecture. Your instructor will tell you when it's time to do each section of this notebook. You can look at the <a href=\"http://spark.apache.org/docs/1.6.1/api/python/pyspark.sql.html#pyspark.sql.DataFrame\" target=\"_blank\">DataFrames API documentation</a> as well.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5da4160d-1e3f-409a-9be1-222a456c1d2b"},{"version":"CommandV1","origId":503877321548266,"guid":"5d324364-86c2-42b3-b58b-d5a5d9e7412d","subtype":"command","commandType":"auto","position":2.0,"command":"%md\n## Schema Inference\n\nIn this exercise, let's explore schema inference. We're going to be using a file called `people.txt`. The data is structured, but it has no self-describing schema. And, it's not JSON, so Spark can't infer the schema automatically. Let's create an RDD and look at the first few rows of the file.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f4dda1fc-d266-4449-bddf-b3b5baf863e2"},{"version":"CommandV1","origId":503877321548267,"guid":"2de9f421-8145-49c7-9da3-8ba8c22e7c30","subtype":"command","commandType":"auto","position":3.0,"command":"rdd = sc.textFile(\"dbfs:/mnt/training/dataframes/people.txt\")\nfor line in rdd.take(10):\n  print line","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ecac6d2b-d0e9-4290-b71f-0b9f60c05d24"},{"version":"CommandV1","origId":503877321548268,"guid":"954ef127-32ed-48c8-9a26-e92923cd27bb","subtype":"command","commandType":"auto","position":4.0,"command":"%md As you can see, each line consists of the same information about a person:\n\n* first name\n* middle name\n* last name\n* gender (\"M\" or \"F\")\n* birth date, in `yyyy-mm-dd` form\n* a salary\n* a United States Social Security Number\n\n(Before you get _too_ excited and run out to apply for a bunch of credit cards, the Social Security Numbers are all fake.)\n\nClearly, the file has a schema, but Spark can't figure out what it is.\n\nRead through the following code to see how we can apply a schema to the file. Then, run it, and see what happens.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a2ef4a57-5c09-44b6-af5f-7ef56627a110"},{"version":"CommandV1","origId":503877321548269,"guid":"784b5d4c-f8e6-408d-b912-d57848c33b43","subtype":"command","commandType":"auto","position":5.0,"command":"from datetime import datetime\nfrom collections import namedtuple\n\nPerson = namedtuple('Person', ['first_name', 'middle_name', 'last_name', 'gender', 'birth_date', 'salary', 'ssn'])\n\ndef map_to_person(line):\n  cols = line.split(\":\")\n  return Person(first_name  = cols[0],\n                middle_name = cols[1],\n                last_name   = cols[2],\n                gender      = cols[3],\n                birth_date  = datetime.strptime(cols[4], \"%Y-%m-%d\"),\n                salary      = int(cols[5]),\n                ssn         = cols[6])\n    \npeople_rdd = rdd.map(map_to_person)\ndf = people_rdd.toDF()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"961664ae-7786-46ad-8b89-ed23ac8cd737"},{"version":"CommandV1","origId":503877321548270,"guid":"b931a199-97b7-4479-ab85-bfba2f5cdc7d","subtype":"command","commandType":"auto","position":6.0,"command":"%md\n**Question:** What could go wrong in the above code? How would you fix the problems?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2839428b-6719-4543-8a73-ddbbe8ea946f"},{"version":"CommandV1","origId":503877321548271,"guid":"557edb36-d06b-4025-a600-ec93aa16b319","subtype":"command","commandType":"auto","position":7.0,"command":"%md Now, let's sample some of the data.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ab33cbaa-0974-48f1-bb7a-140d83358873"},{"version":"CommandV1","origId":503877321548272,"guid":"002c4b7c-bb99-4a5a-8582-6f4158a0ebe9","subtype":"command","commandType":"auto","position":8.0,"command":"sampledDF = df.sample(withReplacement = False, fraction = 0.02, seed = 1887348908234L)\ndisplay(sampledDF)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0e50036f-4b7c-4b2d-8462-8b5b2f0cba36"},{"version":"CommandV1","origId":503877321548273,"guid":"dbacf477-8936-4272-b1c1-d0e4c54a1896","subtype":"command","commandType":"auto","position":9.0,"command":"%md Finally, let's run a couple SQL commands.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"94992b1c-4cbc-4bc5-bbf9-75cfeb0d12cc"},{"version":"CommandV1","origId":503877321548274,"guid":"be9b0710-0d4f-4c8f-aaa4-1a130ed60100","subtype":"command","commandType":"auto","position":10.0,"command":"df.registerTempTable(\"people\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"62aed06c-f495-44c4-9ab2-7a34f9c8b601"},{"version":"CommandV1","origId":503877321548275,"guid":"d2edc425-b536-490c-942f-6f4722e83436","subtype":"command","commandType":"auto","position":11.0,"command":"%sql SELECT * FROM people WHERE birth_date >= '1970-01-01' AND birth_date <= '1979-12-31' ORDER BY birth_date, salary","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d56bb972-ee71-4561-8f0f-439e2071d286"},{"version":"CommandV1","origId":503877321548276,"guid":"4890d71e-f12e-49fd-bb05-c4561e0bf368","subtype":"command","commandType":"auto","position":12.0,"command":"%sql SELECT concat(first_name, \" \", last_name) AS name, gender, year(birth_date) AS birth_year, salary FROM people WHERE salary < 50000","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"00f16a65-d905-4615-b0b8-7d21fdd33bea"},{"version":"CommandV1","origId":503877321548277,"guid":"cba0021c-3166-4530-a27f-de558ddd3b4b","subtype":"command","commandType":"auto","position":13.0,"command":"%md\n### ![](http://i.imgur.com/RdABwEB.png) STOP HERE.\n\nLet's switch back to the slides.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1692e88a-dd9c-4091-b01f-076862e0f359"},{"version":"CommandV1","origId":503877321548278,"guid":"4919f557-6d02-45d7-8700-50a2f52b7375","subtype":"command","commandType":"auto","position":14.0,"command":"%md\n## select and filter (and a couple more)\n\nWe've now seen `printSchema()`, `show()`, `select()` and `filter()`. Let's take them for a test drive.\n\nFirst, let's look at the schema.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"890b6871-271c-483b-8e66-5558d3969daf"},{"version":"CommandV1","origId":503877321548279,"guid":"6b41697a-1303-4be8-ac16-186e4c532d44","subtype":"command","commandType":"auto","position":15.0,"command":"df.printSchema()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6034e6aa-ae26-4f00-a9d2-4b04cf4b273b"},{"version":"CommandV1","origId":503877321548280,"guid":"9e9e6062-27ec-4593-be0f-5bb8e203d068","subtype":"command","commandType":"auto","position":16.0,"command":"%md Now, let's look at `show()`.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"461cca40-3ab6-4d0e-840c-9dd6d4324632"},{"version":"CommandV1","origId":503877321548281,"guid":"458379be-d5ca-4bb0-bd2c-42e316bb1be0","subtype":"command","commandType":"auto","position":17.0,"command":"df.show() # show the first 20 rows of the DataFrame","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ee0d0b83-1bdb-4258-b6c4-7f926748566d"},{"version":"CommandV1","origId":503877321548282,"guid":"86ddf337-90fc-4c30-b3b6-19a2212085f1","subtype":"command","commandType":"auto","position":18.0,"command":"%md `show()` is a good way to get a quick feel for your data. Of course, in a Databricks notebook, the `display()` helper is better. However, if you're using `spark-shell`, the `display()` helper isn't available.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6a793b89-479a-4bd9-b2f8-1064b0bdf497"},{"version":"CommandV1","origId":503877321548283,"guid":"98e9bb8e-ab5b-4690-9b4d-54efa4ad9141","subtype":"command","commandType":"auto","position":19.0,"command":"display(df)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"749569d1-a54c-4192-ab17-26cb7d1a0982"},{"version":"CommandV1","origId":503877321548284,"guid":"b948662c-b8e6-401b-81b7-2f1c1bd79747","subtype":"command","commandType":"auto","position":20.0,"command":"%md\nLet's look at `select()`. Run the following cell. What does it return?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f37243af-7908-421c-b0dc-04692fa51126"},{"version":"CommandV1","origId":503877321548285,"guid":"aca56591-7d3c-4da5-8c5a-9f0ea127fd6e","subtype":"command","commandType":"auto","position":21.0,"command":"df.select(df[\"first_name\"], df[\"last_name\"], df[\"gender\"])","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"edfc08f3-36e2-46ac-ac51-16e4eb2985aa"},{"version":"CommandV1","origId":503877321548286,"guid":"284e2802-2f5d-4cff-b5ae-6de76e7cf6b2","subtype":"command","commandType":"auto","position":22.0,"command":"%md\n**Remember**: Transformations are _lazy_. The `select()` method is a transformation.\n\nAll right. Let's look at result of a `select()` call.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c8e20564-9525-4793-b9cd-8fbc2c74301c"},{"version":"CommandV1","origId":503877321548287,"guid":"a60a8340-a35e-4fb6-94a6-7ed7905b2549","subtype":"command","commandType":"auto","position":23.0,"command":"df.select(df[\"first_name\"], df[\"last_name\"], df[\"gender\"]).show(10)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"61039d11-cd91-4d07-af3b-863d0f6f7530"},{"version":"CommandV1","origId":503877321548288,"guid":"82e1c64e-91b2-47bc-9206-d1745f581651","subtype":"command","commandType":"auto","position":24.0,"command":"%md\nFinally, let's take a look at `filter()`, which can be used to filter data _out_ of a data set.\n\n**Question**: What the does the following code actually do?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"390b8ef0-0e4e-4296-837c-d160b4846cea"},{"version":"CommandV1","origId":503877321548289,"guid":"daae446c-8d33-48e0-9e9a-d36b4b744032","subtype":"command","commandType":"auto","position":25.0,"command":"df.filter(df[\"gender\"] == \"M\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2e482a15-a634-494e-87ac-6579bab5eb73"},{"version":"CommandV1","origId":503877321548290,"guid":"541cfe70-27ea-400e-9cea-d0e82c05596d","subtype":"command","commandType":"auto","position":26.0,"command":"%md If you're familiar with the DataFrames Scala API, you'll notice that we use double-equals (`==`) in that comparison, not the triple-equals (`===`) we use in Scala. If you switch between languages, keep that in mind.\n\n`filter()`, like `select()`, is a transformation: It's _lazy_.\n\nLet's try something a little more complicated. Let's combine two `filter()` operations with a `select()`, displaying the results.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4048a0f6-77a0-4597-b0b2-6d8441239a1b"},{"version":"CommandV1","origId":503877321548291,"guid":"54797c72-c206-4656-9cd1-f34d7421c7dc","subtype":"command","commandType":"auto","position":27.0,"command":"df2 = df.filter(df[\"gender\"] == \"M\").filter(df[\"salary\"] > 100000).select(df[\"first_name\"], df[\"last_name\"], df[\"salary\"])\ndisplay(df2)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"84c1b65d-ccc0-4679-a62c-486ccb3d4480"},{"version":"CommandV1","origId":503877321548292,"guid":"fbfa11ef-1365-42d7-87b0-76cf42fbeecf","subtype":"command","commandType":"auto","position":28.0,"command":"%md\n### ![](http://i.imgur.com/RdABwEB.png) STOP HERE.\n\nLet's switch back to the slides.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b21ec5ae-e6e4-48bd-840a-db3b59798de0"},{"version":"CommandV1","origId":503877321548293,"guid":"108ef263-4dfd-4555-b11f-ef87d7233ad8","subtype":"command","commandType":"auto","position":29.0,"command":"%md \n## orderBy, groupBy and alias","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"985e742f-8239-439f-8dcd-35da9b4550e2"},{"version":"CommandV1","origId":503877321548294,"guid":"770848b5-28ae-4b79-88a9-e8f7d0450372","subtype":"command","commandType":"auto","position":30.0,"command":"%md Up in the first section of this notebook, we ran this SQL statement:\n\n```\nSELECT * FROM people WHERE birthDate >= '1970-01-01' AND birthDate <= '1979-12-31' ORDER BY birthDate, salary\n```\n\nLet's try that same query with the programmatic DataFrames API.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8c00a841-780f-435d-b9af-95cfed819efe"},{"version":"CommandV1","origId":503877321548295,"guid":"1f847e12-f330-4a86-ab0e-82e6328d0391","subtype":"command","commandType":"auto","position":31.0,"command":"display(\n  df.filter(df[\"birth_date\"] >= \"1970-01-01\").filter(df[\"birth_date\"] <= \"1979-12-31\").orderBy(df.birth_date, df.salary)\n)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d082f3a7-f87f-4131-9ddd-5989b22465b6"},{"version":"CommandV1","origId":503877321548296,"guid":"4d2602c7-1fbe-4596-8412-b726ccf54d94","subtype":"command","commandType":"auto","position":32.0,"command":"%md There are several things to note.\n\n1. We did not have to convert the date literals (\"1970-01-01\" and \"1979-12-31\") into `datetime` objects before using them in the comparisons.\n2. We used two different ways to specify the columns: `df[\"firstName\"]` and `df.first_name`.\n\nLet's try a `groupBy()` next.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"40ff5ecc-329c-4e0e-8059-7406697c6968"},{"version":"CommandV1","origId":503877321548297,"guid":"83a3b9fd-ebf1-4a6c-ad2c-1841220a57e5","subtype":"command","commandType":"auto","position":33.0,"command":"display( df.groupBy(df[\"salary\"]) )","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"eeb2fcb1-29ad-4856-ba3a-64b3c8cfb16f"},{"version":"CommandV1","origId":503877321548298,"guid":"2f3af503-2291-412e-a747-6bdef5e1bca6","subtype":"command","commandType":"auto","position":34.0,"command":"%md Okay, that didn't work. Note that `groupBy()` returns something of type `GroupedData`, instead of a `DataFrame`. There are other methods on `GroupedData` that will convert back to a DataFrame. A useful one is `count()`.\n\n**WARNING**: Don't confuse `GroupedData.count()` with `DataFrame.count()`. `GroupedData.count()` is _not_ an action. `DataFrame.count()` _is_ an action.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3b3e6daf-0405-4e74-b356-4e31a769ea30"},{"version":"CommandV1","origId":503877321548299,"guid":"4eaddb7f-caf6-4d12-a959-a9ff457973c9","subtype":"command","commandType":"auto","position":35.0,"command":"x = df.groupBy(df[\"salary\"]).count()  # What is x?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5ccfac0f-4efc-458b-a93d-580153ff3cdf"},{"version":"CommandV1","origId":503877321548300,"guid":"659f5f23-d72d-46f5-9218-6f86c67ee8b1","subtype":"command","commandType":"auto","position":36.0,"command":"display(x)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"06410d7d-9feb-4e92-b9ea-82a193f6c185"},{"version":"CommandV1","origId":503877321548301,"guid":"8f934084-302a-4752-ac0c-d82ed2e6178b","subtype":"command","commandType":"auto","position":37.0,"command":"%md Let's add a filter and, while we're at it, rename the `count` column.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f0e37a84-18fc-4587-8f0f-98b5bb799f81"},{"version":"CommandV1","origId":503877321548302,"guid":"139c3d23-1fa1-4299-a8cc-c507a9c2aa34","subtype":"command","commandType":"auto","position":38.0,"command":"display( x.filter(x['count'] > 1).select(\"salary\", x[\"count\"].alias(\"total\")) )","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d306c2cd-6de0-48f6-bf09-63d4b05ecf3a"},{"version":"CommandV1","origId":503877321548303,"guid":"c5379ffe-e998-404b-aeac-feed8bbcca78","subtype":"command","commandType":"auto","position":39.0,"command":"","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"974c617c-75eb-4f42-8186-82c7ae671071"}],"dashboards":[],"guid":"9db0e9f5-4117-489a-b0ae-75106c0a8659","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}