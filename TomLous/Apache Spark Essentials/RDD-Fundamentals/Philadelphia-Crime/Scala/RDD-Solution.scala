{"version":"NotebookV1","origId":503877321548541,"name":"RDD-Solution","language":"scala","commands":[{"version":"CommandV1","origId":503877321548543,"guid":"47fe7875-037f-42b5-846a-e4bfd3df3e26","subtype":"command","commandType":"auto","position":1.0,"command":"%md # Solutions for RDD Lab (Scala)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d1923061-b0d3-44d8-93b9-3768ef5c35c4"},{"version":"CommandV1","origId":503877321548544,"guid":"1f2b2154-78a4-4f64-9267-9715b93d0ccf","subtype":"command","commandType":"auto","position":2.0,"command":"%md\n## Question 1\n\n**Does the RDD _actually_ contain the data right now?**\n\nNo. RDDs are _lazy_.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a8adcb07-b6ef-43ac-9298-08fbd770a7af"},{"version":"CommandV1","origId":503877321548545,"guid":"5b24c904-8b88-4370-955e-0f3c414122ef","subtype":"command","commandType":"auto","position":3.0,"command":"%md \n## Question 2\n\n**Why can't you just do `baseRDD.drop(1)`?**\n\n1. There _is_ no such methods on RDDs, unlike Scala collections.\n2. Even if there were, RDDs are _partitioned_, and a `drop()` call would run on every node, dropping the first element of each partition. On one partition, that element would be the header, but not on the other partitions.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"83f5d816-f90f-477d-ac46-bcf78f4b48b6"},{"version":"CommandV1","origId":503877321548546,"guid":"21d55147-84f5-4f8a-a25d-6743a85406cc","subtype":"command","commandType":"auto","position":4.0,"command":"%md ## Exercise 1","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"10f518e6-dd6d-4337-b38c-3295c3327a05"},{"version":"CommandV1","origId":503877321548547,"guid":"023bd24f-6a6d-421c-a39f-d85a027e7a49","subtype":"command","commandType":"auto","position":5.0,"command":"// TAKE NOTE: We are deliberately only some of the fields we need for\n// this lab. There's no sense dragging around more data than we need.\ncase class CrimeData(dateString: String,\n                     timeString: String,\n                     offense: String,\n                     latitude: String,\n                     longitude: String)\n                     \nval dataRDD = noHeaderRDD.map { line =>\n  val cols = line.split(\",\")\n  CrimeData(dateString = cols(10), // DISPATCH_DATE\n            timeString = cols(11), // DISPATCH_TIME\n            offense    = cols(6),  // TEXT_GENERAL_CODE\n            latitude   = cols(7),  // POINT_X\n            longitude  = cols(8))  // POINT_Y\n}\ndataRDD.take(10).foreach(println)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"718de2bd-8ca2-445f-b7e7-c197bb40cedf"},{"version":"CommandV1","origId":503877321548548,"guid":"e9f41a3f-b2ae-46be-8dbb-ec902e693035","subtype":"command","commandType":"auto","position":6.0,"command":"%md ## Exercise 2","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e5c143e0-2f85-448a-bd05-3ee9307c7675"},{"version":"CommandV1","origId":503877321548549,"guid":"3cc1f8bf-c569-42a1-9dbe-31cd9c2469f9","subtype":"command","commandType":"auto","position":7.0,"command":"val groupedByOffenseRDD = dataRDD.groupBy { data => data.offense }\n\n// What does this return? You'll need to know for the next step.\ngroupedByOffenseRDD.take(1).foreach(println)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8df477c9-6dec-4360-8f62-e63391bb63f8"},{"version":"CommandV1","origId":503877321548550,"guid":"562c6e81-ba13-47a8-a37b-dc6c3675f9e3","subtype":"command","commandType":"auto","position":8.0,"command":"%md ## Exercise 3","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8485f6da-c344-4ba6-b988-1b8bb9c6247d"},{"version":"CommandV1","origId":503877321548551,"guid":"df76bea4-9a04-487b-9e47-5e97122aedef","subtype":"command","commandType":"auto","position":9.0,"command":"// Here's one way to do it:\n\nval offenseCounts = groupedByOffenseRDD2.map { case (offense, items) => (offense, items.size) }.collect()\nfor ((offense, count) <- offenseCounts) {\n  println(s\"$offense: $count\")\n}","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4aa49f10-d7ed-4fc9-90f6-f012cc40af84"},{"version":"CommandV1","origId":503877321548552,"guid":"02515da9-dd91-4f66-9fd7-ba1e00bba4dc","subtype":"command","commandType":"auto","position":10.0,"command":"// But here's a better way. Note the use of Scala's \"f\" string interpolator,\n// which is kind of like printf, but with compile-time type safety. For\n// more information on the \"f\" interpolator, see\n// http://docs.scala-lang.org/overviews/core/string-interpolation.html\n\nval offenseCounts = dataRDD.map(item => (item.offense, item)).countByKey()\nfor ((offense, count) <- offenseCounts) {\n  println(f\"$offense%30s $count%5d\")\n}","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"29b9ad6b-7506-4ceb-9631-eed880af89c6"},{"version":"CommandV1","origId":503877321548553,"guid":"cc044d97-c763-4710-8b82-f66386e01ac1","subtype":"command","commandType":"auto","position":11.0,"command":"%md ## Exercise 4","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"207c9bd5-15a1-4412-ba27-40e839e0a6fc"},{"version":"CommandV1","origId":503877321548554,"guid":"7f7dbf49-4876-4940-bd86-21232efc06ea","subtype":"command","commandType":"auto","position":12.0,"command":"println(baseRDD.partitions.length)\nprintln(groupedByOffenseRDD2.partitions.length)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c72d9f5e-6c20-4138-a51f-e87a6d6c9694"},{"version":"CommandV1","origId":503877321548555,"guid":"07841526-f20c-41ac-905c-77f7c1ef2344","subtype":"command","commandType":"auto","position":13.0,"command":"%md ## Exercise 5","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c0bac946-182e-459e-8222-5d6810cfacd8"},{"version":"CommandV1","origId":503877321548556,"guid":"cb3b5b20-dd67-4f2c-a698-b3a159498a82","subtype":"command","commandType":"auto","position":14.0,"command":"// It's okay to cache the base RDD. It's not very large. Proof:\nprintln(s\"Count of lines: ${baseRDD.count}\")\nval totalChars = baseRDD.map(_.length).reduce(_ + _)\nprintln(s\"Count of characters (Unicode): ${totalChars}\")\n\n// They're all about the same size, since we didn't filter any data out. However,\n// since we're mostly working with the `cleanedRDD`, that's the one to cache.\ncleanedRDD.cache()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1971057b-aff4-4963-966c-a07fdbcaab24"},{"version":"CommandV1","origId":503877321548557,"guid":"cf3ce433-6b2f-4e0f-b080-868d3fd522f8","subtype":"command","commandType":"auto","position":15.0,"command":"%md ## Exercise 6","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3916c149-4efd-4266-85a6-0af44c88f314"},{"version":"CommandV1","origId":503877321548558,"guid":"86208672-b5bb-4cf3-bbdf-18b9e57eed3e","subtype":"command","commandType":"auto","position":16.0,"command":"val resultRDD1 = cleanedRDD.filter(_.offense.toLowerCase contains \"homicide\").map { item => (item.offense, 1) }.reduceByKey(_ + _)\n\nfor ((method, count) <- resultRDD1.collect())\n  println(f\"$method%10s $count%d\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f25aadd3-8268-4dfa-b564-6f3f3146f87e"}],"dashboards":[],"guid":"08523aad-35a3-453f-a0b2-d6465e098ce1","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}