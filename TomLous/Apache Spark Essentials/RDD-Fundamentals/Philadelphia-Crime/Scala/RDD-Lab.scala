{"version":"NotebookV1","origId":503877321548559,"name":"RDD-Lab","language":"scala","commands":[{"version":"CommandV1","origId":503877321548561,"guid":"a095aeb4-4af2-48e2-9b82-775e3ab0786a","subtype":"command","commandType":"auto","position":1.0,"command":"%md\n# RDD Lab (Scala)\n\nIn this lab, we'll explore some of the RDD concepts we've discussed. We'll be using a data set consisting of reported crimes in Philadelphia, from the January through October, 2015. The data is from [Open Data Philly](https://www.opendataphilly.org).. You can find the data at: <https://www.opendataphilly.org/dataset/crime-incidents/resource/edc13da0-8917-41e0-9a63-44f70dd462c2>.\n\nWe'll use this data to explore some RDD transitions and actions.\n\n## Exercises and Solutions\n\nThis notebook contains a number of exercises. Use the API docs for methods \n<a href=\"http://spark.apache.org/docs/1.6.1/api/scala/index.html#org.apache.spark.rdd.RDD\" target=\"_blank\">common to all RDDs</a>,\nplus the extra methods for \n<a href=\"http://spark.apache.org/docs/1.6.1/api/scala/index.html#org.apache.spark.rdd.PairRDDFunctions\" target=\"_blank\">pair RDDs</a>, to look up transformations and actions. If, at any point, you're struggling with the solution to an exercise, feel free to look in the **Solutions** notebook (in the same folder as this lab).\n\n## Let's get started.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0a9cce45-445d-4c5d-9a63-b0b831d7577f"},{"version":"CommandV1","origId":503877321548562,"guid":"b1cc0074-01df-42ce-9694-6083fb9c0f43","subtype":"command","commandType":"auto","position":2.0,"command":"%md\n## Load the data\n\nThe first step is to load the data. Run the following cell to create an RDD containing the data.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1c306dec-074f-4e3e-8b0d-db1877fa492a"},{"version":"CommandV1","origId":503877321548563,"guid":"a880effb-3c87-471d-92c6-babae958e571","subtype":"command","commandType":"auto","position":3.0,"command":"val baseRDD = sc.textFile(\"dbfs:/mnt/training/philadelphia-crime-data-2015-ytd.csv\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"64ba1e1c-5286-43cd-bc04-3ec26eef17b0"},{"version":"CommandV1","origId":503877321548564,"guid":"4756964c-f669-4240-8689-576cffcd0062","subtype":"command","commandType":"auto","position":4.0,"command":"%md \n\n### Question 1\n\nDoes the RDD _actually_ contain the data right now?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"30193983-1fcc-4a32-a7d4-0d7f88b01fdb"},{"version":"CommandV1","origId":503877321548565,"guid":"093b8d64-8291-4f70-8063-9ffcf5cd171a","subtype":"command","commandType":"auto","position":5.0,"command":"%md\n## Explore the data\n\nLet's take a look at some of the data.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c7877bc2-8443-46a1-ab08-be0af27c9586"},{"version":"CommandV1","origId":503877321548566,"guid":"e8c824d6-f64f-4129-9ac4-6fee3726918a","subtype":"command","commandType":"auto","position":6.0,"command":"baseRDD.take(10).foreach(println)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ecfdbe0c-60c5-48e5-98c1-bd3ce312c860"},{"version":"CommandV1","origId":503877321548567,"guid":"ec22122c-7cc4-4ccf-ba39-315d674ed0e9","subtype":"command","commandType":"auto","position":7.0,"command":"%md Okay, there's a header. We'll need to remove that. But we can't just drop the first item. Let's figure out another way to do it.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5d645159-8bcd-4c46-ac80-109075bc1f52"},{"version":"CommandV1","origId":503877321548568,"guid":"80fc3c24-42a7-4483-a0d7-f74fb75db3a8","subtype":"command","commandType":"auto","position":8.0,"command":"val noHeaderRDD = baseRDD.filter { line => ! (line contains \"DC_DIST\") }","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f6ba6918-dd18-4676-92cd-08293fe8d6a2"},{"version":"CommandV1","origId":503877321548569,"guid":"745f1246-acb1-4d67-9a20-14d6d49c610c","subtype":"command","commandType":"auto","position":9.0,"command":"%md\n### Metadata\n\nAccording to the Open Data Philly site, here's what some of those fields actually mean:\n\nKey attribute field names and descriptions\n\n* `DC_DIST` (integer): District number\n* `SECTOR` (integer): Sector or PSA Number\n* `DISPATCH_DATE` (date string): Date of Incident (modified from original data)\n* `DISPATCH_TIME` (time string): Time of Incident (modified from original data)\n* `DC_KEY`: (text): Unique ID of each crime\n* `UCR_General` (integer): Rounded Crime Code\n* `TEXT_GENERAL_CODE` (string): Human-readable Crime Code\n* `OBJECTID` (integer): Unique row ID\n* `POINT_X` (decimal): Latitude where crime occurred\n* `POINT_Y` (decimal): Longitude where crime occurred","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b2e52f2e-cab0-4bae-9790-449f676e7d07"},{"version":"CommandV1","origId":503877321548570,"guid":"97c48b90-e5a7-4377-b063-069146c8b8e1","subtype":"command","commandType":"auto","position":10.0,"command":"%md\n### Question 2\n\nWhy can't you just do `baseRDD.drop(1)`?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1d747a6b-d107-4560-bbb4-80e06287e9ba"},{"version":"CommandV1","origId":503877321548571,"guid":"4062d908-d0c4-4343-a725-1e67d1b1426f","subtype":"command","commandType":"auto","position":11.0,"command":"noHeaderRDD.take(10).foreach(println)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0a129ada-d2bf-4390-a765-4767283ded99"},{"version":"CommandV1","origId":503877321548572,"guid":"e02162f1-62e5-4a2a-bc40-9dc705d28463","subtype":"command","commandType":"auto","position":12.0,"command":"%md \n### Exercise 1\n\nLet's make things a little easier to handle, by converting the `noHeaderRDD` to an RDD containing Scala objects.\n\n**TO DO**\n\n* Split each line into its individual cells.\n* Map the RDD into another RDD of appropriate `CrimeData` objects.\n* You'll have to decide which fields from the data best map onto the fields of the case class.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4f0184c6-ea53-43ce-ab1b-8b234b76598f"},{"version":"CommandV1","origId":503877321548573,"guid":"b2579b18-2a81-4bdb-b84e-6e75d9e65706","subtype":"command","commandType":"auto","position":13.0,"command":"// TAKE NOTE: We are deliberately only some of the fields we need for\n// this lab. There's no sense dragging around more data than we need.\ncase class CrimeData(dateString: String,\n                     timeString: String,\n                     offense: String,\n                     latitude: String,\n                     longitude: String)\n\nval dataRDD = noHeaderRDD.map { line =>\n  << FILL THIS IN >>\n}.repartition(8)\n\n// Why repartition? We'll achieve better parallelism and work around a temporary glitch that affects our class clusters.\n\ndataRDD.take(10).foreach(println)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a4301f5e-4dc0-4680-affc-e60839fb8b37"},{"version":"CommandV1","origId":503877321548574,"guid":"1e037a10-fe64-465d-9805-b527353f4a1c","subtype":"command","commandType":"auto","position":14.0,"command":"%md \n### Exercise 2\n\nNext, group the data by type of crime (the `offense` field).","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a808a7ee-f35b-456f-b5c7-2728e263b014"},{"version":"CommandV1","origId":503877321548575,"guid":"e5624f46-8bb1-45a6-9b3c-29d919f79df7","subtype":"command","commandType":"auto","position":15.0,"command":"val groupedByOffenseRDD = <<FILL THIS IN>>\n\n// What does this return? You'll need to know for the next step.\ngroupedByOffenseRDD.take(10)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5bc93289-c9dd-40aa-9bcd-b5aa1c5d937c"},{"version":"CommandV1","origId":503877321548576,"guid":"f43d0a6e-add1-4568-be5a-9ddb57ea88a3","subtype":"command","commandType":"auto","position":16.0,"command":"val offenseCounts = <FILL-IN>\nfor ((offense, count) <- offenseCounts) {\n  println(<FILL-IN>)\n}","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8ab8c79a-b956-4e9a-9f71-b2d984a939c5"},{"version":"CommandV1","origId":503877321548577,"guid":"6728eaf9-2da3-47e2-8f60-e93a0bb4ca64","subtype":"command","commandType":"auto","position":17.0,"command":"%md\n## ETL\nThere's some junk in our data. Let's clean it up a bit.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a07b211c-4406-4bc2-a800-c506015864b9"},{"version":"CommandV1","origId":503877321548578,"guid":"7505ae62-5a5d-4168-a763-ad4633c34566","subtype":"command","commandType":"auto","position":18.0,"command":"val BadOffenseRE = \"\"\"^\\d+$\"\"\".r\nval cleanedRDD = dataRDD.map { data =>\n  data.copy(offense = data.offense.replaceAll(\"\\\"\", \"\").trim())\n}.\nfilter { data =>\n  BadOffenseRE.findFirstIn(data.offense).isEmpty\n}","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ab0f346f-9d59-47ae-97c6-7d3fa7fc8850"},{"version":"CommandV1","origId":503877321548579,"guid":"08cf430c-4eff-4395-a36b-f5c13bf5a71f","subtype":"command","commandType":"auto","position":19.0,"command":"%md\nNext, copy the `groupBy` logic, above, but change it to run against the `cleanedRDD`.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"601e3e86-e795-4e1c-844a-3335bc7b1610"},{"version":"CommandV1","origId":503877321548580,"guid":"d6503f88-3bbe-4e94-a869-dd50af2d0919","subtype":"command","commandType":"auto","position":20.0,"command":"val groupedByOffenseRDD2 = cleanedRDD.<<FILL THIS IN>>","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"51656f4b-7e83-4a77-84b9-ca98bf33d69d"},{"version":"CommandV1","origId":503877321548581,"guid":"82e32374-a7b0-4755-a9ec-36292e9750fc","subtype":"command","commandType":"auto","position":21.0,"command":"%md \n### Exercise 3\nNext, create an RDD that counts the number of each offense. How many murders were there in 2013? How many car thefts?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1568326f-f92b-43fc-b4e9-e8e87127f144"},{"version":"CommandV1","origId":503877321548582,"guid":"e1ba51a6-0f18-4a0f-99a9-7617ef2a8013","subtype":"command","commandType":"auto","position":22.0,"command":"// But here's a better way. Note the use of Scala's \"f\" string interpolator,\n// which is kind of like printf, but with compile-time type safety. For\n// more information on the \"f\" interpolator, see\n// http://docs.scala-lang.org/overviews/core/string-interpolation.html\n\nval offenseCounts = << FILL THIS IN >>\nfor ((offense, count) <- offenseCounts) {\n  println(<< FILL THIS IN >>)\n}","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"51fc38b7-e24a-4a44-9a9b-5687d481e618"},{"version":"CommandV1","origId":503877321548583,"guid":"04c436cc-a412-444b-a0a3-27f3fed22438","subtype":"command","commandType":"auto","position":23.0,"command":"%md ### Question\n\nRun the following cell. Can you explain what happened? Is `collectAsMap()` a _transformation_ or an _action_?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"36471ef1-9b72-48ec-9e3d-4456e7f36c98"},{"version":"CommandV1","origId":503877321548584,"guid":"ca949681-1646-42f1-9151-90fe87798bfa","subtype":"command","commandType":"auto","position":24.0,"command":"groupedByOffenseRDD2.collectAsMap()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"73dff027-94c1-4e98-8dae-3b611dac1fcc"},{"version":"CommandV1","origId":503877321548585,"guid":"b52066a5-fecd-4f82-98a6-17d988cfd662","subtype":"command","commandType":"auto","position":25.0,"command":"%md \n### Exercise 4\n\nHow many partitions does the base RDD have? What about the `groupedByOffenseRDD2` RDD? How can you find out?\n\n**Hint**: Check the [API documentation](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.rdd.RDD).","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3520a656-9e13-478c-b902-68a0dfc250a9"},{"version":"CommandV1","origId":503877321548586,"guid":"9d3c66f7-9e28-4bdc-b417-7af2285dfed5","subtype":"command","commandType":"auto","position":26.0,"command":"println(baseRDD.<< FILL THIS IN >>)\nprintln(groupedByOffenseRDD2.<< FILL THIS IN >>)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e5a90ebd-a57f-4655-86c1-9214bc57fe38"},{"version":"CommandV1","origId":503877321548587,"guid":"14a0a340-9852-4dcb-b5c4-836767202256","subtype":"command","commandType":"auto","position":27.0,"command":"%md \n### Exercise 5\n\nSince we're continually playing around with this data, we might as well cache it, to speed things up.\n\n**Question**: Which RDD should you cache? \n\n1. `baseRDD`\n2. `noHeaderRDD`\n3. `dataRDD`\n4. `cleanedRDD`\n5. `groupedByOffenseRDD2`\n6. None of them, because they're all still too big.\n7. It doesn't really matter.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"76b5694f-c2e3-404b-af1e-742e30116583"},{"version":"CommandV1","origId":503877321548588,"guid":"04523c98-52bd-42e7-9835-4f2a9d246f94","subtype":"command","commandType":"auto","position":28.0,"command":"<FILL-IN>.cache()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"dc654257-1b1a-4143-87e4-6d71b0cfef3c"},{"version":"CommandV1","origId":503877321548589,"guid":"6a2a7000-cc4c-4a50-a4f1-92fae5a2201d","subtype":"command","commandType":"auto","position":29.0,"command":"%md ### Exercise 6\n\nDisplay the number of homicides.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1a7280b6-9020-49db-9da8-85396182cc9f"},{"version":"CommandV1","origId":503877321548590,"guid":"07611ebe-4b97-4a74-bab5-c41b689a2aab","subtype":"command","commandType":"auto","position":30.0,"command":"val resultRDD1 = cleanedRDD.<< FILL THIS IN >>\nprintln(resultRDD1.collect())\n\n// BONUS: Make the output look better, using a for loop or a foreach.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a02a8732-b0bb-49b8-a12b-073acc09f3fe"},{"version":"CommandV1","origId":503877321548591,"guid":"1d5678b2-f02a-4f35-a080-07dc749c12d9","subtype":"command","commandType":"auto","position":31.0,"command":"%md **Bonus Scala Question**: Why was `Ordering[T]` necessary?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e5a6ecc4-93ab-4fc0-9393-4d9ba47d7f0d"},{"version":"CommandV1","origId":503877321548592,"guid":"d5f19e86-ca4d-4cc8-99b1-2321dbfde567","subtype":"command","commandType":"auto","position":32.0,"command":"%md\n\n![Stop Sign](http://i.imgur.com/RdABwEB.png)\n\n## Stop Here\n\nWe'll resume after we've discussed DataFrames.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c6162d28-f8b6-490d-a7d5-a39e73117926"},{"version":"CommandV1","origId":503877321548593,"guid":"c9034f64-72b6-4546-a3b1-bfbd39e7aa9e","subtype":"command","commandType":"auto","position":33.0,"command":"%md ### Demonstration\n\nLet's plot murders by month. DataFrames are useful for this one.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"60391f7d-f5fd-465e-bbd6-eef42ef2a70a"},{"version":"CommandV1","origId":503877321548594,"guid":"0e62e4b0-e390-4656-9665-ae3dad10f3e4","subtype":"command","commandType":"auto","position":34.0,"command":"%md To do this property, we'll need to parse the dates. That will require knowing their format. A quick sampling of the data will help.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"fefe7212-ddf2-4dd4-9678-f2148f2bb948"},{"version":"CommandV1","origId":503877321548595,"guid":"56196ef3-9ecb-40e1-9304-c8f0203bb458","subtype":"command","commandType":"auto","position":35.0,"command":"cleanedRDD.map(_.dateString).take(30)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c7118ebf-7a68-49e6-ba7e-edc81f0e657f"},{"version":"CommandV1","origId":503877321548596,"guid":"8b160026-067c-4467-b5f0-47b4530fa387","subtype":"command","commandType":"auto","position":36.0,"command":"%md Okay. We can now parse the strings into actual `Date` objects.\n\n**NOTE:** The DataFrame API does _not_ support schemas with `Date` objects in them. We'll need to convert the resulting `Date` to a `java.sql.Timestamp`.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c7d6cf01-5eeb-415e-b10a-0e139e52afdd"},{"version":"CommandV1","origId":503877321548597,"guid":"5750c0e1-da17-40ab-b5c5-4030f65d9339","subtype":"command","commandType":"auto","position":37.0,"command":"%md Let's set up the date/time parser.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"46e7c7d9-0f8f-4ae4-9424-ccd54aec0568"},{"version":"CommandV1","origId":503877321548598,"guid":"5fe98cf8-80d5-4347-a693-ae7a4ac4443d","subtype":"command","commandType":"auto","position":38.0,"command":"import java.text.SimpleDateFormat\n\nval dateFmt = new SimpleDateFormat(\"yyyy-MM-dd\")\nval timeFmt = new SimpleDateFormat(\"HH:mm:ss.S\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0789fb09-e0f5-4f4f-8448-f7ff4dbc13bd"},{"version":"CommandV1","origId":503877321548599,"guid":"6bb2d866-278f-4278-a012-af92d277f333","subtype":"command","commandType":"auto","position":39.0,"command":"%md Now, we can create the data frame. We'll start with the `no_header_rdd` and map it slightly differently than we did to create `data_rdd`:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"137abe58-a78c-4735-990d-41557c48963a"},{"version":"CommandV1","origId":503877321548600,"guid":"da975fe3-5357-47df-b08b-dcd6bd473dcf","subtype":"command","commandType":"auto","position":40.0,"command":"import org.apache.spark.sql.types._\nimport org.apache.spark.sql._\nimport sqlContext.implicits._\nimport java.sql.Timestamp\n\ncase class CrimeData2(date:      Option[Timestamp],\n                      time:      Option[Timestamp],\n                      offense:   String,\n                      latitude:  Option[BigDecimal],\n                      longitude: Option[BigDecimal])\ndef parseLatLong(s: String) = {\n  try {\n    Some(BigDecimal(s))\n  }\n  catch {\n    case _: Exception => None\n  }\n}\n\ndef parseDateTime(fmt: SimpleDateFormat, s: String) = {\n  try {\n    Some(new Timestamp(fmt.parse(s).getTime))\n  }\n  catch {\n    case _: Exception => None\n  }\n}\n\nval df = noHeaderRDD.map { line =>\n  val cols = line.split(\",\")\n  val timeString = cols(11)\n  val dateString = cols(10)\n  CrimeData2(parseDateTime(dateFmt, dateString),\n             parseDateTime(timeFmt, timeString),\n             cols(6), \n             parseLatLong(cols(7)),\n             parseLatLong(cols(8)))\n}.\nmap { data =>\n  data.copy(offense = data.offense.replaceAll(\"\\\"\", \"\").trim())\n}.\nfilter { data =>\n  BadOffenseRE.findFirstIn(data.offense).isEmpty\n}.\ntoDF","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6d9f25a7-b5c9-4ba8-894c-9ee699a7ee72"},{"version":"CommandV1","origId":503877321548601,"guid":"0138eefb-b323-40e5-a222-a8d53258190f","subtype":"command","commandType":"auto","position":41.0,"command":"df.printSchema()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b1a09dcf-6fc6-48f7-9f5a-a24ab1da96cc"},{"version":"CommandV1","origId":503877321548602,"guid":"8157016d-4ecd-4dbb-9f19-8150f0a4cfb9","subtype":"command","commandType":"auto","position":42.0,"command":"import org.apache.spark.sql.functions._\ndisplay( \n  df.filter(lower($\"offense\") like \"%homicide%\")\n    .select(month($\"date\").as(\"month\"), $\"offense\")\n    .groupBy($\"month\").count()\n)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8af34cf6-9afc-4b21-bb8e-7bdf68f75bdc"},{"version":"CommandV1","origId":503877321548603,"guid":"26200d1c-b9c5-4928-885c-42cbf08c10a1","subtype":"command","commandType":"auto","position":43.0,"command":"%md What about all crimes per month?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3a03bf40-51fb-44e7-8d90-036890a7bd41"},{"version":"CommandV1","origId":503877321548604,"guid":"8dd92ca3-dd5c-41b7-8a04-e0e86df42fe0","subtype":"command","commandType":"auto","position":44.0,"command":"display( df.select(month($\"date\").as(\"month\")).groupBy(\"month\").count() )","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e674fc25-f9ee-4ab4-8fb8-797d0fb4b769"},{"version":"CommandV1","origId":503877321548605,"guid":"6607c2f8-efb3-4be8-9b1a-cbff467baaec","subtype":"command","commandType":"auto","position":45.0,"command":"%md We can also plot the frequency of crimes by hour of day.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"43f689a5-367f-4e24-8b33-fcb096916c5a"},{"version":"CommandV1","origId":503877321548606,"guid":"53edb618-168f-4665-b4cc-d39aed2c5e0f","subtype":"command","commandType":"auto","position":46.0,"command":"display(df.select(hour($\"time\").as(\"hour\"), $\"offense\").groupBy($\"hour\").count())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a2b27d6d-6e05-43ac-8bca-58cf17caba21"},{"version":"CommandV1","origId":503877321548607,"guid":"5e08a606-d36d-42fc-b08f-ce901596f439","subtype":"command","commandType":"auto","position":47.0,"command":"","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0d9fdafc-57ca-4ed7-94d4-66a4d29accaa"}],"dashboards":[],"guid":"6e34e4e2-304d-462a-b026-0b337ce72225","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}