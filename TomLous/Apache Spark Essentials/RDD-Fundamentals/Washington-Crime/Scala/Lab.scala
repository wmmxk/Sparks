{"version":"NotebookV1","origId":503877321548675,"name":"Lab","language":"scala","commands":[{"version":"CommandV1","origId":503877321548677,"guid":"0a255bd7-ce1e-4ca8-8580-1d33ced420e0","subtype":"command","commandType":"auto","position":1.0,"command":"%md\n# RDD Lab (Scala)\n\nIn this lab, we'll explore some of the RDD concepts we've discussed. We'll be using a data set consisting of reported crimes in Washington D.C. from October 3, 2015 through October 2, 2016. This data comes from the [District of Columbia's Open Data Catalog](http://data.octo.dc.gov/). We'll use this data to explore some RDD transitions and actions.\n\n## Exercises and Solutions\n\nThis notebook contains a number of exercises. Use the API docs for methods \n<a href=\"http://spark.apache.org/docs/1.6.1/api/scala/index.html#org.apache.spark.rdd.RDD\" target=\"_blank\">common to all RDDs</a>,\nplus the extra methods for \n<a href=\"http://spark.apache.org/docs/1.6.1/api/scala/index.html#org.apache.spark.rdd.PairRDDFunctions\" target=\"_blank\">pair RDDs</a>, to look up transformations and actions. If, at any point, you're struggling with the solution to an exercise, feel free to look in the **Solutions** notebook (in the same folder as this lab).\n\n## Let's get started.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0740f86a-5741-4931-b8b7-756945314643"},{"version":"CommandV1","origId":503877321548678,"guid":"f70af847-58ca-4a52-a267-26706690c5d1","subtype":"command","commandType":"auto","position":2.0,"command":"%md\n## Load the data\n\nThe first step is to load the data. Run the following cell to create an RDD containing the data.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"378a04c6-1d0e-485a-91b8-da681d246e35"},{"version":"CommandV1","origId":503877321548679,"guid":"cab81913-58e6-4e84-ad8b-f6e11789ad24","subtype":"command","commandType":"auto","position":3.0,"command":"val baseRDD = sc.textFile(\"dbfs:/mnt/training/wash_dc_crime_incidents_2015-10-03-to-2016-10-02.csv\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a5a4190a-7f96-4965-b7b0-9f93378911ac"},{"version":"CommandV1","origId":503877321548680,"guid":"e572f99b-8980-4e62-8016-f6868e140527","subtype":"command","commandType":"auto","position":4.0,"command":"%md **Question**: Does the RDD _actually_ contain the data right now?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3cdc2d69-0cba-4a66-9613-ab84640c97fe"},{"version":"CommandV1","origId":503877321548681,"guid":"856b17e6-91c8-44f7-a443-7ddf06d39e1a","subtype":"command","commandType":"auto","position":5.0,"command":"%md\n## Explore the data\n\nLet's take a look at some of the data.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"18258e76-c580-42fc-8c4e-7873dcc44e6a"},{"version":"CommandV1","origId":503877321548682,"guid":"80cda613-5f39-44ea-ae1c-b2017e5020dd","subtype":"command","commandType":"auto","position":6.0,"command":"baseRDD.take(10).foreach(println)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8d93f320-ef11-4aba-aea5-91e57c72ea90"},{"version":"CommandV1","origId":503877321548683,"guid":"a99a562a-70c2-46ad-94c6-55bf331e877d","subtype":"command","commandType":"auto","position":7.0,"command":"%md Okay, there's a header. We'll need to remove that. But, since the file will be split into partitions, we can't just drop the first item. Let's figure out another way to do it.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"7149597b-faa7-44fa-8743-f7eccfbaf412"},{"version":"CommandV1","origId":503877321548684,"guid":"c136e1a2-7e76-452e-94fc-acd7a0aee905","subtype":"command","commandType":"auto","position":8.0,"command":"val noHeaderRDD = baseRDD.filter { line => ! (line contains \"REPORTDATETIME\") }","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"44791953-1365-48d6-b920-8cc15edc3a03"},{"version":"CommandV1","origId":503877321548685,"guid":"e5bf232b-802d-40e1-9a12-21959502c9e7","subtype":"command","commandType":"auto","position":9.0,"command":"noHeaderRDD.take(10).foreach(println)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"dcb51219-1176-4431-acdd-9ab51bd5b7f9"},{"version":"CommandV1","origId":503877321548686,"guid":"b557d210-9f74-4015-8ca1-0bd0cb8c3c0b","subtype":"command","commandType":"auto","position":10.0,"command":"%md \n### Exercise 1\n\nLet's make things a little easier to handle, by converting the `noHeaderRDD` to an RDD containing Scala objects.\n\n**TO DO**\n\n* Split each line into its individual cells.\n* Map the RDD into another RDD of appropriate `CrimeData` objects.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5292bb25-0667-4717-9edf-aeeb24933003"},{"version":"CommandV1","origId":503877321548687,"guid":"7e10f7d6-8b25-43c2-b9b1-97de68ed6385","subtype":"command","commandType":"auto","position":11.0,"command":"// TAKE NOTE: We are deliberately only keeping the first five fields of\n// each line, since that's all we're using in this lab. There's no sense\n// in dragging around more data than we need.\ncase class CrimeData(ccn: String, \n                     reportTime: String,\n                     shift: String,\n                     offense: String,\n                     method: String)\n                     \nval dataRDD = noHeaderRDD.map { line =>\n  <FILL-IN>\n}.repartition(8)\n\n// Why repartition? We'll achieve better parallelism and work around a temporary glitch that affects our class clusters.\n\ndataRDD.take(10).foreach(println)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"7f30986f-ce12-4366-98b3-6e42c787fad4"},{"version":"CommandV1","origId":503877321548688,"guid":"af1cb677-5810-4ab3-913f-ca6f747403a9","subtype":"command","commandType":"auto","position":12.0,"command":"%md \n### Exercise 2\n\nNext, group the data by type of crime (the \"OFFENSE\" column).","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"bf7dcf2b-f583-4a27-8987-2b8687b0e3d8"},{"version":"CommandV1","origId":503877321548689,"guid":"ac3d4d77-6e45-46ad-8ec8-2f4996db3b2a","subtype":"command","commandType":"auto","position":13.0,"command":"val groupedByOffenseRDD = dataRDD.groupBy { data => <FILL-IN> }\n\n// What does this return? You'll need to know for the next step.\ngroupedByOffenseRDD.take(10).foreach(println)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6320c49e-9cfd-44f3-b71b-f922176f8fd3"},{"version":"CommandV1","origId":503877321548690,"guid":"bd63f444-43b0-42c8-9355-b7c2d70d1e85","subtype":"command","commandType":"auto","position":14.0,"command":"%md \n### Exercise 3\nNext, create an RDD that counts the number of each offense. How many murders were there in the period covered by the data? How many assaults with a dangerous weapon?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"69139530-bfbb-434e-be86-b247883ef6c7"},{"version":"CommandV1","origId":503877321548691,"guid":"f228e2a2-bf6b-43f6-b0ba-b83ad9b50937","subtype":"command","commandType":"auto","position":15.0,"command":"val offenseCounts = <FILL-IN>\nfor ((offense, count) <- offenseCounts) {\n  println(<FILL-IN>)\n}","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"799a58fa-81b9-47a3-8a6f-6adbbbf196d6"},{"version":"CommandV1","origId":503877321548692,"guid":"37db07fd-9014-4caf-bfaf-62c05868c929","subtype":"command","commandType":"auto","position":16.0,"command":"%md ### Question\n\nRun the following cell. Can you explain what happened? Is `collectAsMap()` a _transformation_ or an _action_?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d690cc36-3751-41d9-a739-19071b38092a"},{"version":"CommandV1","origId":503877321548693,"guid":"b87f1569-f209-4631-b96f-1e3ee7a63ddd","subtype":"command","commandType":"auto","position":17.0,"command":"groupedByOffenseRDD.collectAsMap()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"fe26aed5-4de1-465f-a91c-37637f31bcf1"},{"version":"CommandV1","origId":503877321548694,"guid":"6994a1bd-5e25-48c8-831b-809e38a41e9c","subtype":"command","commandType":"auto","position":18.0,"command":"%md \n### Exercise 4\n\nHow many partitions does the base RDD have? What about the `groupedByOffenseRDD` RDD? How can you find out?\n\n**Hint**: Check the [API documentation](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.rdd.RDD).","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c3579c68-4e24-4519-a4d8-bf23e28960a1"},{"version":"CommandV1","origId":503877321548695,"guid":"3bf9ac49-0004-42ef-99f6-aa6c96ffe04a","subtype":"command","commandType":"auto","position":19.0,"command":"println(baseRDD.<FILL-IN>)\nprintln(groupedByOffenseRDD.<FILL-IN>)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"05b5320e-6ef4-498d-80f1-159a1f4f756d"},{"version":"CommandV1","origId":503877321548696,"guid":"640d9bc9-7161-4c5b-a656-ddb709ff3431","subtype":"command","commandType":"auto","position":20.0,"command":"%md \n### Exercise 5\n\nSince we're continually playing around with this data, we might as well cache it, to speed things up.\n\n**Question**: Which RDD should you cache? \n\n1. `baseRDD`\n2. `noHeaderRDD`\n3. `dataRDD`\n4. None of them, because they're all still too big.\n5. It doesn't really matter.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0e2a08b0-6322-44c2-ba3c-22fc62a59228"},{"version":"CommandV1","origId":503877321548697,"guid":"7addf474-e746-4578-acae-55ca414cfda7","subtype":"command","commandType":"auto","position":21.0,"command":"<FILL-IN>.cache().count() // Why am I calling count() here?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d515d4af-8b75-4759-ad08-8c98c63652c7"},{"version":"CommandV1","origId":503877321548698,"guid":"132d8c99-3aa3-45be-ab15-1dbb24dda329","subtype":"command","commandType":"auto","position":22.0,"command":"dataRDD.cache.count","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6b249fb8-6df8-4934-a153-1175ee491235"},{"version":"CommandV1","origId":503877321548699,"guid":"1529e81d-4992-4ec0-90d7-2203c623d7bf","subtype":"command","commandType":"auto","position":23.0,"command":"%md ### Exercise 6\n\nDisplay the number of homicides by weapon (method).","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"59109536-39ae-4161-96ff-d3677ea70573"},{"version":"CommandV1","origId":503877321548700,"guid":"924fcd01-3dae-4bf5-9c0c-565555d95aa1","subtype":"command","commandType":"auto","position":24.0,"command":"val resultRDD1 = dataRDD.<FILL-IN>\nprintln(resultRDD1.collect())\n\n// BONUS: Make the output look better, using a for loop or a foreach.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d0a59df7-5904-4ba8-9741-ceec557f5536"},{"version":"CommandV1","origId":503877321548701,"guid":"1bb18fc5-dd00-4bc2-a423-b7dfab666a10","subtype":"command","commandType":"auto","position":25.0,"command":"%md \n### Exercise 7\n\nDuring which police shift did the most crimes occur in the period covered by the data?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"08db2215-9e77-472b-9cec-fca314541563"},{"version":"CommandV1","origId":503877321548702,"guid":"2fc5c2cd-f8d8-45ca-9054-5b267408da29","subtype":"command","commandType":"auto","position":26.0,"command":"// Hint: Start with the dataRDD\nprintln(dataRDD.<FILL-IN>)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"9e4d7320-17ea-4cb0-8d1c-13b8a3f2a0de"},{"version":"CommandV1","origId":503877321548703,"guid":"ed75262d-da3d-4b33-8ae5-0a9f34ed9bb2","subtype":"command","commandType":"auto","position":27.0,"command":"%md\n\n## Let's Switch to DataFrames","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ab8dd124-573a-429b-9067-f4b8bb3f9d64"},{"version":"CommandV1","origId":503877321548704,"guid":"8d58f40a-29f0-4b62-9ffc-713b890b5516","subtype":"command","commandType":"auto","position":28.0,"command":"%md ### Demonstration\n\nLet's plot murders by month. DataFrames are useful for this one.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"68170e45-5e49-438f-aa3d-99852f4c2c6c"},{"version":"CommandV1","origId":503877321548705,"guid":"a542d767-3fcf-4c8e-9e9b-27db6375ab26","subtype":"command","commandType":"auto","position":29.0,"command":"%md To do this properly, we'll need to parse the dates. That will require knowing their format. A quick sampling of the data will help.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0f21eed0-b76d-47e3-97bb-98324b026896"},{"version":"CommandV1","origId":503877321548706,"guid":"448a553c-90c4-4562-916f-b6879d818a48","subtype":"command","commandType":"auto","position":30.0,"command":"dataRDD.map(_.reportTime).take(30).foreach(println)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0ace174b-c62b-4044-a09f-067aced20976"},{"version":"CommandV1","origId":503877321548707,"guid":"0b90deda-9190-405c-b41f-7b33165c4add","subtype":"command","commandType":"auto","position":31.0,"command":"%md Okay. We can now parse the strings into actual `Date` objects.\n\n**NOTE:** The DataFrame API does _not_ support schemas with `Date` objects in them. We'll need to convert the resulting `Date` to a `java.sql.Timestamp`.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c1cefed8-4e91-4f6b-9d5c-3e12c7e5dfa3"},{"version":"CommandV1","origId":503877321548708,"guid":"39c06e5f-a68d-4b41-af42-0d6b80b7ba3f","subtype":"command","commandType":"auto","position":32.0,"command":"%md Let's set up the date/time parser.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e536d22f-0991-4794-93c2-7c1bebfd31a4"},{"version":"CommandV1","origId":503877321548709,"guid":"3beb126b-79ba-4101-a7cd-7ae8aaf04f23","subtype":"command","commandType":"auto","position":33.0,"command":"import java.text.SimpleDateFormat\n\nval dateFmt = new SimpleDateFormat(\"M/dd/yyyy KK:mm:SS a\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"49737913-8c8d-4377-9fb5-be5aff543dbb"},{"version":"CommandV1","origId":503877321548710,"guid":"51da961a-4404-4d5e-b263-194e62ad03a4","subtype":"command","commandType":"auto","position":34.0,"command":"%md Now, we can create the data frame. We'll start with the `dataRDD`, since it's already cached.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ffb25947-17c3-440e-a0c4-8d15c25963a8"},{"version":"CommandV1","origId":503877321548711,"guid":"073dcc26-ee79-46af-a179-9e0ff6302e2f","subtype":"command","commandType":"auto","position":35.0,"command":"import org.apache.spark.sql.types._\nimport org.apache.spark.sql._\nimport sqlContext.implicits._\nimport java.sql.Timestamp\nimport java.util.Calendar\n\nval df = dataRDD.map { d =>\n  val dateString = d.reportTime\n  val reportTime = new Timestamp(dateFmt.parse(dateString).getTime)\n  (d.ccn, reportTime, d.shift, d.offense, d.method)\n}.toDF(\"ccn\", \"reportTime\", \"shift\", \"offense\", \"method\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d9ae615c-6d8d-4932-864f-c33627e35da2"},{"version":"CommandV1","origId":503877321548712,"guid":"1ab15abd-2be8-4c59-a374-267f0fb25062","subtype":"command","commandType":"auto","position":36.0,"command":"df.printSchema()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b7813385-3eee-4d37-aa42-868ffabcd22e"},{"version":"CommandV1","origId":503877321548713,"guid":"6cb1be62-92c4-4593-b6c9-7a8b16c10d87","subtype":"command","commandType":"auto","position":37.0,"command":"display(df)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1239e39e-5ba2-4877-9bdf-c1dd9e72bedd"},{"version":"CommandV1","origId":503877321548714,"guid":"f809cf6e-0ebc-4a78-b8aa-8cf9a0cbea85","subtype":"command","commandType":"auto","position":38.0,"command":"%md Let's use the built-in \n<a href=\"http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.functions$@month(e:org.apache.spark.sql.Column):org.apache.spark.sql.Column\" target=\"_blank\"><tt>month</tt></a>\nfunction to extract the month. Note that the months are 0-indexed. Let's make the 1-indexed, since that makes more sense to us humans.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"7f47ee68-2cde-493a-b67f-83210e4ca685"},{"version":"CommandV1","origId":503877321548715,"guid":"a24bd7bd-ea36-4684-a779-0779dabfc263","subtype":"command","commandType":"auto","position":39.0,"command":"import org.apache.spark.sql.functions._\nval dfWithMonth = df.select($\"*\", (month($\"reportTime\") + 1).as(\"month\"))","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"860801fa-4bbc-4951-9c24-8057ab4ed56b"},{"version":"CommandV1","origId":503877321548716,"guid":"adde9485-9fb8-4bfa-8882-fdc1cc2d1714","subtype":"command","commandType":"auto","position":40.0,"command":"display( \n  dfWithMonth.filter($\"offense\" === \"HOMICIDE\")\n             .select($\"month\", $\"offense\")\n             .groupBy($\"month\").count()\n)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ddedc72d-e1ef-4080-9975-eef54af891c5"},{"version":"CommandV1","origId":503877321548717,"guid":"b3b6775e-bb9d-4b2e-88ae-0ff8fd66f0a7","subtype":"command","commandType":"auto","position":41.0,"command":"%md What about all crimes per month?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4021b30b-2241-4a07-ae3f-d06832875242"},{"version":"CommandV1","origId":503877321548718,"guid":"2958bcc1-ee02-49ea-9aa0-c8f550be606a","subtype":"command","commandType":"auto","position":42.0,"command":"display( dfWithMonth.select($\"month\").groupBy(\"month\").count() )","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"7db6c59c-ca9c-4eda-bfbc-9a2db90f9fac"},{"version":"CommandV1","origId":503877321548719,"guid":"5d0c394e-322a-470c-b9ea-28192b673f9c","subtype":"command","commandType":"auto","position":43.0,"command":"%md We can also plot the frequency of crimes by hour of day.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ff8d3ded-8c06-4774-9659-05f549660e59"},{"version":"CommandV1","origId":503877321548720,"guid":"311c26ca-f42e-40a6-8276-77c51cf29d75","subtype":"command","commandType":"auto","position":44.0,"command":"display(df.select(hour($\"reportTime\").as(\"hour\"), $\"offense\").groupBy($\"hour\").count())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d6aabb1a-f897-43e6-beae-ec5ae2693928"},{"version":"CommandV1","origId":503877321548721,"guid":"4f221e18-f15d-4f5a-9538-accfe4cb3737","subtype":"command","commandType":"auto","position":45.0,"command":"","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b4845313-185e-4a33-ad94-afcdc9b7df67"}],"dashboards":[],"guid":"519ba890-cdc3-4685-b841-559d0a080616","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}