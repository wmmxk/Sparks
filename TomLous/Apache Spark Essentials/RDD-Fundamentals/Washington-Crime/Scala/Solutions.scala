{"version":"NotebookV1","origId":503877321548722,"name":"Solutions","language":"scala","commands":[{"version":"CommandV1","origId":503877321548724,"guid":"12fa2632-06dc-4c12-830e-263e9f2f7391","subtype":"command","commandType":"auto","position":1.0,"command":"%md # Solutions for RDD Lab (Scala)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e6568ac4-529b-4258-b132-d732aa461816"},{"version":"CommandV1","origId":503877321548725,"guid":"59a4c969-c87e-45b3-8791-78fb4ae492b5","subtype":"command","commandType":"auto","position":2.0,"command":"%md ## Exercise 1","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3f910443-2677-4ccf-966e-62d3edff66f2"},{"version":"CommandV1","origId":503877321548726,"guid":"3ba7b12a-df0a-4130-b4de-caadffe0101f","subtype":"command","commandType":"auto","position":3.0,"command":"// TAKE NOTE: We are deliberately only keeping the first five fields of\n// each line, since that's all we're using in this lab. There's no sense\n// in dragging around more data than we need.\ncase class CrimeData(ccn: String, \n                     reportTime: String,\n                     shift: String,\n                     offense: String,\n                     method: String)\n                     \nval dataRDD = noHeaderRDD.map { line =>\n  val cols = line.split(\",\")\n  CrimeData(cols(0), cols(1), cols(2), cols(3), cols(4))\n}\ndataRDD.take(10).foreach(println)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1403f3d4-cf99-498d-b754-c9904a3093b8"},{"version":"CommandV1","origId":503877321548727,"guid":"5044fed3-c05f-4b15-a37e-e27b416c0781","subtype":"command","commandType":"auto","position":4.0,"command":"%md ## Exercise 2","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"7db385ed-f550-49b6-aaea-10761b9d5edb"},{"version":"CommandV1","origId":503877321548728,"guid":"d13d4ae8-0311-4b62-be7a-032748cab326","subtype":"command","commandType":"auto","position":5.0,"command":"val groupedByOffenseRDD = dataRDD.groupBy { data => data.offense }\n\n// What does this return? You'll need to know for the next step.\ngroupedByOffenseRDD.take(1).foreach(println)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"9a1c3bc0-063c-4fa3-b7c9-8db540b8e286"},{"version":"CommandV1","origId":503877321548729,"guid":"a6f9e41e-6aa1-46c3-bb3b-0216d0516692","subtype":"command","commandType":"auto","position":6.0,"command":"%md ## Exercise 3","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"840160b0-aba7-48d5-a224-83ca5cdf429c"},{"version":"CommandV1","origId":503877321548730,"guid":"09bf3b49-6778-482d-889c-7d9ca037865c","subtype":"command","commandType":"auto","position":7.0,"command":"// Here's one way to do it:\n\nval offenseCounts = groupedByOffenseRDD.map(g => (g._1, g._2.toSeq.length)).collect()\nfor ((offense, count) <- offenseCounts) {\n  println(f\"$offense%30s $count%5d\")\n}","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"05267ea5-df75-4095-b431-6be37f924fa1"},{"version":"CommandV1","origId":503877321548731,"guid":"243409bc-365b-432c-a966-c9af645e62ca","subtype":"command","commandType":"auto","position":8.0,"command":"// But here's a better way. Note the use of Scala's \"f\" string interpolator,\n// which is kind of like printf, but with compile-time type safety. For\n// more information on the \"f\" interpolator, see\n// http://docs.scala-lang.org/overviews/core/string-interpolation.html\n\nval offenseCounts = dataRDD.map(item => (item.offense, item)).countByKey()\nfor ((offense, count) <- offenseCounts) {\n  println(f\"$offense%30s $count%5d\")\n}","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d01c4866-db5c-467d-8702-ff45b4641166"},{"version":"CommandV1","origId":503877321548732,"guid":"18c48331-182b-47ad-bcc2-03b1c36fcf4c","subtype":"command","commandType":"auto","position":9.0,"command":"%md ## Exercise 4","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"9103c632-563f-4f35-a72e-b8a54eef3301"},{"version":"CommandV1","origId":503877321548733,"guid":"4bf69d5e-32da-4cab-831f-789f0c087caf","subtype":"command","commandType":"auto","position":10.0,"command":"println(baseRDD.partitions.length)\nprintln(groupedByOffenseRDD.partitions.length)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b05c08db-a34b-4dc3-8a95-2f28ac00003b"},{"version":"CommandV1","origId":503877321548734,"guid":"472c4bdc-4825-425f-9342-b95c7f7d9a69","subtype":"command","commandType":"auto","position":11.0,"command":"%md ## Exercise 5","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"91d64bb8-6b5c-4810-8f01-36a8b6fbe0cd"},{"version":"CommandV1","origId":503877321548735,"guid":"95bdcfda-9717-48b9-a18d-046ec14531f4","subtype":"command","commandType":"auto","position":12.0,"command":"// It's okay to cache the base RDD. It's not very large. Proof:\nprintln(s\"Count of lines: ${baseRDD.count}\")\nval totalChars = baseRDD.map(_.length).reduce(_ + _)\nprintln(s\"Count of characters (Unicode): ${totalChars}\")\n\n// They're all about the same size, since we didn't filter any data out. However,\n// since we're mostly working with the `data_rdd`, that's the one to cache.\ndataRDD.cache().count()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"bc8b26e5-55e1-499f-8e54-14746de08453"},{"version":"CommandV1","origId":503877321548736,"guid":"a49a3f56-9439-4822-9430-94920ba7a303","subtype":"command","commandType":"auto","position":13.0,"command":"%md ## Exercise 6","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5462e6a6-1bcf-438b-b944-a3f3c75ab62f"},{"version":"CommandV1","origId":503877321548737,"guid":"50b7e049-e3d5-43b5-82a1-414b502d312e","subtype":"command","commandType":"auto","position":14.0,"command":"val resultRDD1 = dataRDD.filter(_.offense == \"HOMICIDE\").map(item => (item.method, 1)).reduceByKey(_ + _)\n\nfor ((method, count) <- resultRDD1.collect())\n  println(f\"$method%10s $count%d\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"be20950c-f372-4ffe-a5c8-eb75cd9bc125"},{"version":"CommandV1","origId":503877321548738,"guid":"6c9fda6a-79de-4ab8-8082-0b0f7ebef19d","subtype":"command","commandType":"auto","position":15.0,"command":"%md ## Exercise 7","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f6ca0bd7-a5a0-40d0-b80b-5a28abc3e992"},{"version":"CommandV1","origId":503877321548739,"guid":"0c6b8c11-e15d-442c-baac-e3bc0e53c6fe","subtype":"command","commandType":"auto","position":16.0,"command":"// There are quite a few ways to solve this one, but here's a straightforward (and relatively fast) one.\nprintln(dataRDD.map(item => (item.shift, 1))\n               .reduceByKey(_ + _)\n               .max)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ec1fb3be-f8a0-43dc-bb43-1d10525958ae"}],"dashboards":[],"guid":"ad4992a7-415c-45aa-ad48-43c4089f16dc","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}