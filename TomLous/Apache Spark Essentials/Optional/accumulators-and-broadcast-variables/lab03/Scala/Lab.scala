{"version":"NotebookV1","origId":503877321547608,"name":"Lab","language":"scala","commands":[{"version":"CommandV1","origId":503877321547610,"guid":"c5b0dfb0-2eb7-4ee8-ad75-12969bcc61e5","subtype":"command","commandType":"auto","position":1.0,"command":"%md\n# Custom Accumulators Lab\n\nIn this lab, we'll build a couple custom Accumulator classes. (Well, we'll show you one; then you'll build one of your own.)\n\nFirst, some useful imports...","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a475f90e-daf6-418d-b3a5-4a86be29f94d"},{"version":"CommandV1","origId":503877321547611,"guid":"3e7474cb-68e1-4c04-b4e7-cfb2cc33b328","subtype":"command","commandType":"auto","position":2.0,"command":"import org.apache.spark._\nimport scala.util.Random","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"47c2ae8c-aed1-47e6-a679-c4e456d4d6b3"},{"version":"CommandV1","origId":503877321547612,"guid":"2c90fba1-2094-401c-a60e-b7ff3b760a75","subtype":"command","commandType":"auto","position":3.0,"command":"%md Let's create an accumulator that's a map. We'll use it to count words. Normally, we'd just use the typical word-count RDD transformation pattern, but this alternate approach is useful when you want to do the counting as a _side effect_ of something else you're doing.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a4f71820-4a59-436c-b208-43a071692b3b"},{"version":"CommandV1","origId":503877321547613,"guid":"4168deaf-b93e-48f3-b24a-17dd94ba6e9e","subtype":"command","commandType":"auto","position":4.0,"command":"%md We'll need a custom accumulator class. This accumulator will be a map of `String` (word) to `Int` (word count).","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"de63cd3f-de7e-48d0-a86c-f7f1450adad7"},{"version":"CommandV1","origId":503877321547614,"guid":"67c548df-d9c0-4f96-9525-309e2572bcb6","subtype":"command","commandType":"auto","position":5.0,"command":"class AccumWordCounts extends AccumulatorParam[Map[String,Int]] {\n  /** zero() takes an initial value and converts it (if necessary)\n    * into the actual initial value for the accumulator. In this case,\n    * we'll just accept the caller's initial value.\n    *\n    * @param initial the caller's initial value.\n    *\n    * @return the actual initial value\n    */\n  def zero(initial: Map[String,Int]) = Map.empty[String, Int]\n  \n  /** addInPlace() is responsible for taking two maps and combining\n    * them into one. Spark uses it to sum up the various node-specific\n    * instances of the accumulator.\n    *\n    * @param m1  the first map\n    * @param m2  the second map\n    *\n    * @return the combined map\n    */\n  def addInPlace(m1: Map[String, Int], m2: Map[String, Int]) = {\n    val keys1 = m1.keySet\n    val keys2 = m2.keySet\n    \n    // The keys that are common between both maps must have their\n    // counts summed. The keys that are unique can just be copied\n    // to the new map.\n    val commonKeys = keys1 intersect keys2\n    val unique1 = keys1 -- commonKeys\n    val unique2 = keys2 -- commonKeys\n    val commonMerged = commonKeys.map { key =>\n      key -> (m1(key) + m2(key))\n    }\n    commonMerged.toMap ++ \n    unique1.map { key => key -> m1(key) }.toMap ++\n    unique2.map { key => key -> m2(key) }.toMap\n  }\n}","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"905b008c-266d-4820-9f25-69f80c0e737e"},{"version":"CommandV1","origId":503877321547615,"guid":"af9e797b-d6ce-4982-8ad9-33d7a2fb107a","subtype":"command","commandType":"auto","position":6.0,"command":"%md Next, we need to create an instance of an accumulator of this type.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4286f287-fbda-4135-9dd2-5d1d814f9ad6"},{"version":"CommandV1","origId":503877321547616,"guid":"df8dfff6-53e2-4534-9bf5-316b5e126fd5","subtype":"command","commandType":"auto","position":7.0,"command":"val countMap = sc.accumulator(Map.empty[String, Int])(new AccumWordCounts)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"14458881-e7b8-4e14-a444-a4cf3b7c6283"},{"version":"CommandV1","origId":503877321547617,"guid":"79f2cd0f-d874-4c20-b787-8ca8be34d2c3","subtype":"command","commandType":"auto","position":8.0,"command":"%md Now, let's test it with a parallelized data set, which makes it easier to validate.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4103ca17-0b5c-4a36-b701-8b7050ef17b9"},{"version":"CommandV1","origId":503877321547618,"guid":"b75dae35-7683-4e39-af23-21a14ea6537a","subtype":"command","commandType":"auto","position":9.0,"command":"val rdd = sc.parallelize(Array(\"and\", \"and\", \"then\", \"the\", \"leaves\", \"grass\", \"green\", \"leaves\"))","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e50103d8-cfe6-4391-a00a-432d4753859e"},{"version":"CommandV1","origId":503877321547619,"guid":"61d08900-9328-4776-a83e-6a36363dfc60","subtype":"command","commandType":"auto","position":10.0,"command":"%md We'll use the distributed action `foreach` to count each word. In addition, we'll convert the RDD to another RDD with upper-cased words.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"cc577c2f-04e9-482b-8cea-b733627c0570"},{"version":"CommandV1","origId":503877321547620,"guid":"3854ff54-007c-477c-bff0-1326d7a0a7be","subtype":"command","commandType":"auto","position":11.0,"command":"val rdd2 = rdd.map { _.toUpperCase }\n// Note that we have to add a Map here.\nrdd2.foreach { word => countMap += Map(word -> 1) }","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"623cfd34-0614-45ad-bc74-7bbbff042328"},{"version":"CommandV1","origId":503877321547621,"guid":"e20e0351-452f-4157-b504-998b8f5f1c2a","subtype":"command","commandType":"auto","position":12.0,"command":"rdd2.collect().foreach(println)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"20184de6-d5e1-4b53-9c1c-ec26d25c54fa"},{"version":"CommandV1","origId":503877321547622,"guid":"80072089-23ba-4bde-b69f-570f8d2a2670","subtype":"command","commandType":"auto","position":13.0,"command":"%md What's the accumulator look like?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"9f555425-c50b-4aa3-a4fe-65b6fb9a3ff0"},{"version":"CommandV1","origId":503877321547623,"guid":"1b50f2b9-ea8c-4747-8689-222ab08c14b0","subtype":"command","commandType":"auto","position":14.0,"command":"countMap.value.toSeq.sorted.foreach { case (key, value) => println(s\"$key -> $value\") }","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2b064601-3a10-45c7-a9f6-0d1866baca02"},{"version":"CommandV1","origId":503877321547624,"guid":"d3d9e007-37fa-408b-a6d3-74103ca842d8","subtype":"command","commandType":"auto","position":15.0,"command":"%md ## Exercise\n\nYou're going to create an accumulator that can be used to keep track of unique occurrences of numbers. A `Set` is a useful way to keep track of uniqueness.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3ea8ca90-5a3d-4ac7-933f-d4c36fe8eeb3"},{"version":"CommandV1","origId":503877321547625,"guid":"d4607d4e-82df-4ac4-a90f-7e8cd49936b0","subtype":"command","commandType":"auto","position":16.0,"command":"class AccumSet extends AccumulatorParam[Set[Int]] {\n  def zero(/* FILL IN */) { /* FILL IN */ }\n  \n  def addInPlace(/* FILL IN */) { /* FILL IN */ }\n}","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0a45eee6-6531-4dbb-aab9-7b8313fee47a"},{"version":"CommandV1","origId":503877321547626,"guid":"8141df47-6432-4de0-a119-965da9846992","subtype":"command","commandType":"auto","position":17.0,"command":"val uniqueNumbers = sc.accumulator(Set.empty[Int], \"my-set-accumulator\")(new AccumSet)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a22ec0d0-5181-45bf-bdfb-757bed3171c6"},{"version":"CommandV1","origId":503877321547627,"guid":"a014e42d-e365-4031-98fe-d0d189b1c8ed","subtype":"command","commandType":"auto","position":18.0,"command":"// Check the initial value of the accumulator.\nuniqueNumbers.value","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c8813bd4-9c29-4e2a-8b95-88eface929f3"},{"version":"CommandV1","origId":503877321547628,"guid":"18ad03c8-f5b0-4935-b3b0-c32ad927c9c9","subtype":"command","commandType":"auto","position":19.0,"command":"%md To test your accumulator, we'll use 1,000,000 random numbers, with some guaranteed overlap.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"09724c1c-47a7-4cc7-bc17-224ac5c6a844"},{"version":"CommandV1","origId":503877321547629,"guid":"f3573b84-072c-481d-b4ca-bc8152018322","subtype":"command","commandType":"auto","position":20.0,"command":"val numbers = (1 to 1000000).map { i => Random.nextInt(100000) }","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b84cc5f6-51e8-45ba-a511-59f7f73746ec"},{"version":"CommandV1","origId":503877321547630,"guid":"1a27ad8e-d85f-446e-8bdc-0cca32fe18f8","subtype":"command","commandType":"auto","position":21.0,"command":"val rdd = sc.parallelize(numbers, 4)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b789c81a-33d5-42ca-a2b7-2c557b59f44f"},{"version":"CommandV1","origId":503877321547631,"guid":"f5e54059-ecbe-411d-acb0-53f01c9b2b87","subtype":"command","commandType":"auto","position":22.0,"command":"%md Here's where you need to update the accumulator.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c9b8d23c-b064-47f6-b8a8-05aa0bbce7ed"},{"version":"CommandV1","origId":503877321547632,"guid":"d1566cd4-d239-49d0-97d4-0562d4b77804","subtype":"command","commandType":"auto","position":23.0,"command":"rdd.foreach { i => /* FILL IN */ }","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"863f9d24-4897-40a1-bcbe-4f011402c71d"},{"version":"CommandV1","origId":503877321547633,"guid":"82ad8d1e-d4c2-4eef-b110-4e226f8cc6fe","subtype":"command","commandType":"auto","position":24.0,"command":"println(s\"Random numbers: ${rdd.count()}\\nUnique numbers: ${uniqueNumbers.value.size}\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3a70b715-2aac-4bc1-8d45-20f36f6e2723"}],"dashboards":[],"guid":"64ca7176-1682-4298-89e9-8baaa506387e","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}