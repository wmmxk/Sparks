{"version":"NotebookV1","origId":503877321547580,"name":"Lab","language":"python","commands":[{"version":"CommandV1","origId":503877321547582,"guid":"61519a1c-0985-4d0e-9ef5-a2e98a87dd5b","subtype":"command","commandType":"auto","position":1.0,"command":"%md\n# Custom Accumulators Lab\n\nIn this lab, we'll build a couple custom Accumulator classes. (Well, we'll show you one; then you'll build one of your own.)\n\nFirst, some useful imports...","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"97de18c1-0ccf-434c-b6fb-7b1543f7b7fe"},{"version":"CommandV1","origId":503877321547583,"guid":"cac5a468-4be2-4e0a-b540-f8b03a310be3","subtype":"command","commandType":"auto","position":2.0,"command":"from pyspark import *\nimport random","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"87c5ee07-e61b-4f76-b0c1-637efc7d88f2"},{"version":"CommandV1","origId":503877321547584,"guid":"dadb6c31-f69b-438b-ac94-3a36b54a76ec","subtype":"command","commandType":"auto","position":3.0,"command":"%md Let's create an accumulator that's a map. We'll use it to count words. Normally, we'd just use the typical word-count RDD transformation pattern, but this alternate approach is useful when you want to do the counting as a _side effect_ of something else you're doing.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5e6e84fb-8c03-40be-9a17-388e6a821a69"},{"version":"CommandV1","origId":503877321547585,"guid":"bed2558d-bd79-45fc-abf8-fdb4cc4ccd10","subtype":"command","commandType":"auto","position":4.0,"command":"%md We'll need a custom accumulator class. This accumulator will be a map of `String` (word) to `Int` (word count).","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8c3279ae-32d2-4418-97c7-f48de5ce5992"},{"version":"CommandV1","origId":503877321547586,"guid":"51741c73-aeaa-4e27-ac0a-c9684d3b775f","subtype":"command","commandType":"auto","position":5.0,"command":"class AccumWordCounts(AccumulatorParam):\n    def zero(self, initialValue):\n        '''\n        zero() takes an initial value and converts it (if necessary)\n        into the actual initial value for the accumulator. In this case,\n        we'll just accept the caller's initial value.\n    \n        initial - the caller's initial value.\n    \n        returns the actual initial value\n        '''\n        return {}\n\n    def addInPlace(self, d1, d2):\n        '''\n        addInPlace() is responsible for taking two maps and combining\n        them into one. Spark uses it to sum up the various node-specific\n        instances of the accumulator.\n    \n        m1  the first map\n        m2  the second map\n\n        returns the combined map\n        '''\n        keys1 = set(d1.keys())\n        keys2 = set(d2.keys())\n        common_keys = keys1 & keys2\n        unique1 = keys1 - common_keys\n        unique2 = keys2 - common_keys\n        \n        # The keys that are common between both maps must have their\n        # counts summed. The keys that are unique can just be copied\n        # to the new map.\n        common_tuples = [(k, d1[k] + d2[k]) for k in common_keys]\n        unique1_tuples = [(k, d1[k]) for k in unique1]\n        unique2_tuples = [(k, d2[k]) for k in unique2]\n        return dict(common_tuples + unique1_tuples + unique2_tuples)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"40e331b5-2c68-476a-933b-ebaa0c6df6bd"},{"version":"CommandV1","origId":503877321547587,"guid":"711b52cc-c2b1-45f0-b7ff-e632f2c4872a","subtype":"command","commandType":"auto","position":6.0,"command":"%md Next, we need to create an instance of an accumulator of this type.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"fb6b0540-5190-40bf-9b83-b700cca91778"},{"version":"CommandV1","origId":503877321547588,"guid":"2535c4b7-a3c0-4293-8cac-946df7a1fa91","subtype":"command","commandType":"auto","position":7.0,"command":"count_map = sc.accumulator({}, AccumWordCounts())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"71e1d77f-d917-41ec-aca7-0c944c881400"},{"version":"CommandV1","origId":503877321547589,"guid":"967bacb0-a813-44db-90cb-a77d9ab5ac9b","subtype":"command","commandType":"auto","position":8.0,"command":"%md Now, let's test it with a parallelized data set, which makes it easier to validate.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"97730c48-43ba-4608-9bd9-88157c677c48"},{"version":"CommandV1","origId":503877321547590,"guid":"8e8683d9-3fe6-4e70-a5e7-c3d69de170ea","subtype":"command","commandType":"auto","position":9.0,"command":"rdd = sc.parallelize([\"and\", \"and\", \"then\", \"the\", \"leaves\", \"grass\", \"green\", \"leaves\"])","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"af20a702-10cf-49df-aeea-6934dd4d219f"},{"version":"CommandV1","origId":503877321547591,"guid":"4c810065-68dc-4402-adff-3b01d5a61d11","subtype":"command","commandType":"auto","position":10.0,"command":"%md We'll use the distributed action `foreach` to count each word. In addition, we'll convert the RDD to another RDD with upper-cased words.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0c991cca-ed8a-4af4-b630-ed3643c69744"},{"version":"CommandV1","origId":503877321547592,"guid":"0a0bbadc-851e-4c12-889a-eef157533f82","subtype":"command","commandType":"auto","position":11.0,"command":"rdd2 = rdd.map(lambda word: word.upper())\n# Note that we have to add a dict here.\ndef update(word):\n  global count_map\n  count_map += {word: 1}\nrdd2.foreach(update)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"91991fab-3d07-464e-a2c3-5f1e02ebadfd"},{"version":"CommandV1","origId":503877321547593,"guid":"de459f8c-16c0-47cc-a0e1-6f64a93e0dfd","subtype":"command","commandType":"auto","position":12.0,"command":"for word in rdd2.collect():\n  print word","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c086c721-0f4f-4574-b98b-26f3670ca7fa"},{"version":"CommandV1","origId":503877321547594,"guid":"8ca5c952-e9cc-4009-b586-e44cdbb1ab9e","subtype":"command","commandType":"auto","position":13.0,"command":"%md What's the accumulator look like?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4bcd3778-4870-4014-82f6-4157b6433731"},{"version":"CommandV1","origId":503877321547595,"guid":"6f803f3d-bbca-4fc8-9d47-e28e84517cc9","subtype":"command","commandType":"auto","position":14.0,"command":"counts = count_map.value\nfor key in sorted(counts):\n  print \"{0} -> {1}\".format(key, counts[key])","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"9830c86a-cd75-47a7-a499-39e28eb7f623"},{"version":"CommandV1","origId":503877321547596,"guid":"6bdd663a-92fc-4840-8b7f-b5c0641e6cee","subtype":"command","commandType":"auto","position":15.0,"command":"%md ## Exercise\n\nYou're going to create an accumulator that can be used to keep track of unique occurrences of numbers. A `set` is a useful way to keep track of uniqueness.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"57666ff8-3d7d-438d-9a8c-0a499f4d4535"},{"version":"CommandV1","origId":503877321547597,"guid":"424d47ac-8ce3-4ab5-808d-a6f4ace6027b","subtype":"command","commandType":"auto","position":16.0,"command":"class AccumWordCounts(AccumulatorParam):\n    def zero(self, ...):\n      # FILL IN\n      pass\n\n    def addInPlace(self, ...):\n      # FILL IN\n      pass","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"89ff1867-a75b-438b-b1c7-4bc2ec680e69"},{"version":"CommandV1","origId":503877321547598,"guid":"5d35e86a-976f-42d5-92ec-11cecb1efc95","subtype":"command","commandType":"auto","position":17.0,"command":"unique_numbers = sc.accumulator(set(), AccumWordCounts())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e6295c5b-4ee5-454f-9d44-0a099faf690a"},{"version":"CommandV1","origId":503877321547599,"guid":"c1da27e3-2bff-4c29-9033-780ce0fca307","subtype":"command","commandType":"auto","position":18.0,"command":"# Check the initial value of the accumulator.\nunique_numbers.value","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"7332948e-9cc4-4d13-80aa-50f6968bdcfb"},{"version":"CommandV1","origId":503877321547600,"guid":"d94e689e-a7af-4c19-b1aa-ffb9fdb8bf1c","subtype":"command","commandType":"auto","position":19.0,"command":"%md To test your accumulator, we'll use 100,000 random numbers, with some guaranteed overlap. (We'd use 1,000,000, like the Scala lab, but Python is too slow...)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"33af2abf-453b-4a34-8cce-97dba81e22e9"},{"version":"CommandV1","origId":503877321547601,"guid":"d280aa17-d5f2-4ca0-8856-19ea824bfc9e","subtype":"command","commandType":"auto","position":20.0,"command":"numbers = [random.randint(0, 10000) for i in range(1, 100000)]","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1f2377d4-0e5f-4767-bbba-976f5a93c2af"},{"version":"CommandV1","origId":503877321547602,"guid":"5eaaeca7-f325-4b7d-9006-4a502cad1135","subtype":"command","commandType":"auto","position":21.0,"command":"rdd = sc.parallelize(numbers, 4)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"99b5861e-9457-4ae6-baf7-66b6a04fd6c8"},{"version":"CommandV1","origId":503877321547603,"guid":"e2ceb04a-051a-4573-ab62-b81e34e077ce","subtype":"command","commandType":"auto","position":22.0,"command":"%md Here's where you need to update the accumulator.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"df5a1f15-6e60-4ad4-8b1d-7842646369e9"},{"version":"CommandV1","origId":503877321547604,"guid":"1eb43ddc-9d06-4c03-9a4f-f599f9ca1fc4","subtype":"command","commandType":"auto","position":23.0,"command":"def update_set(i):\n  # FILL IN\n  pass\n\nrdd.foreach(...)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c6adc0ae-67be-4019-b0b3-18fbf29aa3da"},{"version":"CommandV1","origId":503877321547605,"guid":"7e5bcc73-b32d-4f13-b6d7-2d2e86819c6b","subtype":"command","commandType":"auto","position":24.0,"command":"print(\"Random numbers: {0}\\nUnique numbers: {1}\".format(\n  rdd.count(), len(unique_numbers.value))\n)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"bfbd6f95-d770-4556-bd54-cd74255cdcbc"},{"version":"CommandV1","origId":503877321547606,"guid":"3492ba07-842f-4bc8-9167-33d562239b4d","subtype":"command","commandType":"auto","position":25.0,"command":"","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f271d58b-9aae-494b-ae92-5d435c8198ad"}],"dashboards":[],"guid":"bf5dba6d-3b7f-4ac9-89cd-ccab3c835862","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}