{"version":"NotebookV1","origId":503877321547671,"name":"Solution","language":"scala","commands":[{"version":"CommandV1","origId":503877321547673,"guid":"42379ab8-64bd-45d1-941d-b4ab53c755c2","subtype":"command","commandType":"auto","position":1.0,"command":"%md\n\n#![Spark Logo](http://sameerf-dbc-labs.s3-website-us-west-2.amazonaws.com/ta_Spark-logo-small.png)\n## Solutions to Exercises: A Visual Guide to Spark's API","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5d408fe8-0b52-42de-961f-cec5a6c39b34"},{"version":"CommandV1","origId":503877321547674,"guid":"acb2a653-1eca-4de4-b80c-3cc3b2d21a17","subtype":"command","commandType":"auto","position":2.0,"command":"%md \n### Exercise 1: Solution\n\nChange the indicated line to produce squares of the original numbers.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0889f42f-a9f4-45cf-b2d7-ba41ca01beef"},{"version":"CommandV1","origId":503877321547675,"guid":"d743c3c9-0265-4501-97bb-4cc446847754","subtype":"command","commandType":"auto","position":3.0,"command":"val x = sc.parallelize(Array(1,2,3,4))\nval y = x.map(n => n * n)\nval yResults = y.collect()\nprintln(x.collect().toNiceString)\nprintln(yResults.toNiceString)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"08c61b8e-1ad6-4856-a823-c820bd674399"},{"version":"CommandV1","origId":503877321547676,"guid":"2fc32518-3052-42e2-9387-174aadccf2be","subtype":"command","commandType":"auto","position":4.0,"command":"%md \n### Exercise 2: Solution\nChange the sample to keep even numbers.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1c80c485-bfa7-41e7-a4fb-53d723951555"},{"version":"CommandV1","origId":503877321547677,"guid":"5a6b29b9-bf27-4dbd-a226-888036ff3471","subtype":"command","commandType":"auto","position":5.0,"command":"val x = sc.parallelize(Array(1,2,3))\nval y = x.filter(i => i % 2 == 0) // or x.filter(_ % 2 == 0)\nval yResults = y.collect()\nprintln(x.collect().toNiceString)\nprintln(yResults.toNiceString)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d4d9db44-54ed-4d02-aef1-f89e8c096a57"},{"version":"CommandV1","origId":503877321547678,"guid":"93a740fe-7f58-4404-b130-1bc69d69aec2","subtype":"command","commandType":"auto","position":6.0,"command":"%md\n\n### Exercise 3: Solution\n\nJoin the RDDs so that each company's name and stock price are collected into a tuple value, whose key is the company ticker symbol.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d0feeeb2-eb57-438f-b24f-72fb38556af9"},{"version":"CommandV1","origId":503877321547679,"guid":"99a6830f-55d4-44b5-a544-99c684746b14","subtype":"command","commandType":"auto","position":7.0,"command":"val x = sc.parallelize(Array((\"TWTR\", \"Twitter\"), (\"GOOG\", \"Google\"), (\"AAPL\", \"Apple\")))\nval y = sc.parallelize(Array((\"TWTR\", 36), (\"GOOG\", 532), (\"AAPL\", 127)))\n\n// Add code here to perform the appropriate join join and print the result\nval result = x.join(y).collect()\n\nprintln(result.toNiceString)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"9a678f66-643a-4078-b513-d293443691c2"},{"version":"CommandV1","origId":503877321547680,"guid":"f3b779e9-81d4-48f0-90c7-e841f170d4b4","subtype":"command","commandType":"auto","position":8.0,"command":"%md\n\n### Exercise 4: Solution\n\nCreate an RDD from this list, and then use `.keyBy` to create a pair RDD where:\n\n* the state abbreviation is the key, and \n* the city + state is the value (e.g., `(\"NY\", \"New York, NY\")`) ... \n\nFor extra credit, add a `.map` that strips out the redundant state abbreviation to yield pairs like `(\"NY\", \"New York\")`.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"09a2eafe-9333-423c-9724-4577e6479dd3"},{"version":"CommandV1","origId":503877321547681,"guid":"731d7210-7164-4848-aeaa-9584531e72fc","subtype":"command","commandType":"auto","position":9.0,"command":"val data = Array(\"New York, NY\", \"Philadelphia, PA\", \"Denver, CO\", \"San Francisco, CA\")\n\nval x = sc.parallelize(data)\nval pairs = x.keyBy(s => s.split(\", \").last)\nprintln(pairs.collect().toNiceString)\n\n// Extra credit\nval stateCityPairs = pairs.map { case (abbrev, full) =>\n  (abbrev, full.split(\", \").head) \n}\nprintln(stateCityPairs.collect().toNiceString)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"9ff19d8e-81ae-4404-a152-33e25e074eb1"},{"version":"CommandV1","origId":503877321547682,"guid":"0c13f7e4-d93a-4bbd-8111-8fac2e54266e","subtype":"command","commandType":"auto","position":10.0,"command":"%md \n### Exercise 5: Solution\n\nCan you use `.aggregate` to collect the inputs into a plain list, so that the output of your `.aggregate` is just like that of `.collect`? How about producing a plain total, just like `.sum`? What does that tell you about the amount of data returned from `.aggregate`?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"66fc5fdb-10c4-4d65-aeb9-46ac49dfea48"},{"version":"CommandV1","origId":503877321547683,"guid":"a67ce4e9-2f92-4fe8-91cd-616a89662876","subtype":"command","commandType":"auto","position":11.0,"command":"val x = sc.parallelize(Array(1, 2, 3, 4))\n\ndef seqOp(a: Array[Int], n: Int) = a :+ n\ndef combOp(a1: Array[Int], a2: Array[Int]) = a1 ++ a2\n\nval y = x.aggregate(Array.empty[Int])(seqOp, combOp)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5659ab17-f666-444a-8a83-bb905fde8af6"}],"dashboards":[],"guid":"85442014-2592-48d0-bbea-f010a4ce05a0","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}