{"version":"NotebookV1","origId":503877321547684,"name":"Lab","language":"scala","commands":[{"version":"CommandV1","origId":503877321547686,"guid":"8a777903-745e-4ec7-83e1-62c18c20a6bc","subtype":"command","commandType":"auto","position":1.0,"command":"%md\n\n#![Spark Logo](http://sameerf-dbc-labs.s3-website-us-west-2.amazonaws.com/ta_Spark-logo-small.png)\n# A Visual Guide to Spark's API\n## Time to complete: 30 minutes\n\nThis lab will introduce you to using Apache Spark 1.4 with the Scala API. We will explore common transformations and actions including:\n\n* Actions: collect, count, partitions, reduce, aggregate, max, min, sum, mean, variance, stdev, countByKey, saveAsTextFile\n* Transformations + MISC operations: map, filter, flatMap, groupBy, groupByKey, napPartitions, mapPartitionsWithIndex, sample, union, join, distinct, coalese, keyBy, partitionBy, zip\n\n\nNote that these images were inspired by Jeff Thomson's 67 \"PySpark images\".","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"49b0760d-bdc2-4d94-906b-bea8f501b1e1"},{"version":"CommandV1","origId":503877321547687,"guid":"51b3a17d-66e2-4736-8350-3680da5220fe","subtype":"command","commandType":"auto","position":2.0,"command":"// We'll be dealing with a lot of arrays in this lab. Unfortunately,\n// courtesy of the JVM, the default array-to-string representation is\n// something unhelpful (like \"[I@68d1251\", for an array of integers).\n// The following import adds a toNiceString function to (most) arrays,\n// which helps get around this problem.\nimport com.databricks.training.helpers.Enrichments.EnrichedArray\n\n// Used as a separator between printed output and REPL results.\nval Separator = \"-\" * 40\n\n// For tests\nval test = new com.databricks.training.test.Test","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"01c11798-f7ee-4e7a-895f-635bff02ecd4"},{"version":"CommandV1","origId":503877321547688,"guid":"dab8e20f-14e8-489e-9c81-b4f29570af56","subtype":"command","commandType":"auto","position":3.0,"command":"%md ###Collect\n\nAction / To Driver: Return all items in the RDD to the driver in a single list\n\nStart with this action, since it is used in all of the examples.\n\n![](http://i.imgur.com/DUO6ygB.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e67a1219-06b4-48ec-ab95-9070165754ac"},{"version":"CommandV1","origId":503877321547689,"guid":"46d1bed8-96c7-4119-9e2a-bbaf04b72111","subtype":"command","commandType":"auto","position":4.0,"command":"val x = sc.parallelize(Array(1, 2, 3), 2)\nval y = x.collect()\n\nprintln(x.glom().collect().toNiceString)\nprintln(y.toNiceString)\nprintln(Separator) // separates our output from the REPL's output","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5eef42bc-7473-4fb5-b51d-50cf5bc45ae9"},{"version":"CommandV1","origId":503877321547690,"guid":"fe7aad21-7772-4718-8f0a-4741f4b4d6f2","subtype":"command","commandType":"auto","position":5.0,"command":"%md ## Transformations\n\nCreate a new RDD from one or more RDDs","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"74fba2a7-24b7-4e24-8653-ef0616101f4f"},{"version":"CommandV1","origId":503877321547691,"guid":"b56e358c-19f5-40fb-93da-e946dd46a64c","subtype":"command","commandType":"auto","position":6.0,"command":"%md ###Map\n\nTransformation / Narrow: Return a new RDD by applying a function to each element of this RDD\n\n![](http://i.imgur.com/PxNJf0U.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5fab65bf-06b7-458d-bc44-5dc04e743ba0"},{"version":"CommandV1","origId":503877321547692,"guid":"260be96a-1cf6-46fe-9b34-049f21753b15","subtype":"command","commandType":"auto","position":7.0,"command":"val x = sc.parallelize(Array(\"b\", \"a\", \"c\"))\nval y = x.map(z => (z, 1))\nprintln(x.collect().toNiceString)\nprintln(y.collect().toNiceString)\nprintln(Separator)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"93d7c725-5315-416f-894f-ad43d4151da4"},{"version":"CommandV1","origId":503877321547693,"guid":"419a923e-6e69-4ccf-9fa9-bc69b915f93b","subtype":"command","commandType":"auto","position":8.0,"command":"%md \n### ![](http://i.imgur.com/fsPz68O.png) Try it!\n\n**Exercise 1:** Change the indicated line to produce squares of the original numbers.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"55989c5e-2efe-45de-b31e-a126173b1e23"},{"version":"CommandV1","origId":503877321547694,"guid":"3ee95580-5bb2-4a10-b3ea-0da78777936c","subtype":"command","commandType":"auto","position":9.0,"command":"// Lab exercise:\n\nval x = sc.parallelize(Array(1,2,3,4))\nval y = x.map(n => n) // CHANGE the lambda to take a number and returns its square\nval yResults = y.collect()\nprintln(x.collect().toNiceString)\nprintln(yResults.toNiceString)\n\nprintln(Separator)\ntest.assertArrayEquals(yResults, Array(1, 4, 9, 16), \"Incorrect result.\")\nprintln(Separator)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"97e527ea-f423-4b53-af19-84fc54d8518c"},{"version":"CommandV1","origId":503877321547695,"guid":"ec2831db-6030-41a1-b7b9-ee8d236ab9be","subtype":"command","commandType":"auto","position":10.0,"command":"%md #### Filter\n\nTransformation / Narrow: Return a new RDD containing only the elements that satisfy a predicate\n\n![](http://i.imgur.com/GFyji4U.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"53b1f2fd-0d83-413b-8c8c-4e1a1043c874"},{"version":"CommandV1","origId":503877321547696,"guid":"1c15a030-e2ae-4fa1-9636-cb860e2d208d","subtype":"command","commandType":"auto","position":11.0,"command":"val x = sc.parallelize(1 to 20)\nval y = x.filter(x => x % 2 == 1) // keep odd values \nprintln(x.collect().toNiceString)\nprintln(y.collect().toNiceString)\nprintln(Separator)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8d34c695-668b-41cd-a677-06c8b789471c"},{"version":"CommandV1","origId":503877321547697,"guid":"883bb96d-f8fb-48f6-9c45-c1e51951a1ca","subtype":"command","commandType":"auto","position":12.0,"command":"%md\n### ![](http://i.imgur.com/fsPz68O.png) Try it!\n\n**Exercise 2:** Change the sample to keep even numbers.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"194ba412-fd12-4714-a1b0-c155f5433af6"},{"version":"CommandV1","origId":503877321547698,"guid":"bf3e74dd-d1e4-4eb0-a4fe-a2dd6799caaa","subtype":"command","commandType":"auto","position":13.0,"command":"// Lab exercise:\nval x = sc.parallelize(Array(1,2,3))\nval y = x.filter( /* FILL IN */ ) // add a lambda parameter to keep only even numbers\nval yResults = y.collect()\nprintln(x.collect().toNiceString)\nprintln(yResults.toNiceString)\n\nprintln(Separator)\ntest.assertArrayEquals(yResults, Array(2), \"Incorrect result\")\nprintln(Separator)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4e690b88-8d79-4224-bc07-e075dc5d8381"},{"version":"CommandV1","origId":503877321547699,"guid":"db36ecbc-b5a1-406a-8eea-d63ac72829df","subtype":"command","commandType":"auto","position":14.0,"command":"%md ### FlatMap\n\nTransformation / Narrow: Return a new RDD by first applying a function to all elements of this RDD, and then flattening the results\n\n![](http://i.imgur.com/TsSUex8.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"fc59caf0-fca8-4d29-b80e-979d29ad7bed"},{"version":"CommandV1","origId":503877321547700,"guid":"80a34c72-af02-494e-8a24-7b6889de8391","subtype":"command","commandType":"auto","position":15.0,"command":"val x = sc.parallelize(Array(1,2,3))\nval y = x.flatMap(x => Array(x, x*100, 42))\nprintln(x.collect().toNiceString)\nprintln(y.collect().toNiceString)\nprintln(Separator)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"649f95b4-024c-4e0e-a01b-434fe30ac4d3"},{"version":"CommandV1","origId":503877321547701,"guid":"90dd922c-8dcf-430c-ae4d-2e282b952b2c","subtype":"command","commandType":"auto","position":16.0,"command":"%md ### GroupBy\n\nTransformation / Wide: Group the data in the original RDD. Create pairs where the key is the output of a user function, and the value is all items for which the function yields this key.\n\n![](http://i.imgur.com/gdj0Ey8.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a460e3c9-2f19-435f-b3a3-c3520e8faafe"},{"version":"CommandV1","origId":503877321547702,"guid":"7a2e98f1-9935-494c-8a42-cb68dcb6bc94","subtype":"command","commandType":"auto","position":17.0,"command":"val x = sc.parallelize(Array(\"John\", \"Fred\", \"Anna\", \"James\"))\nval y = x.groupBy(w => w(0))\nprintln(y.collect().toNiceString)\nprintln(Separator)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3c11a00f-e1c0-490e-becd-0e760d3b7877"},{"version":"CommandV1","origId":503877321547703,"guid":"765cc2c0-340e-45da-b39d-2cdd2cd0b17d","subtype":"command","commandType":"auto","position":18.0,"command":"%md ### GroupByKey\n\nTransformation / Wide: Group the values for each key in the original RDD. Create a new pair where the original key corresponds to this collected group of values.\n\n![](http://i.imgur.com/TlWRGr2.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d1cd48f5-b1fd-4604-9985-969360cc74e5"},{"version":"CommandV1","origId":503877321547704,"guid":"03954fb9-950b-45b5-98c5-ed026bc068e0","subtype":"command","commandType":"auto","position":19.0,"command":"val x = sc.parallelize(Array(('B', 5), ('B', 4), ('A', 3), ('A', 2),('A', 1)))\nval y = x.groupByKey()\nprintln(x.collect().toNiceString)\nprintln(y.collect().toNiceString)\nprintln(Separator)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c13dfa11-8a2a-4cd5-9067-cd472ef52249"},{"version":"CommandV1","origId":503877321547705,"guid":"82dd2dfe-3688-444a-a0de-73ab2057e0ee","subtype":"command","commandType":"auto","position":20.0,"command":"%md ### MapPartitions\n\nTransformation / Narrow: Return a new RDD by applying a function to each partition of this RDD\n\n![](http://i.imgur.com/dw8QOLX.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"032af1d8-690e-42f0-ba07-79b3e70789c7"},{"version":"CommandV1","origId":503877321547706,"guid":"4a33086c-b62c-4e47-bf92-12ae3c925e02","subtype":"command","commandType":"auto","position":21.0,"command":"val x = sc.parallelize(1 to 9, 2)\nval y = x.mapPartitions { iterator: Iterator[Int] => Iterator(iterator.sum) }\n\nprintln(x.glom().collect().toNiceString)\nprintln(y.glom().collect().toNiceString)\nprintln(Separator)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"547af747-328b-425f-8819-898df1306b1e"},{"version":"CommandV1","origId":503877321547707,"guid":"cb6824b6-5b96-4fed-81be-bb6baae431c1","subtype":"command","commandType":"auto","position":22.0,"command":"%md ### MapPartitionsWithIndex\n\nTransformation / Narrow: Return a new RDD by applying a function to each partition of this RDD, while tracking the index of the original partition\n\n![](http://i.imgur.com/3cGvAF7.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"10243d6c-fb83-4449-ad90-20a5fa831fd2"},{"version":"CommandV1","origId":503877321547708,"guid":"d7396ca2-c908-4bad-9dc6-b562dbd37456","subtype":"command","commandType":"auto","position":23.0,"command":"val x = sc.parallelize(1 to 9, 2)\n\nval y = x.mapPartitionsWithIndex { (partitionIndex, iterator) =>\n  Iterator(partitionIndex, iterator.sum)\n}\n\nprintln(x.glom().collect().toNiceString)\nprintln(y.glom().collect().toNiceString)\nprintln(Separator)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"83707b8d-2630-47ba-82ae-bf88f19abe63"},{"version":"CommandV1","origId":503877321547709,"guid":"9b70fbf1-263c-4426-b67a-ba92245147cb","subtype":"command","commandType":"auto","position":24.0,"command":"%md ### Sample\n\nTransformation / Narrow: Return a new RDD containing a statistical sample of the original RDD\n\n![](http://i.imgur.com/LJ56nQq.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c545db54-fd70-42cf-9dad-2cbb8f556100"},{"version":"CommandV1","origId":503877321547710,"guid":"5103b979-6314-41c4-9a46-07e457622fa7","subtype":"command","commandType":"auto","position":25.0,"command":"val x = sc.parallelize(1 to 20, 2)\nval y = x.sample(false, 0.4, 42)\nprintln(x.collect().toNiceString)\nprintln(y.collect().toNiceString)\nprintln(Separator)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"71a7bc93-5d91-4e0b-9a2a-736f6832b202"},{"version":"CommandV1","origId":503877321547711,"guid":"d6fb3846-4687-42b4-8477-7d8a81c4c23c","subtype":"command","commandType":"auto","position":26.0,"command":"%md ### Union\n\nTransformation / Narrow: Return a new RDD containing all items from two original RDDs. Duplicates are not culled.\n\n![](http://i.imgur.com/XFpbqZ8.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"26181e43-df7e-4d3e-b624-1ff1de67b326"},{"version":"CommandV1","origId":503877321547712,"guid":"9f307ec7-428a-4cb3-accf-0df9dbbb95af","subtype":"command","commandType":"auto","position":27.0,"command":"val x = sc.parallelize(Array(1, 2, 3), 2)\nval y = sc.parallelize(Array(3, 4), 1)\nval z = x.union(y)\nprintln(z.glom().collect().toNiceString)\nprintln(Separator)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"9f0b7b2c-cbf6-4450-8f96-53dafd5034a9"},{"version":"CommandV1","origId":503877321547713,"guid":"a48945df-ab70-4fac-ad69-b67ca58f5c20","subtype":"command","commandType":"auto","position":28.0,"command":"%md ### Join\n\nTransformation / Wide: Return a new RDD containing all pairs of elements having the same key in the original RDDs\n\n![](http://i.imgur.com/YXL42Nl.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4f712070-42e3-4847-ad14-4169f904582c"},{"version":"CommandV1","origId":503877321547714,"guid":"b7516f3a-7ea0-44eb-bc2c-160560e5b42b","subtype":"command","commandType":"auto","position":29.0,"command":"val x = sc.parallelize(Array((\"a\", 1), (\"b\", 2)))\nval y = sc.parallelize(Array((\"a\", 3), (\"a\", 4), (\"b\", 5)))\nval z = x.join(y)\nprintln(z.collect().toNiceString)\nprintln(Separator)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0e60fe68-98d9-466f-b44a-b5dae1c4b0a4"},{"version":"CommandV1","origId":503877321547715,"guid":"767de012-48b3-4ffb-a736-3a0c4403ab3d","subtype":"command","commandType":"auto","position":30.0,"command":"%md \n### ![](http://i.imgur.com/fsPz68O.png) Try it!\n\n**Exercise 3:** Join the RDDs so that each company's name and stock price are collected into a tuple value, whose key is the company ticker symbol.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c497e24e-8c62-4255-b608-96300d5fd3dd"},{"version":"CommandV1","origId":503877321547716,"guid":"5caee857-f222-407c-8830-bee5e0629c51","subtype":"command","commandType":"auto","position":31.0,"command":"val x = sc.parallelize(Array((\"TWTR\", \"Twitter\"), (\"GOOG\", \"Google\"), (\"AAPL\", \"Apple\")))\nval y = sc.parallelize(Array((\"TWTR\", 36), (\"GOOG\", 532), (\"AAPL\", 127)))\n\n// Add code here to perform the appropriate join join and print the result\nval result = ...\n\nprintln(result.toNiceString)\nprintln(Separator)\ntest.assertArrayEquals(result.sorted, Array((\"AAPL\", (\"Apple\", 127)), (\"GOOG\", (\"Google\", 532)), (\"TWTR\", (\"Twitter\", 36))), \"Incorrect result.\")\nprintln(Separator)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"9007c3ee-ff82-4fc4-aa29-4629a36d83a4"},{"version":"CommandV1","origId":503877321547717,"guid":"9cb9afff-4f36-4fc7-acca-6b1b7cabb882","subtype":"command","commandType":"auto","position":32.0,"command":"%md ### Distinct\n\nTransformation / Wide: Return a new RDD containing distinct items from the original RDD (omitting all duplicates)\n\n![](http://i.imgur.com/Vqgy2a4.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"7bf0a0ff-2c35-4f4f-adef-5b8371c2f412"},{"version":"CommandV1","origId":503877321547718,"guid":"398ec905-4f6c-478f-a0c1-3bef926582cb","subtype":"command","commandType":"auto","position":33.0,"command":"val x = sc.parallelize(Array(1, 2, 3, 3, 4))\nval y = x.distinct()\n\nprintln(y.collect().toNiceString)\nprintln(Separator)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f3e0cc64-835e-4d69-9bd2-67b8e7f76670"},{"version":"CommandV1","origId":503877321547719,"guid":"625e4139-4577-401b-bc39-18111729de6e","subtype":"command","commandType":"auto","position":34.0,"command":"%md ### Coalesce\n\nTransformation / Narrow or Wide: Return a new RDD which is reduced to a smaller number of partitions\n\n![](http://i.imgur.com/woQiM7E.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3ea53ff6-29d0-4e2f-92a7-d70d95881f54"},{"version":"CommandV1","origId":503877321547720,"guid":"ed49891d-f77f-4c38-bb20-01207187cf6f","subtype":"command","commandType":"auto","position":35.0,"command":"val x = sc.parallelize(Array(1, 2, 3, 4, 5), 3)\nval y = x.coalesce(2)\nprintln(x.glom().collect().toNiceString)\nprintln(y.glom().collect().toNiceString)\nprintln(Separator)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"9fec4b32-aadb-4477-9c3c-040f27fcea94"},{"version":"CommandV1","origId":503877321547721,"guid":"ed2a3f5b-39bd-47ae-bb44-c81699565052","subtype":"command","commandType":"auto","position":36.0,"command":"%md ### KeyBy\n\nTransformation / Narrow: Create a Pair RDD, forming one pair for each item in the original RDD. The pair’s key is calculated from the value via a user-supplied function.\n\n![](http://i.imgur.com/nqYhDW5.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4c754000-2aeb-49a9-8d0f-ec6765e9c05e"},{"version":"CommandV1","origId":503877321547722,"guid":"0434a503-6221-4f84-8533-b9d163fad612","subtype":"command","commandType":"auto","position":37.0,"command":"val x = sc.parallelize(Array(\"John\", \"Fred\", \"Anna\", \"James\"))\nval y = x.keyBy(s => s(0))\nprintln(y.collect().toNiceString)\nprintln(Separator)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"9e51cbe7-dd32-4ce1-89a5-989888d883d5"},{"version":"CommandV1","origId":503877321547723,"guid":"3c9edb04-a7d0-4fdb-9faf-c53725d0d113","subtype":"command","commandType":"auto","position":38.0,"command":"%md \n### ![](http://i.imgur.com/fsPz68O.png) Try it!\n\n**Exercise 4:** Create an RDD from this list, and then use `.keyBy` to create a pair RDD where:\n\n* the state abbreviation is the key, and \n* the city + state is the value (e.g., `(\"NY\", \"New York, NY\")`) ... \n\nFor extra credit, add a `.map` that strips out the redundant state abbreviation to yield pairs like `(\"NY\", \"New York\")`.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"cfcdbb4e-0e1f-49d7-9deb-ae8ca79ccef8"},{"version":"CommandV1","origId":503877321547724,"guid":"c9bcb62e-4785-405d-9687-7146f38657b3","subtype":"command","commandType":"auto","position":39.0,"command":"val data = Array(\"New York, NY\", \"Philadelphia, PA\", \"Denver, CO\", \"San Francisco, CA\")\n\n// Add code to parallelize the list to an RDD\n// call .keyBy on the RDD to create an RDD of pairs\nval x = sc.parallelize(data)\n/* FILL THIS IN */\n\nprintln(Separator)\nval expected = Array((\"CA\", \"San Francisco, CA\"), (\"CO\",\"Denver, CO\"), (\"NY\", \"New York, NY\"), (\"PA\", \"Philadelphia, PA\"))\ntest.assertArrayEquals(result.sorted, expected, \"Incorrect results.\")\nprintln(Separator)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1c07b158-d168-4cee-8512-f2a39e75c543"},{"version":"CommandV1","origId":503877321547725,"guid":"106e7b65-135f-4bb5-9d61-a34802360336","subtype":"command","commandType":"auto","position":40.0,"command":"%md ### PartitionBy\n\nTransformation / Wide: Return a new RDD with the specified number of partitions, placing original items into the partition returned by a user supplied partitioner.\n\n![](http://i.imgur.com/QHDWwYv.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"fac6e827-ec70-412c-921f-de2632b80ab5"},{"version":"CommandV1","origId":503877321547726,"guid":"7cbc347b-56ce-43eb-8b98-f86612ca3a7c","subtype":"command","commandType":"auto","position":41.0,"command":"val x = sc.parallelize(Array(('J', \"James\"), ('F', \"Fred\"), ('A', \"Anna\"), ('J', \"John\")), 3)\n\nclass MyPartitioner extends org.apache.spark.Partitioner with Serializable {\n  def getPartition(key: Any) = key match {\n    case c: Char => if (c < 'H') 0 else 1\n    case _       => 0\n  }\n  val numPartitions = 2\n}\n\nval y = x.partitionBy(new MyPartitioner)\nprintln(x.glom().collect().toNiceString)\nprintln(y.glom().collect().toNiceString)\nprintln(Separator)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"47152045-eb65-4e98-8501-30a8ac609383"},{"version":"CommandV1","origId":503877321547727,"guid":"30293e0f-27ee-4cca-90f0-0249dd819c1b","subtype":"command","commandType":"auto","position":42.0,"command":"%md ### Zip\n\nTransformation / Narrow: Return a new RDD containing pairs whose key is the item in the original RDD, and whose value is that item’s corresponding element (same partition, same index) in a second RDD\n\n![](http://i.imgur.com/5J0lg6g.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4d3fe513-2132-4657-873a-867e7d28e5b5"},{"version":"CommandV1","origId":503877321547728,"guid":"40632402-33c5-47a2-9eb6-2d8438ea7fa9","subtype":"command","commandType":"auto","position":43.0,"command":"val x = sc.parallelize(Array(1, 2, 3))\nval y = x.map(n => n * n)\nval z = x.zip(y)\n\nprintln(z.collect().toNiceString)\nprintln(Separator)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4cc6e40b-c5af-41c9-9863-f48ad803a991"},{"version":"CommandV1","origId":503877321547729,"guid":"79b5e6ef-07a3-42c2-8937-cbbca7a4913a","subtype":"command","commandType":"auto","position":44.0,"command":"%md ## Actions\n\nCalculate a result (e.g., numeric data or creata a non-RDD data structure), or produce a side effect, such as writing output to disk","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"aebf6d81-1a44-402d-99fd-8efb8b86be21"},{"version":"CommandV1","origId":503877321547730,"guid":"156e9c39-1d7c-4b36-8b7e-6b1e86b78714","subtype":"command","commandType":"auto","position":45.0,"command":"%md ### partitions\n\nAction / To Driver: Return an array of partition descriptors, representing the partitions in an RDD.\n\n![](http://i.imgur.com/9yhDsVX.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f0912619-5a01-40af-aaed-74b2300f8084"},{"version":"CommandV1","origId":503877321547731,"guid":"1f2da06d-4117-4383-b9b9-d0a98fd35247","subtype":"command","commandType":"auto","position":46.0,"command":"val x = sc.parallelize(Array(1, 2, 3), 2)\nval y = x.partitions.length\n\nprintln(x.glom().collect().toNiceString)\nprintln(s\"Total partitions: $y\")\nprintln(Separator)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"604625cb-226a-4899-82cf-ab8f1edc99ad"},{"version":"CommandV1","origId":503877321547732,"guid":"0023f699-4007-4573-b0e3-927689d6d16b","subtype":"command","commandType":"auto","position":47.0,"command":"%md ### Reduce\n\nAction / To Driver: Aggregate all the elements of the RDD by applying a user function pairwise to elements and partial results, and return a result to the driver\n\n![](http://i.imgur.com/R72uzwX.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"014d2a1a-abe9-449e-a007-2507858475c4"},{"version":"CommandV1","origId":503877321547733,"guid":"d6dac32b-e402-491b-8099-8a576ecf733c","subtype":"command","commandType":"auto","position":48.0,"command":"val x = sc.parallelize(1 to 4)\nval y = x.reduce { (a, b) => a + b } // or: x.reduce(_ + _)\n\nprintln(x.collect().toNiceString)\nprintln(s\"sum=$y\")\nprintln(Separator)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e3f5866d-47f5-4de0-b5b7-08477586311e"},{"version":"CommandV1","origId":503877321547734,"guid":"ef7c900f-d851-414a-bca3-6bbbc574f0b7","subtype":"command","commandType":"auto","position":49.0,"command":"%md ### Aggregate\n\nAction / To Driver: Aggregate all the elements of the RDD by: \n  - applying a user function to combine elements with user-supplied objects, \n  - then combining those user-defined results via a second user function, \n  - and finally returning a result to the driver.\n  \n![](http://i.imgur.com/7MLnYeh.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4982a9a1-b723-4a8e-ac7f-2c68288bfeb4"},{"version":"CommandV1","origId":503877321547735,"guid":"84e62e99-5259-4db0-b757-30834020b4bc","subtype":"command","commandType":"auto","position":50.0,"command":"%md\nWhat we're doing below is aggregating an array of integers into a tuple, consisting of the\n(possibly reordered) original array _and_ the sum of the array's values.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"66268157-36c4-48ee-9b5e-2934e0afe09d"},{"version":"CommandV1","origId":503877321547736,"guid":"66309b4e-a3f1-4e8a-82d8-f42e187cba2d","subtype":"command","commandType":"auto","position":51.0,"command":"def seqOp(data: (Array[Int], Int), item: Int) = {\n  val (array, item1) = data\n  (array :+ item, item1 + item)\n}\n\ndef combOp(d1: (Array[Int], Int), d2: (Array[Int], Int)) = {\n  val (a1, i1) = d1\n  val (a2, i2) = d2\n  \n  (a1 ++ a2, i1 + i2)\n}\n\nval x = sc.parallelize(Array(1, 2, 3, 4))\n\nval (array, total) = x.aggregate((Array.empty[Int], 0))(seqOp, combOp)\nprintln(s\"(${array.toNiceString}, $total)\")\nprintln(Separator)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"df9dd865-7418-40c8-a8c2-0eaa8b5b087f"},{"version":"CommandV1","origId":503877321547737,"guid":"b4ca059a-5e88-4a66-a590-e5ec62310487","subtype":"command","commandType":"auto","position":52.0,"command":"%md \n\n### ![](http://i.imgur.com/fsPz68O.png) Try it!\n\n**Exercise 5:** Can you use `.aggregate` to collect the inputs into a plain list, so that the output of your `.aggregate` is just like that of `.collect`? How about producing a plain total, just like `.sum`? What does that tell you about the amount of data returned from `.aggregate`?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"788ad7a2-09e1-4679-825c-a4dc4019a9eb"},{"version":"CommandV1","origId":503877321547738,"guid":"52d4b7b2-66cb-42a4-b546-fd16ad5c6142","subtype":"command","commandType":"auto","position":53.0,"command":"val x = sc.parallelize(Array(1, 2, 3, 4))\n\n// Define appropriate seqOp and combOp\n\ndef seqOp(...) = ...\ndef combOp(...) = ...\n\ny = x.aggregate(  ) //add correct parameters\n\n// ----\n\nval result = x.collect()\n// These two lines should produce the same thing (possibly with \n// the contents in different orders).\nprintln(result.toNiceString)\nprintln(y.toNiceString)\n\nprintln(Separator)\ntest.assertArrayEquals(result.sorted, y.sorted, \"Incorrect result.\")\nprintln(Separator)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"7cbc92a8-5383-4d7b-ab90-7d3088d40fae"},{"version":"CommandV1","origId":503877321547739,"guid":"a12f54fe-33ee-4ed6-a120-c7d743e185a6","subtype":"command","commandType":"auto","position":54.0,"command":"%md ### Max, Min, Sum, Mean, Variance, Stdev\n\nAction / To Driver: Compute the respective function (maximum value, minimum value, sum, mean, variance, or standard deviation) from a numeric RDD\n\n![](http://i.imgur.com/HUCtib1.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1d37a3ff-7126-49c5-8b35-76ab7332f70e"},{"version":"CommandV1","origId":503877321547740,"guid":"b966a2ef-b1ad-4542-ab3a-19d54e98eaa5","subtype":"command","commandType":"auto","position":55.0,"command":"val x = sc.parallelize(Array(2, 4, 1))\nprintln(x.collect().toNiceString)\nprintln(s\"max=${x.max()}, min=${x.min()}, sum=${x.sum()}, mean=${x.mean()}, variance=${x.variance()}, stdev=${x.stdev()}\")\nprintln(Separator)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"46bb7dc7-e5b0-46d6-8f6d-44e3ca9385ec"},{"version":"CommandV1","origId":503877321547741,"guid":"c859bdd6-da97-40cd-a74f-2a3a0e37f50f","subtype":"command","commandType":"auto","position":56.0,"command":"%md ### CountByKey\n\nAction / To Driver: Return a map of keys and counts of their occurrences in the RDD\n\n![](http://i.imgur.com/jvQTGv6.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0c8ece3d-9e23-4046-bea7-31ebd2c043de"},{"version":"CommandV1","origId":503877321547742,"guid":"53c1f86c-72ec-4f34-aac8-5f13eb5dae36","subtype":"command","commandType":"auto","position":57.0,"command":"val x = sc.parallelize(Array(('J', \"James\"), ('F', \"Fred\"), ('A', \"Anna\"), ('J', \"John\")))\nval y = x.countByKey()\n\nprintln(y)\nprintln(Separator)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"22bb406e-8582-4fc8-946e-6ae49d1fe4b4"},{"version":"CommandV1","origId":503877321547743,"guid":"84a3b044-6595-4e0a-9afb-bf60d88ece1f","subtype":"command","commandType":"auto","position":58.0,"command":"%md ### SaveAsTextFile\n\nAction / Distributed: Save the RDD to the filesystem indicated in the path\n\n![](http://i.imgur.com/Tb2Q9mG.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1bae42bc-0f0b-4aeb-9404-8493aa6751cf"},{"version":"CommandV1","origId":503877321547744,"guid":"adf98bfb-38c5-41ff-a0f0-a95f0ee6ede5","subtype":"command","commandType":"auto","position":59.0,"command":"// NOTE: We're using a random number here, just to ensure that there are no clashes.\nimport scala.util.Random\nval id = Random.nextInt(100)\nval Dir = \"/tmp/demo\"\nval Output = s\"$Dir/$id\"\n\ndbutils.fs.rm(Output, recurse=true)\nval x = sc.parallelize(1 to 100, 4)\nx.saveAsTextFile(Output)\n\nprintln(Separator)\nprintln(\"Contents of directory:\")\ndbutils.fs.ls(Output).foreach(fileInfo => println(fileInfo.name))\n\nval y = sc.textFile(Output)\nprintln(Separator)\nprintln(\"Contents of text file:\")\nprintln(y.collect().toNiceString)\nprintln(Separator)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2b385543-0d54-42af-ba72-4e6ee6b99565"},{"version":"CommandV1","origId":503877321547745,"guid":"961dec6c-25e2-4775-8acd-c86998bd9a37","subtype":"command","commandType":"auto","position":60.0,"command":"","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"02543815-473f-4293-a1ea-307e4a035763"}],"dashboards":[],"guid":"3228c435-c7e6-4644-8434-06bea0435d45","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}