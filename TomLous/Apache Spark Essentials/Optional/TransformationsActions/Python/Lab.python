{"version":"NotebookV1","origId":503877321547747,"name":"Lab","language":"python","commands":[{"version":"CommandV1","origId":503877321547749,"guid":"69d808a5-6226-41f8-952b-09ce0b864ecb","subtype":"command","commandType":"auto","position":1.0,"command":"%md\n\n#![Spark Logo](http://sameerf-dbc-labs.s3-website-us-west-2.amazonaws.com/ta_Spark-logo-small.png)\n## A Visual Guide to Spark's API\n### Time to complete: 30 minutes\n#### This lab will introduce you to using Apache Spark 1.4 with the Python API. We will explore common transformations and actions including\n* Actions: Collect, Count, GetNumPartitions, Reduce, Aggregate, Max, Min, Sum, Mean, Variance, Stdev, CountByKey, SaveAsTextFile, \n* Transformations + MISC operations: Map, Filter, FlatMap, GroupBy, GroupByKey, MapPartitions, MapPartitionsWithIndex, Sample, Union, Join, Distinct, Coalese, KeyBy, PartitionBy, Zip\n\n\nNote that these images were inspired by Jeff Thomson's 67 \"PySpark images\".","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"330b44b4-46ba-453e-ad5f-882a1874329c"},{"version":"CommandV1","origId":503877321547750,"guid":"9b81e6d9-bc49-490c-9140-5162aa533e87","subtype":"command","commandType":"auto","position":2.0,"command":"%md ###Collect\n\nAction / To Driver: Return all items in the RDD to the driver in a single list\n\nStart with this action, since it is used in all of the examples.\n\n![](http://i.imgur.com/DUO6ygB.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c178bc6f-e06d-4e26-8212-1b245532cf78"},{"version":"CommandV1","origId":503877321547751,"guid":"04b2ef97-2257-4e54-be76-4ec619d41e53","subtype":"command","commandType":"auto","position":3.0,"command":"x = sc.parallelize([1,2,3], 2)\ny = x.collect()\nprint(x.glom().collect()) # glom() flattens elements on the same partition\nprint(y)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"368c3a9b-bbb3-4695-ac8d-f9734bf67c0b"},{"version":"CommandV1","origId":503877321547752,"guid":"79dd8878-034a-44ae-be70-ed7d1c1ae1be","subtype":"command","commandType":"auto","position":4.0,"command":"%md ## Transformations\n\nCreate a new RDD from one or more RDDs","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"eeef40f8-74e1-44aa-841c-339135f3d5a9"},{"version":"CommandV1","origId":503877321547753,"guid":"4771e249-6771-4f2b-ad57-169ff09576ce","subtype":"command","commandType":"auto","position":5.0,"command":"%md ###Map\n\nTransformation / Narrow: Return a new RDD by applying a function to each element of this RDD\n\n![](http://i.imgur.com/PxNJf0U.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3b1826f5-09ac-4cf6-865d-4ad374ee234c"},{"version":"CommandV1","origId":503877321547754,"guid":"5c09a0bb-8163-4875-a92b-793a88b4158f","subtype":"command","commandType":"auto","position":6.0,"command":"x = sc.parallelize([\"b\", \"a\", \"c\"])\ny = x.map(lambda z: (z, 1))\nprint(x.collect())\nprint(y.collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"83786eb4-8777-42bf-a33d-e4a462d770fe"},{"version":"CommandV1","origId":503877321547755,"guid":"0796d8b9-2862-4f9a-b4d5-cbe617c11334","subtype":"command","commandType":"auto","position":7.0,"command":"%md ####**Try it!** change the indicated line to produce squares of the original numbers","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"76378db9-0cd5-46f4-8ff7-271ca772e66e"},{"version":"CommandV1","origId":503877321547756,"guid":"d6daec97-45f8-43d4-8d27-b3f3c71540f5","subtype":"command","commandType":"auto","position":8.0,"command":"#Lab exercise:\n\nx = sc.parallelize([1,2,3,4])\ny = x.map(lambda n: n) #CHANGE the lambda to take a number and returns its square\nprint(x.collect())\nprint(y.collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8d80f29f-69b0-48fd-a651-5653913dee91"},{"version":"CommandV1","origId":503877321547757,"guid":"104719a5-4399-4dd0-857b-b561d4cbdf7d","subtype":"command","commandType":"auto","position":9.0,"command":"%md #### Filter\n\nTransformation / Narrow: Return a new RDD containing only the elements that satisfy a predicate\n\n![](http://i.imgur.com/GFyji4U.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6fd4d0b1-5e70-4e96-9592-597793c5a4d7"},{"version":"CommandV1","origId":503877321547758,"guid":"be5c7e18-dbe3-4c3b-a0f6-6eac447a645c","subtype":"command","commandType":"auto","position":10.0,"command":"x = sc.parallelize([1,2,3])\ny = x.filter(lambda x: x%2 == 1) #keep odd values \nprint(x.collect())\nprint(y.collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"cef8de15-3003-427e-ac8e-f69957d92c0b"},{"version":"CommandV1","origId":503877321547759,"guid":"0e63d00d-987f-4b3a-b5b4-e2357f5be099","subtype":"command","commandType":"auto","position":11.0,"command":"%md ####**Try it!** Change the sample to keep even numbers","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b7f0c1ae-42c4-4859-8e70-5a85747e71d6"},{"version":"CommandV1","origId":503877321547760,"guid":"b2e73fc8-33c0-4f57-930a-8c9cf6bf4251","subtype":"command","commandType":"auto","position":12.0,"command":"#Lab exercise:\nx = sc.parallelize([1,2,3])\ny = x.filter(  ) #add a lambda parameter to keep only even numbers\nprint(x.collect())\nprint(y.collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"fcc8bf50-90ba-4d6f-8f51-243bff5319b2"},{"version":"CommandV1","origId":503877321547761,"guid":"2f44b4fc-1102-40f9-bf87-7c4f1dbb66a6","subtype":"command","commandType":"auto","position":13.0,"command":"%md ### FlatMap\n\nTransformation / Narrow: Return a new RDD by first applying a function to all elements of this RDD, and then flattening the results\n\n![](http://i.imgur.com/TsSUex8.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"9be6b10a-460d-4013-b724-fda33bb02508"},{"version":"CommandV1","origId":503877321547762,"guid":"17f3416f-dc4a-4750-8549-14fad694cf12","subtype":"command","commandType":"auto","position":14.0,"command":"x = sc.parallelize([1,2,3])\ny = x.flatMap(lambda x: (x, x*100, 42))\nprint(x.collect())\nprint(y.collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"031baa30-f12f-4d2e-b9be-a5b23c69042b"},{"version":"CommandV1","origId":503877321547763,"guid":"13916bdb-983e-4a58-89c3-08954ede81de","subtype":"command","commandType":"auto","position":15.0,"command":"%md ### GroupBy\n\nTransformation / Wide: Group the data in the original RDD. Create pairs where the key is the output of a user function, and the value is all items for which the function yields this key.\n\n![](http://i.imgur.com/gdj0Ey8.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b99ac919-4c43-4037-8e93-76adbd065e9a"},{"version":"CommandV1","origId":503877321547764,"guid":"45031bc9-a3b9-4966-aadb-efc01899de1b","subtype":"command","commandType":"auto","position":16.0,"command":"x = sc.parallelize(['John', 'Fred', 'Anna', 'James'])\ny = x.groupBy(lambda w: w[0])\nprint [(k, list(v)) for (k, v) in y.collect()]","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e36861fe-f3d7-4c5e-b021-d559fcca71dd"},{"version":"CommandV1","origId":503877321547765,"guid":"169c4c02-c544-46fa-af85-f2cff5b69d9b","subtype":"command","commandType":"auto","position":17.0,"command":"%md ### GroupByKey\n\nTransformation / Wide: Group the values for each key in the original RDD. Create a new pair where the original key corresponds to this collected group of values.\n\n![](http://i.imgur.com/TlWRGr2.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"7c5c4750-e6d8-4d0d-bef6-e53360c365df"},{"version":"CommandV1","origId":503877321547766,"guid":"993aa5a4-e8a4-4abc-8108-224bd746fb53","subtype":"command","commandType":"auto","position":18.0,"command":"x = sc.parallelize([('B',5),('B',4),('A',3),('A',2),('A',1)])\ny = x.groupByKey()\nprint(x.collect())\nprint(list((j[0], list(j[1])) for j in y.collect()))","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2a82539c-0264-47a1-b408-e8fcb21aff77"},{"version":"CommandV1","origId":503877321547767,"guid":"58860748-390a-4881-ac3e-ef269bbd3c87","subtype":"command","commandType":"auto","position":19.0,"command":"%md ### MapPartitions\n\nTransformation / Narrow: Return a new RDD by applying a function to each partition of this RDD\n\n![](http://i.imgur.com/dw8QOLX.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"cafdf874-9d5b-44d3-88b4-880267ca7fe7"},{"version":"CommandV1","origId":503877321547768,"guid":"2fc4214e-081d-497e-a5a2-5ace4dd022cc","subtype":"command","commandType":"auto","position":20.0,"command":"x = sc.parallelize([1,2,3], 2)\n\ndef f(iterator): yield sum(iterator); yield 42\n\ny = x.mapPartitions(f)\n\nprint(x.glom().collect())\nprint(y.glom().collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"dcceaaab-a832-44bc-ad5f-df6b2c4b7b20"},{"version":"CommandV1","origId":503877321547769,"guid":"caaae6c2-a83d-4dec-af97-eef1e786dbc7","subtype":"command","commandType":"auto","position":21.0,"command":"%md ### MapPartitionsWithIndex\n\nTransformation / Narrow: Return a new RDD by applying a function to each partition of this RDD, while tracking the index of the original partition\n\n![](http://i.imgur.com/3cGvAF7.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ef071537-78ea-4125-9dd4-e0655c0f4c7d"},{"version":"CommandV1","origId":503877321547770,"guid":"407f532c-11f7-4ad6-8424-3439c9922413","subtype":"command","commandType":"auto","position":22.0,"command":"x = sc.parallelize([1,2,3], 2)\n\ndef f(partitionIndex, iterator): yield (partitionIndex, sum(iterator))\n\ny = x.mapPartitionsWithIndex(f)\n\nprint(x.glom().collect())\nprint(y.glom().collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6a41ea46-5641-46b9-bbfc-779ae065ca41"},{"version":"CommandV1","origId":503877321547771,"guid":"5c61ac70-cef4-471d-bbed-7dc7a2a60c24","subtype":"command","commandType":"auto","position":23.0,"command":"%md ### Sample\n\nTransformation / Narrow: Return a new RDD containing a statistical sample of the original RDD\n\n![](http://i.imgur.com/LJ56nQq.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5c130221-f1b9-4f53-b1bb-4887dd236064"},{"version":"CommandV1","origId":503877321547772,"guid":"e2e8381e-4851-4807-8a2a-4be31181ccf2","subtype":"command","commandType":"auto","position":24.0,"command":"x = sc.parallelize([1, 2, 3, 4, 5])\ny = x.sample(False, 0.4, 42)\nprint(x.collect())\nprint(y.collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"7533c357-24d1-4f3f-a4f8-0395cbae6e2d"},{"version":"CommandV1","origId":503877321547773,"guid":"a649e09d-7a8d-472e-a904-aafc2feb3838","subtype":"command","commandType":"auto","position":25.0,"command":"%md ### Union\n\nTransformation / Narrow: Return a new RDD containing all items from two original RDDs. Duplicates are not culled.\n\n![](http://i.imgur.com/XFpbqZ8.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f247fa0e-7cc7-4a32-87dc-4e5a007a9f6a"},{"version":"CommandV1","origId":503877321547774,"guid":"ace0887c-c23d-4455-a614-7099cbb5669b","subtype":"command","commandType":"auto","position":26.0,"command":"x = sc.parallelize([1,2,3], 2)\ny = sc.parallelize([3,4], 1)\nz = x.union(y)\nprint(z.glom().collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"715a5d31-193a-4654-a8b4-664f2890231e"},{"version":"CommandV1","origId":503877321547775,"guid":"65bb403c-6cfe-44b9-bf0f-46e3432d2032","subtype":"command","commandType":"auto","position":27.0,"command":"%md ### Join\n\nTransformation / Wide: Return a new RDD containing all pairs of elements having the same key in the original RDDs\n\n![](http://i.imgur.com/YXL42Nl.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3e74413a-2043-4cc1-932a-0bd1b6fd0662"},{"version":"CommandV1","origId":503877321547776,"guid":"8da03608-387b-4b64-82f4-4a0c3d96dd54","subtype":"command","commandType":"auto","position":28.0,"command":"x = sc.parallelize([(\"a\", 1), (\"b\", 2)])\ny = sc.parallelize([(\"a\", 3), (\"a\", 4), (\"b\", 5)])\nz = x.join(y)\nprint(z.collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a466f806-a185-4550-9eea-fadfe54459d0"},{"version":"CommandV1","origId":503877321547777,"guid":"ea079055-72de-427f-9c8f-d44e1fbfc0db","subtype":"command","commandType":"auto","position":29.0,"command":"%md ####**Try it!** Join the RDDs so that each company's name and stock price are collected into a tuple value, whose key is the company ticker symbol.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6210f03d-de62-4677-b02c-bccb6c155e62"},{"version":"CommandV1","origId":503877321547778,"guid":"1cbe0813-51d7-431a-9291-1100b5189b9d","subtype":"command","commandType":"auto","position":30.0,"command":"x = sc.parallelize([(\"TWTR\", \"Twitter\"), (\"GOOG\", \"Google\"), (\"AAPL\", \"Apple\")])\ny = sc.parallelize([(\"TWTR\", 36), (\"GOOG\", 532), (\"AAPL\", 127)])\n\n#Add code here to perform a join and print the result","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"05b3ea60-2ab9-4273-90d9-34f7b43801e8"},{"version":"CommandV1","origId":503877321547779,"guid":"25cc0390-f0f2-42dd-b92f-fa1ab7eab68e","subtype":"command","commandType":"auto","position":31.0,"command":"%md ### Distinct\n\nTransformation / Wide: Return a new RDD containing distinct items from the original RDD (omitting all duplicates)\n\n![](http://i.imgur.com/Vqgy2a4.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c18ed97c-9fe3-499b-96cb-b3a704a60075"},{"version":"CommandV1","origId":503877321547780,"guid":"f7fbe74c-d34f-4d00-b70a-1e291836e217","subtype":"command","commandType":"auto","position":32.0,"command":"x = sc.parallelize([1,2,3,3,4])\ny = x.distinct()\n\nprint(y.collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"273c25ec-8a71-4637-8b0a-0d666f35d484"},{"version":"CommandV1","origId":503877321547781,"guid":"c52737c8-0136-4c1e-9b6b-7a04ca075f3b","subtype":"command","commandType":"auto","position":33.0,"command":"%md ### Coalesce\n\nTransformation / Narrow or Wide: Return a new RDD which is reduced to a smaller number of partitions\n\n![](http://i.imgur.com/woQiM7E.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3fa17a23-26c9-49a3-b666-8d26f1f51abb"},{"version":"CommandV1","origId":503877321547782,"guid":"643806c4-1dc7-41e4-9f42-b9169439087e","subtype":"command","commandType":"auto","position":34.0,"command":"x = sc.parallelize([1, 2, 3, 4, 5], 3)\ny = x.coalesce(2)\nprint(x.glom().collect())\nprint(y.glom().collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"32abd9dd-5f7f-45f8-b6f3-85e846a0458f"},{"version":"CommandV1","origId":503877321547783,"guid":"15e5dd18-b711-4b9b-ad35-a09b8a1d6cd2","subtype":"command","commandType":"auto","position":35.0,"command":"%md ### KeyBy\n\nTransformation / Narrow: Create a Pair RDD, forming one pair for each item in the original RDD. The pair’s key is calculated from the value via a user-supplied function.\n\n![](http://i.imgur.com/nqYhDW5.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5fc41c06-e89a-49c2-a4f8-80746bc22b61"},{"version":"CommandV1","origId":503877321547784,"guid":"b56ba930-3d37-46fb-a731-021e5808d206","subtype":"command","commandType":"auto","position":36.0,"command":"x = sc.parallelize(['John', 'Fred', 'Anna', 'James'])\ny = x.keyBy(lambda w: w[0])\nprint y.collect()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2b5c1265-de18-408c-98e5-a8ec76509d4e"},{"version":"CommandV1","origId":503877321547785,"guid":"1fbeb3a7-c0e8-498d-b10f-8a9249bdba1d","subtype":"command","commandType":"auto","position":37.0,"command":"%md ####**Try it!** Create an RDD from this list, and then use .keyBy to create a pair RDD where the state abbreviation is the key and the city + state is the value (e.g., (\"NY\", \"New York, NY\")) ... For extra credit, add a .map that strips out the redundant state abbreviation to yield pairs like (\"NY\", \"New York\").","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6c87fd9a-df31-40d5-8b4b-10f195fc7e76"},{"version":"CommandV1","origId":503877321547786,"guid":"ebfe3685-1dbb-42f6-9520-3d7f6e48d894","subtype":"command","commandType":"auto","position":38.0,"command":"data = [\"New York, NY\", \"Philadelphia, PA\", \"Denver, CO\", \"San Francisco, CA\"]\n# Add code to parallelize the list to an RDD\n# call .keyBy on the RDD to create an RDD of pairs","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"9801f977-ec3e-450d-9815-b86a8c0ce5ec"},{"version":"CommandV1","origId":503877321547787,"guid":"ddbc3eea-5836-4e16-8109-d434c7ab1460","subtype":"command","commandType":"auto","position":39.0,"command":"%md ### PartitionBy\n\nTransformation / Wide: Return a new RDD with the specified number of partitions, placing original items into the partition returned by a user supplied function\n\n![](http://i.imgur.com/QHDWwYv.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"9f48573c-236f-45f4-813d-40b0091fcfd8"},{"version":"CommandV1","origId":503877321547788,"guid":"a9c3801d-7e04-4869-92b4-abd0aed6f0be","subtype":"command","commandType":"auto","position":40.0,"command":"x = sc.parallelize([('J','James'),('F','Fred'), ('A','Anna'),('J','John')], 3)\n\ny = x.partitionBy(2, lambda w: 0 if w[0] < 'H' else 1)\n\nprint x.glom().collect()\nprint y.glom().collect()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"81b68e5a-5851-4788-bc5a-bfd853f385a1"},{"version":"CommandV1","origId":503877321547789,"guid":"87747a52-0da0-4cfc-8c84-8367983feed4","subtype":"command","commandType":"auto","position":41.0,"command":"%md ### Zip\n\nTransformation / Narrow: Return a new RDD containing pairs whose key is the item in the original RDD, and whose value is that item’s corresponding element (same partition, same index) in a second RDD\n\n![](http://i.imgur.com/5J0lg6g.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b0e9d909-bdce-4d2e-af0a-af1d023b4d30"},{"version":"CommandV1","origId":503877321547790,"guid":"5adea9fd-e83a-463d-b9a0-71be4e76cb9f","subtype":"command","commandType":"auto","position":42.0,"command":"x = sc.parallelize([1, 2, 3])\ny = x.map(lambda n:n*n)\nz = x.zip(y)\n\nprint(z.collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8f407339-1145-4c8b-a18e-f775df0cb882"},{"version":"CommandV1","origId":503877321547791,"guid":"fd3cb71a-5752-4676-b73a-4fc872f68ee3","subtype":"command","commandType":"auto","position":43.0,"command":"%md ## Actions\n\nCalculate a result (e.g., numeric data or creata a non-RDD data structure), or produce a side effect, such as writing output to disk","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5580ce21-7b26-4ad0-9752-707742b7a0ec"},{"version":"CommandV1","origId":503877321547792,"guid":"435bffc6-b141-4256-9499-bc735defdc34","subtype":"command","commandType":"auto","position":44.0,"command":"%md ### GetNumPartitions\n\nAction / To Driver: Return the number of partitions in RDD\n\n![](http://i.imgur.com/9yhDsVX.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"86222b85-72cc-4f3a-8cf9-053011986e2c"},{"version":"CommandV1","origId":503877321547793,"guid":"28c04c82-3f95-4bf8-a373-a60746ff1424","subtype":"command","commandType":"auto","position":45.0,"command":"x = sc.parallelize([1,2,3], 2)\ny = x.getNumPartitions()\n\nprint(x.glom().collect())\nprint(y)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"58059c6f-3605-4777-a1b3-eb93dd9a3e7f"},{"version":"CommandV1","origId":503877321547794,"guid":"bd218060-8fc2-4a5d-86ed-0f7e8a01db30","subtype":"command","commandType":"auto","position":46.0,"command":"%md ### Reduce\n\nAction / To Driver: Aggregate all the elements of the RDD by applying a user function pairwise to elements and partial results, and return a result to the driver\n\n![](http://i.imgur.com/R72uzwX.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"30f70e15-04c5-4811-afa2-d788b9aad881"},{"version":"CommandV1","origId":503877321547795,"guid":"fc1da365-7288-4e6b-b05a-fc2284a63824","subtype":"command","commandType":"auto","position":47.0,"command":"x = sc.parallelize([1,2,3,4])\ny = x.reduce(lambda a,b: a+b)\n\nprint(x.collect())\nprint(y)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"fa105d0b-bed1-4dce-83ef-5827ecd5a0ba"},{"version":"CommandV1","origId":503877321547796,"guid":"9a012c5f-297f-4c44-947a-a1578e42e0a8","subtype":"command","commandType":"auto","position":48.0,"command":"%md ### Aggregate\n\nAction / To Driver: Aggregate all the elements of the RDD by: \n  - applying a user function to combine elements with user-supplied objects, \n  - then combining those user-defined results via a second user function, \n  - and finally returning a result to the driver.\n  \n![](http://i.imgur.com/7MLnYeh.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"29cec631-0398-4689-880e-309dcdeb4f5c"},{"version":"CommandV1","origId":503877321547797,"guid":"a56cee3c-1359-4cfb-94d4-8cd20b5024cb","subtype":"command","commandType":"auto","position":49.0,"command":"seqOp = lambda data, item: (data[0] + [item], data[1] + item)\ncombOp = lambda d1, d2: (d1[0] + d2[0], d1[1] + d2[1])\n\nx = sc.parallelize([1,2,3,4])\n\ny = x.aggregate(([], 0), seqOp, combOp)\n\nprint(y)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e17a2655-c96d-4c51-8c02-a6d78f97038d"},{"version":"CommandV1","origId":503877321547798,"guid":"d2a222eb-c602-4a43-85a0-181c40ce6fce","subtype":"command","commandType":"auto","position":50.0,"command":"%md ####**Try it!** Can you use .aggregate to collect the inputs into a plain list -- so that the output of your .aggregate is just like that of .collect? How about producing a plain total, just like .sum? What does that tell you about the amount of data returned from .aggregate?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8f8256fa-b312-4ee1-bfdf-99bfbcccc1b5"},{"version":"CommandV1","origId":503877321547799,"guid":"7266e54b-1005-4c06-b0ad-7fa3f5f1c8ef","subtype":"command","commandType":"auto","position":51.0,"command":"x = sc.parallelize([1,2,3,4])\n\n#define appropriate seqOp and combOp\nseqOp = lambda #...\ncombOp = lambda #... \n\ny = x.aggregate(  ) #add correct parameters\n\n# these two lines should produce the same thing\nprint(x.collect())\nprint(y)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e7a66e98-942a-4860-aa2e-9554c22cdf73"},{"version":"CommandV1","origId":503877321547800,"guid":"c8fbda94-8a42-492d-8ac0-130f5ee9f317","subtype":"command","commandType":"auto","position":52.0,"command":"%md ### Max, Min, Sum, Mean, Variance, Stdev\n\nAction / To Driver: Compute the respective function (maximum value, minimum value, sum, mean, variance, or standard deviation) from a numeric RDD\n\n![](http://i.imgur.com/HUCtib1.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"9b2adac4-aac4-4103-ae43-b798bab98783"},{"version":"CommandV1","origId":503877321547801,"guid":"4cd1137e-2a37-45d5-b058-df2266069ad6","subtype":"command","commandType":"auto","position":53.0,"command":"x = sc.parallelize([2,4,1])\nprint(x.collect())\nprint(x.max(), x.min(), x.sum(), x.mean(), x.variance(), x.stdev())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"146af609-8887-4b0e-b887-d099826947ba"},{"version":"CommandV1","origId":503877321547802,"guid":"0f26a724-68fa-40dd-a2a1-fc29d5d5407e","subtype":"command","commandType":"auto","position":54.0,"command":"%md ### CountByKey\n\nAction / To Driver: Return a map of keys and counts of their occurrences in the RDD\n\n![](http://i.imgur.com/jvQTGv6.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"15fd7607-ddb4-493e-b6bb-9c81ceb608f6"},{"version":"CommandV1","origId":503877321547803,"guid":"149b24db-6d02-46e0-a0e4-2c0720d69500","subtype":"command","commandType":"auto","position":55.0,"command":"x = sc.parallelize([('J', 'James'), ('F','Fred'), \n                    ('A','Anna'), ('J','John')])\n\ny = x.countByKey()\nprint(y)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a84eaed9-96a3-4537-be8d-b3b6db63aab5"},{"version":"CommandV1","origId":503877321547804,"guid":"8f662535-9138-4a44-8cec-0bf6902733da","subtype":"command","commandType":"auto","position":56.0,"command":"%md ### SaveAsTextFile\n\nAction / Distributed: Save the RDD to the filesystem indicated in the path\n\n![](http://i.imgur.com/Tb2Q9mG.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2e19fb2d-2d97-4fe2-87a6-27ce19a67fc7"},{"version":"CommandV1","origId":503877321547805,"guid":"30b4034d-fbe8-47a7-a3ad-91d2ad311ad5","subtype":"command","commandType":"auto","position":57.0,"command":"dbutils.fs.rm(\"/temp/demo\", True)\nx = sc.parallelize([2,4,1])\nx.saveAsTextFile(\"/temp/demo\")\n\ny = sc.textFile(\"/temp/demo\")\nprint(y.collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"98eef5dd-cd11-4bc9-ac3e-227921fa8108"},{"version":"CommandV1","origId":503877321547806,"guid":"514baa2c-1d1b-4142-ad61-8e59c4a9c24b","subtype":"command","commandType":"auto","position":58.0,"command":"","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"7f4e9e13-0e5e-46e5-8d15-897ab3ed3a58"}],"dashboards":[],"guid":"7adec40e-86c1-40f0-bbdc-1b59731e438d","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}