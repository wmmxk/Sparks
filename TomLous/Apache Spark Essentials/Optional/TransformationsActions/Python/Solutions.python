{"version":"NotebookV1","origId":503877321547807,"name":"Solutions","language":"python","commands":[{"version":"CommandV1","origId":503877321547809,"guid":"dba8f45a-1940-4df6-afc0-c3f87c7d43b8","subtype":"command","commandType":"auto","position":1.0,"command":"%md\n\n#![Spark Logo](http://sameerf-dbc-labs.s3-website-us-west-2.amazonaws.com/ta_Spark-logo-small.png)\n## Solutions to: A Visual Guide to Spark's API\n### Time to complete: 30 minutes\n#### This lab will introduce you to using Apache Spark 1.3 with the Python API. We will explore common transformations and actions including\n* Actions: Collect, Count, GetNumPartitions, Reduce, Aggregate, Max, Min, Sum, Mean, Variance, Stdev, CountByKey, SaveAsTextFile, \n* Transformations + MISC operations: Map, Filter, FlatMap, GroupBy, GroupByKey, MapPartitions, MapPartitionsWithIndex, Sample, Union, Join, Distinct, Coalese, KeyBy, PartitionBy, Zip\n\n\nNote that these images were inspired by Jeff Thomson's 67 \"PySpark images\".","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2008e286-e03d-4baf-a5ae-f2d99c39c826"},{"version":"CommandV1","origId":503877321547810,"guid":"ac113e3b-5a08-435d-90b8-c3281bcaff4a","subtype":"command","commandType":"auto","position":2.0,"command":"%md ### Collect\n\nAction / To Driver: Return all items in the RDD to the driver in a single list\n\nStart with this action, since it is used in all of the examples.\n\n![](http://i.imgur.com/DUO6ygB.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"16bd65d7-5b13-404f-95c1-31388276a379"},{"version":"CommandV1","origId":503877321547811,"guid":"9a2c6b07-e71b-4e1c-951f-eae08d233b0e","subtype":"command","commandType":"auto","position":3.0,"command":"x = sc.parallelize([1,2,3], 2)\ny = x.collect()\nprint(x.glom().collect()) # glom() flattens elements on the same partition\nprint(y)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2aff39fc-730b-4bb5-9eda-8303abdaa609"},{"version":"CommandV1","origId":503877321547812,"guid":"d3624d6a-1a71-475b-a0b9-7d324ce0cce3","subtype":"command","commandType":"auto","position":4.0,"command":"%md ## Transformations\n\nCreate a new RDD from one or more RDDs","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3b3d5cc6-ef24-4abe-a62b-860266279297"},{"version":"CommandV1","origId":503877321547813,"guid":"66ef443b-8754-4199-a592-34e871bc709b","subtype":"command","commandType":"auto","position":5.0,"command":"%md ###Map\n\nTransformation / Narrow: Return a new RDD by applying a function to each element of this RDD\n\n![](http://i.imgur.com/PxNJf0U.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a4696f25-2686-4be2-8596-4d0ac473353b"},{"version":"CommandV1","origId":503877321547814,"guid":"cdaac227-7bf6-4a18-b0e7-fee2dde0c9dd","subtype":"command","commandType":"auto","position":6.0,"command":"x = sc.parallelize([\"b\", \"a\", \"c\"])\ny = x.map(lambda z: (z, 1))\nprint(x.collect())\nprint(y.collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"120e26a3-fe18-4b00-981f-4540d4910b9a"},{"version":"CommandV1","origId":503877321547815,"guid":"7f5bff8f-31fa-4cb5-a832-6163dc4e0ecd","subtype":"command","commandType":"auto","position":7.0,"command":"%md ####**Try it!** change the indicated line to produce squares of the original numbers","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"cd83b0a9-b98a-4dc6-849d-38178ae47e6a"},{"version":"CommandV1","origId":503877321547816,"guid":"68029d02-0978-4612-906d-5fb489104a48","subtype":"command","commandType":"auto","position":8.0,"command":"#Lab exercise:\n\nx = sc.parallelize([1,2,3,4])\ny = x.map(lambda n: n*n) #CHANGE the lambda to take a number and returns its square\nprint(x.collect())\nprint(y.collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1568fc9c-d001-4b41-904b-c1e39776d017"},{"version":"CommandV1","origId":503877321547817,"guid":"e72072b2-d4a0-48ee-81aa-016b26ece44d","subtype":"command","commandType":"auto","position":9.0,"command":"%md #### Filter\n\nTransformation / Narrow: Return a new RDD containing only the elements that satisfy a predicate\n\n![](http://i.imgur.com/GFyji4U.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0013af57-5bd2-4bc8-8f00-0dbe61d03872"},{"version":"CommandV1","origId":503877321547818,"guid":"97a5c633-df4b-460c-8773-973d1070f60b","subtype":"command","commandType":"auto","position":10.0,"command":"x = sc.parallelize([1,2,3])\ny = x.filter(lambda x: x%2 == 1) #keep odd values \nprint(x.collect())\nprint(y.collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0cadc855-927f-4e70-b6c9-25c212d4e3ab"},{"version":"CommandV1","origId":503877321547819,"guid":"3e5b9a3b-e3ff-4d90-861a-3d2e6831cabd","subtype":"command","commandType":"auto","position":11.0,"command":"%md ####**Try it!** Change the sample to keep even numbers","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e0e74cd2-6aa3-4564-a2c1-1e6ccd3e3d02"},{"version":"CommandV1","origId":503877321547820,"guid":"08c2c988-bd1d-4bfa-81c1-702507ec05e5","subtype":"command","commandType":"auto","position":12.0,"command":"#Lab exercise:\nx = sc.parallelize([1,2,3])\ny = x.filter(lambda n:n%2 == 0) #add a lambda parameter to keep only even numbers\nprint(x.collect())\nprint(y.collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f74e5d10-34b5-4f0a-9f76-00dab0e47515"},{"version":"CommandV1","origId":503877321547821,"guid":"0db139e6-d6c9-44d2-af9c-0658b2c0ff1f","subtype":"command","commandType":"auto","position":13.0,"command":"%md ### FlatMap\n\nTransformation / Narrow: Return a new RDD by first applying a function to all elements of this RDD, and then flattening the results\n\n![](http://i.imgur.com/TsSUex8.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5185ca66-f17e-43b8-a06b-b693ee9dd3f8"},{"version":"CommandV1","origId":503877321547822,"guid":"458e940d-f2e3-48ca-9a4f-2641a2dfb8c0","subtype":"command","commandType":"auto","position":14.0,"command":"x = sc.parallelize([1,2,3])\ny = x.flatMap(lambda x: (x, x*100, 42))\nprint(x.collect())\nprint(y.collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1017c862-0bbe-471c-ad2a-33e8bed9d479"},{"version":"CommandV1","origId":503877321547823,"guid":"121fde68-bfcb-4024-b0a8-62982aa9ce12","subtype":"command","commandType":"auto","position":15.0,"command":"%md ### GroupBy\n\nTransformation / Wide: Group the data in the original RDD. Create pairs where the key is the output of a user function, and the value is all items for which the function yields this key.\n\n![](http://i.imgur.com/gdj0Ey8.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2e99b0be-37cf-4cf1-8d74-2b18d4a8f6a1"},{"version":"CommandV1","origId":503877321547824,"guid":"54b08dc6-46c5-47b5-98ab-b4c6550b4ddb","subtype":"command","commandType":"auto","position":16.0,"command":"x = sc.parallelize(['John', 'Fred', 'Anna', 'James'])\ny = x.groupBy(lambda w: w[0])\nprint [(k, list(v)) for (k, v) in y.collect()]","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"511ae46e-2875-4ea4-96bc-1eb1867483ff"},{"version":"CommandV1","origId":503877321547825,"guid":"5a746e55-6fbb-482b-95a9-2ed5c7b86652","subtype":"command","commandType":"auto","position":17.0,"command":"%md ### GroupByKey\n\nTransformation / Wide: Group the values for each key in the original RDD. Create a new pair where the original key corresponds to this collected group of values.\n\n![](http://i.imgur.com/TlWRGr2.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"cbce5f23-e091-4cce-8b2b-33054c806b0a"},{"version":"CommandV1","origId":503877321547826,"guid":"49735bb8-1815-4192-bacb-0c84c873c43e","subtype":"command","commandType":"auto","position":18.0,"command":"x = sc.parallelize([('B',5),('B',4),('A',3),('A',2),('A',1)])\ny = x.groupByKey()\nprint(x.collect())\nprint(list((j[0], list(j[1])) for j in y.collect()))","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1f9fb2f1-693f-4b19-84f0-8b8a68339ab8"},{"version":"CommandV1","origId":503877321547827,"guid":"ec923dd5-3f57-4c56-a546-632ac4a67316","subtype":"command","commandType":"auto","position":19.0,"command":"%md ### MapPartitions\n\nTransformation / Narrow: Return a new RDD by applying a function to each partition of this RDD\n\n![](http://i.imgur.com/dw8QOLX.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"7f8aefe5-45af-407e-9b67-41ec33a8156b"},{"version":"CommandV1","origId":503877321547828,"guid":"db1d9954-6a33-46f4-bb29-cb099e0da38e","subtype":"command","commandType":"auto","position":20.0,"command":"x = sc.parallelize([1,2,3], 2)\n\ndef f(iterator): yield sum(iterator); yield 42\n\ny = x.mapPartitions(f)\n\nprint(x.glom().collect())\nprint(y.glom().collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"758716e2-8d82-4d45-95d2-b03ff92a1e87"},{"version":"CommandV1","origId":503877321547829,"guid":"32b01938-2751-40fd-9178-952a09843932","subtype":"command","commandType":"auto","position":21.0,"command":"%md ### MapPartitionsWithIndex\n\nTransformation / Narrow: Return a new RDD by applying a function to each partition of this RDD, while tracking the index of the original partition\n\n![](http://i.imgur.com/3cGvAF7.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"13b119c0-58e1-4928-938c-51d902d382d4"},{"version":"CommandV1","origId":503877321547830,"guid":"79bd9ee9-8570-47b6-9276-d267bf15db37","subtype":"command","commandType":"auto","position":22.0,"command":"x = sc.parallelize([1,2,3], 2)\n\ndef f(partitionIndex, iterator): yield (partitionIndex, sum(iterator))\n\ny = x.mapPartitionsWithIndex(f)\n\nprint(x.glom().collect())\nprint(y.glom().collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2491b327-1228-43fc-a16a-4cc5c6022cf4"},{"version":"CommandV1","origId":503877321547831,"guid":"7b976e0e-1afb-444e-8b04-7b24bc000258","subtype":"command","commandType":"auto","position":23.0,"command":"%md ### Sample\n\nTransformation / Narrow: Return a new RDD containing a statistical sample of the original RDD\n\n![](http://i.imgur.com/LJ56nQq.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4d48e021-f8a2-4f69-8ad5-3c058e5b3969"},{"version":"CommandV1","origId":503877321547832,"guid":"7c26bb50-d684-487f-aed2-bc459bde797b","subtype":"command","commandType":"auto","position":24.0,"command":"x = sc.parallelize([1, 2, 3, 4, 5])\ny = x.sample(False, 0.4, 42)\nprint(x.collect())\nprint(y.collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f4c1e6d6-9f6b-45b6-87b1-05196a3dd8cc"},{"version":"CommandV1","origId":503877321547833,"guid":"c1cbbece-dc84-406e-a383-b55025fa7d50","subtype":"command","commandType":"auto","position":25.0,"command":"%md ### Union\n\nTransformation / Narrow: Return a new RDD containing all items from two original RDDs. Duplicates are not culled.\n\n![](http://i.imgur.com/XFpbqZ8.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"373351ea-52b9-48a1-a22d-a90ac4bda3f2"},{"version":"CommandV1","origId":503877321547834,"guid":"a1bee917-42b5-48d1-99e9-88b7ab6dffe9","subtype":"command","commandType":"auto","position":26.0,"command":"x = sc.parallelize([1,2,3], 2)\ny = sc.parallelize([3,4], 1)\nz = x.union(y)\nprint(z.glom().collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"db6483cd-7843-482c-8cd3-285e9f93b98b"},{"version":"CommandV1","origId":503877321547835,"guid":"ce7c7e06-6327-440c-a3b3-d2e66683cb3b","subtype":"command","commandType":"auto","position":27.0,"command":"%md ### Join\n\nTransformation / Wide: Return a new RDD containing all pairs of elements having the same key in the original RDDs\n\n![](http://i.imgur.com/YXL42Nl.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d8c5939c-c017-419c-bd4b-b9dc3fa95256"},{"version":"CommandV1","origId":503877321547836,"guid":"4a2402b8-3fce-478b-a6da-b81347fcade4","subtype":"command","commandType":"auto","position":28.0,"command":"x = sc.parallelize([(\"a\", 1), (\"b\", 2)])\ny = sc.parallelize([(\"a\", 3), (\"a\", 4), (\"b\", 5)])\nz = x.join(y)\nprint(z.collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0f5b7408-58aa-4d8d-96c6-7688eb0b8407"},{"version":"CommandV1","origId":503877321547837,"guid":"ec3648ec-eb0b-4566-b362-10d767f3ca5e","subtype":"command","commandType":"auto","position":29.0,"command":"%md ####**Try it!** Join the RDDs so that each company's name and stock price are collected into a tuple value, whose key is the company ticker symbol.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2ef22849-3473-4488-93bb-784ce2d28a15"},{"version":"CommandV1","origId":503877321547838,"guid":"b22ff717-6f69-4562-bc9d-a06e545783d3","subtype":"command","commandType":"auto","position":30.0,"command":"x = sc.parallelize([(\"TWTR\", \"Twitter\"), (\"GOOG\", \"Google\"), (\"AAPL\", \"Apple\")])\ny = sc.parallelize([(\"TWTR\", 36), (\"GOOG\", 532), (\"AAPL\", 127)])\n\nprint(x.join(y).collect())\n#Add code here to perform a join and print the result","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"12a5ac57-8eda-4729-ad80-8e29828ff040"},{"version":"CommandV1","origId":503877321547839,"guid":"ddaed892-361c-4668-a3ba-1a09ddd54fa4","subtype":"command","commandType":"auto","position":31.0,"command":"%md ### Distinct\n\nTransformation / Wide: Return a new RDD containing distinct items from the original RDD (omitting all duplicates)\n\n![](http://i.imgur.com/Vqgy2a4.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"014b4e36-e2ef-45bb-8174-ec402892f429"},{"version":"CommandV1","origId":503877321547840,"guid":"03fd9d5e-f95a-49de-9c29-254a46c1cf50","subtype":"command","commandType":"auto","position":32.0,"command":"x = sc.parallelize([1,2,3,3,4])\ny = x.distinct()\n\nprint(y.collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"92b41245-1d93-47ac-9799-69d66b10151b"},{"version":"CommandV1","origId":503877321547841,"guid":"8a0baec6-4ba0-4764-967f-59b7d75a217a","subtype":"command","commandType":"auto","position":33.0,"command":"%md ### Coalesce\n\nTransformation / Narrow or Wide: Return a new RDD which is reduced to a smaller number of partitions\n\n![](http://i.imgur.com/woQiM7E.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"77d2249e-8e5e-4aee-bd7c-b80707d3747c"},{"version":"CommandV1","origId":503877321547842,"guid":"e02e853e-a140-4640-be53-a608939ae5c6","subtype":"command","commandType":"auto","position":34.0,"command":"x = sc.parallelize([1, 2, 3, 4, 5], 3)\ny = x.coalesce(2)\nprint(x.glom().collect())\nprint(y.glom().collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"cc4633a1-2850-4c0a-9331-84c99aca3396"},{"version":"CommandV1","origId":503877321547843,"guid":"1eb3b131-ccf3-4ce9-ab86-523ba2268668","subtype":"command","commandType":"auto","position":35.0,"command":"%md ### KeyBy\n\nTransformation / Narrow: Create a Pair RDD, forming one pair for each item in the original RDD. The pair’s key is calculated from the value via a user-supplied function.\n\n![](http://i.imgur.com/nqYhDW5.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a32e97ff-f2b7-49f6-8e34-717c4f1f07d8"},{"version":"CommandV1","origId":503877321547844,"guid":"b5621e67-4431-4918-9acd-6b0303a96867","subtype":"command","commandType":"auto","position":36.0,"command":"x = sc.parallelize(['John', 'Fred', 'Anna', 'James'])\ny = x.keyBy(lambda w: w[0])\nprint y.collect()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"90eccfbc-3a83-49fb-9d9f-b12ab6369c27"},{"version":"CommandV1","origId":503877321547845,"guid":"48a37c31-a934-4dd5-9f98-7c003d0f0def","subtype":"command","commandType":"auto","position":37.0,"command":"%md ####**Try it!** Create an RDD from this list, and then use .keyBy to create a pair RDD where the state abbreviation is the key and the city + state is the value (e.g., (\"NY\", \"New York, NY\")) ... For extra credit, add a .map that strips out the redundant state abbreviation to yield pairs like (\"NY\", \"New York\").","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"664e890b-da48-494d-9cdf-78e2049f070f"},{"version":"CommandV1","origId":503877321547846,"guid":"241428f5-c9b4-4051-8fd3-b07098570c80","subtype":"command","commandType":"auto","position":38.0,"command":"data = [\"New York, NY\", \"Philadelphia, PA\", \"Denver, CO\", \"San Francisco, CA\"]\n# Add code to parallelize the list to an RDD\n# call .keyBy on the RDD to create an RDD of pairs\nx = sc.parallelize(data)\n\npairs = x.keyBy(lambda s:s.split(\", \")[1])\nprint(pairs.collect())\n\nstateCityPairs = pairs.map(lambda t:(t[0], t[1].split(\", \")[0]))\nprint(stateCityPairs.collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"abb0a11a-0ffc-4bff-bf4f-3317a5c8d8f8"},{"version":"CommandV1","origId":503877321547847,"guid":"9584053c-3362-4ec3-bed8-742811dc3c97","subtype":"command","commandType":"auto","position":39.0,"command":"%md ### PartitionBy\n\nTransformation / Wide: Return a new RDD with the specified number of partitions, placing original items into the partition returned by a user supplied function\n\n![](http://i.imgur.com/QHDWwYv.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a2f09c20-fc36-4567-aaa5-18ac0c93860f"},{"version":"CommandV1","origId":503877321547848,"guid":"b7a81644-a7f4-4b9e-95c1-c497dd1cedb1","subtype":"command","commandType":"auto","position":40.0,"command":"x = sc.parallelize([('J','James'),('F','Fred'), ('A','Anna'),('J','John')], 3)\n\ny = x.partitionBy(2, lambda w: 0 if w[0] < 'H' else 1)\n\nprint x.glom().collect()\nprint y.glom().collect()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"7da46066-598f-40aa-bd50-1a700041ff20"},{"version":"CommandV1","origId":503877321547849,"guid":"7c2d6932-9719-4fdd-a5e8-f0de69ff43d4","subtype":"command","commandType":"auto","position":41.0,"command":"%md ### Zip\n\nTransformation / Narrow: Return a new RDD containing pairs whose key is the item in the original RDD, and whose value is that item’s corresponding element (same partition, same index) in a second RDD\n\n![](http://i.imgur.com/5J0lg6g.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8da83572-a2f1-4536-b010-019c551d0263"},{"version":"CommandV1","origId":503877321547850,"guid":"893f1b1b-159e-4eda-8e4f-f2cd95877182","subtype":"command","commandType":"auto","position":42.0,"command":"x = sc.parallelize([1, 2, 3])\ny = x.map(lambda n:n*n)\nz = x.zip(y)\n\nprint(z.collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f146e9e6-95d6-43ab-8320-864b098aeee1"},{"version":"CommandV1","origId":503877321547851,"guid":"1e6c8551-1449-4f72-a9a6-59e3f90f515e","subtype":"command","commandType":"auto","position":43.0,"command":"%md ## Actions\n\nCalculate a result (e.g., numeric data or creata a non-RDD data structure), or produce a side effect, such as writing output to disk","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a90f1afa-db47-40a7-8808-796f0f94c85e"},{"version":"CommandV1","origId":503877321547852,"guid":"60c8f776-c653-4386-a244-c1b9345715aa","subtype":"command","commandType":"auto","position":44.0,"command":"%md ### GetNumPartitions\n\nAction / To Driver: Return the number of partitions in RDD\n\n![](http://i.imgur.com/9yhDsVX.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2848ed65-69e7-4a1e-a411-bf836a94bd1a"},{"version":"CommandV1","origId":503877321547853,"guid":"17ac6288-6ebc-48a0-88dd-c9ba0efabac4","subtype":"command","commandType":"auto","position":45.0,"command":"x = sc.parallelize([1,2,3], 2)\ny = x.getNumPartitions()\n\nprint(x.glom().collect())\nprint(y)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"239d188e-e556-441a-9bf4-a9c9b2fb0142"},{"version":"CommandV1","origId":503877321547854,"guid":"2b29a1e4-b32d-4915-a356-6b65f6e1d15c","subtype":"command","commandType":"auto","position":46.0,"command":"%md ### Reduce\n\nAction / To Driver: Aggregate all the elements of the RDD by applying a user function pairwise to elements and partial results, and return a result to the driver\n\n![](http://i.imgur.com/R72uzwX.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"9505a180-b324-4251-8168-e020dab59dd9"},{"version":"CommandV1","origId":503877321547855,"guid":"10a1cd99-3343-4cf1-bd98-96b2933120e7","subtype":"command","commandType":"auto","position":47.0,"command":"x = sc.parallelize([1,2,3,4])\ny = x.reduce(lambda a,b: a+b)\n\nprint(x.collect())\nprint(y)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3cbfb32b-ed91-434e-9b08-fa3b74bc68f1"},{"version":"CommandV1","origId":503877321547856,"guid":"1c833f59-3d0d-4e4f-aeaf-420f5d1dfb8a","subtype":"command","commandType":"auto","position":48.0,"command":"%md ### Aggregate\n\nAction / To Driver: Aggregate all the elements of the RDD by: \n  - applying a user function to combine elements with user-supplied objects, \n  - then combining those user-defined results via a second user function, \n  - and finally returning a result to the driver.\n  \n![](http://i.imgur.com/7MLnYeh.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ebafc41e-a75a-4f82-9b4e-e00ed39d2769"},{"version":"CommandV1","origId":503877321547857,"guid":"34845e56-be23-443c-a44a-463913964093","subtype":"command","commandType":"auto","position":49.0,"command":"seqOp = lambda data, item: (data[0] + [item], data[1] + item)\ncombOp = lambda d1, d2: (d1[0] + d2[0], d1[1] + d2[1])\n\nx = sc.parallelize([1,2,3,4])\n\ny = x.aggregate(([], 0), seqOp, combOp)\n\nprint(y)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"064beef0-2a0f-441b-b1f6-da7256a6f454"},{"version":"CommandV1","origId":503877321547858,"guid":"49b414d5-d51d-48b2-a0b8-9fcb4f4548f6","subtype":"command","commandType":"auto","position":50.0,"command":"%md ####**Try it!** Can you use .aggregate to collect the inputs into a plain list -- so that the output of your .aggregate is just like that of .collect? How about producing a plain total, just like .sum? What does that tell you about the amount of data returned from .aggregate?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"29ce210e-8c0e-48cf-b791-ad1352a674b6"},{"version":"CommandV1","origId":503877321547859,"guid":"e8e8efbd-7600-44c3-8987-332e82c16fa8","subtype":"command","commandType":"auto","position":51.0,"command":"x = sc.parallelize([1,2,3,4])\n\n#define appropriate seqOp and combOp\nseqOp = lambda aList, n: aList + [n] \ncombOp = lambda l1, l2 : l1+l2\n\ny = x.aggregate([], seqOp, combOp) #add correct parameters\n\n# these two lines should produce the same thing\nprint(x.collect())\nprint(y)\n\nopSum = lambda x,y:x+y\n\nprint(x.aggregate(0, opSum, opSum)) # for sum, the adder/combiner can be the same","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f2aa3bd6-5fe9-4eb3-8d8c-a1641c385547"},{"version":"CommandV1","origId":503877321547860,"guid":"e3209439-17ea-466d-b55f-c9c4871730d0","subtype":"command","commandType":"auto","position":52.0,"command":"%md ### Max, Min, Sum, Mean, Variance, Stdev\n\nAction / To Driver: Compute the respective function (maximum value, minimum value, sum, mean, variance, or standard deviation) from a numeric RDD\n\n![](http://i.imgur.com/HUCtib1.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2878a150-2dcb-4ae6-947e-f2aa6dd92263"},{"version":"CommandV1","origId":503877321547861,"guid":"e59a205f-dfc2-4b83-9e76-2c472f6aa47e","subtype":"command","commandType":"auto","position":53.0,"command":"x = sc.parallelize([2,4,1])\nprint(x.collect())\nprint(x.max(), x.min(), x.sum(), x.mean(), x.variance(), x.stdev())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e9be286b-f8e8-4d35-aa60-498abfda7aec"},{"version":"CommandV1","origId":503877321547862,"guid":"8d8b08ca-90db-4bb7-beac-4b82ffb7547a","subtype":"command","commandType":"auto","position":54.0,"command":"%md ### CountByKey\n\nAction / To Driver: Return a map of keys and counts of their occurrences in the RDD\n\n![](http://i.imgur.com/jvQTGv6.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"61b221bb-cf5d-426b-9e83-017a84bd67cc"},{"version":"CommandV1","origId":503877321547863,"guid":"ac0bdefd-3864-4728-9bad-3b4c9ecf0706","subtype":"command","commandType":"auto","position":55.0,"command":"x = sc.parallelize([('J', 'James'), ('F','Fred'), \n                    ('A','Anna'), ('J','John')])\n\ny = x.countByKey()\nprint(y)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e8a1c253-ce0c-4036-a193-bbed8d3f5ee1"},{"version":"CommandV1","origId":503877321547864,"guid":"684072f6-6e59-4d87-a96f-c7195002f683","subtype":"command","commandType":"auto","position":56.0,"command":"%md ### SaveAsTextFile\n\nAction / Distributed: Save the RDD to the filesystem indicated in the path\n\n![](http://i.imgur.com/Tb2Q9mG.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f7eb12c4-bda6-4dc3-8517-6ade98836995"},{"version":"CommandV1","origId":503877321547865,"guid":"3bf220d0-151e-4127-9db3-54fb2da45914","subtype":"command","commandType":"auto","position":57.0,"command":"dbutils.fs.rm(\"/temp/demo\", True)\nx = sc.parallelize([2,4,1])\nx.saveAsTextFile(\"/temp/demo\")\n\ny = sc.textFile(\"/temp/demo\")\nprint(y.collect())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a3d35b6e-dab8-462a-bd90-96cd7d20e8f7"},{"version":"CommandV1","origId":503877321547866,"guid":"b94641db-6dac-40ea-a6a7-b40340b60e0a","subtype":"command","commandType":"auto","position":58.0,"command":"%md ### We hope this was fun! Go crunch some data!","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d61e0cc0-cb47-4a1b-9459-72f1a4b24073"}],"dashboards":[],"guid":"ba83ea60-49d8-4cb0-8de0-00757d367efb","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}