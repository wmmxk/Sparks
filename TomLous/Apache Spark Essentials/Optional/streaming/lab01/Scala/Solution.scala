{"version":"NotebookV1","origId":503877321547944,"name":"Solution","language":"scala","commands":[{"version":"CommandV1","origId":503877321547946,"guid":"902e707d-1623-4c7e-8dcd-8bb4806b1867","subtype":"command","commandType":"auto","position":1.0,"command":"%md\n# Solution to Scala Spark Streaming Lab","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"dbedba86-38e1-4f7a-8dc4-240f055a81d4"},{"version":"CommandV1","origId":503877321547947,"guid":"40647194-f518-4664-a6f0-d6f391d4fdde","subtype":"command","commandType":"auto","position":2.0,"command":"%md The following solution isn't the _only_ possible solution. It's just _one_ possible solution.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f9ea45f2-f14c-4dad-8e97-e32377b3e8b0"},{"version":"CommandV1","origId":503877321547948,"guid":"864bd1e8-b884-4784-8d51-c795610bed71","subtype":"command","commandType":"auto","position":3.0,"command":"object Solution extends Serializable {\n \n  case class WordScore(word: String, score: Int)\n  \n  def stop(): Unit = {\n    StreamingContext.getActive.map { ssc =>\n      ssc.stop(stopSparkContext = false)\n      println(\"Stopped Streaming Context.\")\n    }\n  }\n  \n  def start(): Unit = {\n    // Create the streaming context.\n    val ssc = CheckpointDirectory.map { checkpointDir =>\n      StreamingContext.getActiveOrCreate(checkpointDir, createStreamingContext _)\n    }.\n    getOrElse {\n      StreamingContext.getActiveOrCreate(createStreamingContext _)\n    }\n\n    // Start our streaming context.\n    ssc.start()\n\n    println(\"Started/rejoined streaming context\")\n    \n    // Wait for it to terminate (which it won't, because the source never stops).\n    //ssc.awaitTerminationOrTimeout(BatchIntervalSeconds * 5 * 1000)\n  }\n\n  def restart(): Unit = {\n    stop()\n    start()\n  }\n  \n  private def createStreamingContext(): StreamingContext = {\n    // Use this map to calculate the point value of each word, letter by letter.\n    val LetterPoints = Map('a' ->  1, 'b' ->  3, 'c' ->  3, 'd' ->  2, 'e' ->  1,\n                           'f' ->  4, 'g' ->  2, 'h' ->  4, 'i' ->  1, 'j' ->  8,\n                           'k' ->  5, 'l' ->  1, 'm' ->  3, 'n' ->  1, 'o' ->  1,\n                           'p' ->  3, 'q' -> 10, 'r' ->  1, 's' ->  1, 't' ->  1,\n                           'u' ->  2, 'v' ->  4, 'w' ->  4, 'x' ->  8, 'y' ->  4,\n                           'z' -> 10)\n\n    // Create the streaming context.\n    val ssc = new StreamingContext(sc, Seconds(BatchIntervalSeconds))\n    \n    // ****** PUT YOUR SOLUTION HERE\n\n    // Create a stream from our RandomWordSource\n    val stream = ssc.receiverStream(createRandomWordSource())\n    \n    // What we're getting is a stream of words. As each RDD is created by\n    // Spark Streaming, have the stream create a new RDD that filters the\n    // words, dropping those larger than 7 characters or with a score less \n    // than 30.\n    \n    // First, map each word to a (word, score) tuple.\n    stream.map { word => \n      WordScore(word, word.map(ch => LetterPoints(ch)).sum)\n    }.\n    // Next, filter out any word that does not have a score better than 14 and length\n    // less than 8.\n    filter { wordScore => (wordScore.score >= 15) && (wordScore.word.length <= 7)  }.\n    // Save each RDD in our Parquet table. We'll likely end up with multiple rows for each word, but\n    // we can sum those up easily enough.\n    foreachRDD { rdd => \n      val sqlContext = SQLContext.getOrCreate(SparkContext.getOrCreate())\n      sqlContext.createDataFrame(rdd).write.mode(SaveMode.Append).parquet(SolutionParquet)\n    }\n    \n    ssc\n  }\n}","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d5a3ad8f-339e-495b-8365-aa254628cbbe"},{"version":"CommandV1","origId":503877321547949,"guid":"85c88b38-6461-4279-8d19-78f064075240","subtype":"command","commandType":"auto","position":4.0,"command":"","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a70cbc8b-a931-4478-88a8-5c4db20613ca"}],"dashboards":[],"guid":"f066317e-acd4-44df-b148-c44197ae5aa5","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}