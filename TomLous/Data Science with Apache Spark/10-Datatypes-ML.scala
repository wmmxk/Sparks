{"version":"NotebookV1","origId":503877321549244,"name":"10-Datatypes-ML","language":"scala","commands":[{"version":"CommandV1","origId":503877321549246,"guid":"7cf16d93-9239-47fc-be32-797c746fb6a4","subtype":"command","commandType":"auto","position":1.0,"command":"%md\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png\" /></a><br />This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License</a>.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d24532bb-a3ba-4592-8c3e-fca9495e4132"},{"version":"CommandV1","origId":503877321549247,"guid":"a5660518-b7cf-4386-9936-23b8de7e4372","subtype":"command","commandType":"auto","position":2.0,"command":"%md\n# MLlib Data Types\n \nThis notebook explains the machine learning specific data types in Spark.  The focus is on the data types and classes used for generating models.  These include: `DenseVector`, `SparseVector`, `LabeledPoint`, and `Rating`.\n \nFor reference:\n \nThe [MLlib Guide](http://spark.apache.org/docs/latest/mllib-guide.html) provides an overview of all aspects of MLlib and [MLlib Guide: Data Types](http://spark.apache.org/docs/latest/mllib-data-types.html) provides a detailed review of data types specific for MLlib\n \nAfter this lab you should understand the differences between `DenseVectors` and `SparseVectors` and be able to create and use `DenseVector`, `SparseVector`, `LabeledPoint`, and `Rating` objects.  You'll also learn where to obtain additional information regarding the APIs and specific class / method functionality.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"686c659b-cb40-4c34-b84f-0ef2eac47775"},{"version":"CommandV1","origId":503877321549248,"guid":"f074fdb9-9fb2-43d3-b839-37b709dfff5e","subtype":"command","commandType":"auto","position":3.0,"command":"%md\n \n#### Dense and Sparse\n \nMLlib supports both dense and sparse types for vectors and matrices.  We'll focus on vectors as they are most commonly used in MLlib and matrices have poor scaling properties.\n \nA dense vector contains an array of values, while a sparse vector stores the size of the vector, an array of indices, and an array of values that correspond to the indices.  A sparse vector saves space by not storing zero values.\n \nFor example, if we had the dense vector `[2.0, 0.0, 0.0, 3.0, 0.0, 0.0, 0.0]`, we could store that as a sparse vector with size 7, indices as `[0, 3]`, and values as `[2.0, 3.0]`.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a1d7cb48-dab7-4399-8502-1af85d0cf9a1"},{"version":"CommandV1","origId":503877321549249,"guid":"34e7b7ac-b02a-4ca5-8667-6ea5f6e3af37","subtype":"command","commandType":"auto","position":4.0,"command":"// import data types\nimport org.apache.spark.mllib.linalg.{DenseVector, SparseVector, SparseMatrix, DenseMatrix, Vectors, Matrices}","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f2ae4c79-7f46-4a93-a207-98eb703609f3"},{"version":"CommandV1","origId":503877321549250,"guid":"81f2b902-9ebb-4f9e-8d8b-671460c3af53","subtype":"command","commandType":"auto","position":5.0,"command":"%md\n \n \nWhen using Scala it's possible to obtain some details of objects using reflection, but it's recommended to reference the [programming guides](http://spark.apache.org/docs/latest/programming-guide.html), [Scala API](http://spark.apache.org/docs/latest/api/scala/#package), and the Scala [source code](https://github.com/apache/spark) for Spark.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f07868ce-3127-4f42-b860-fcfd430e5052"},{"version":"CommandV1","origId":503877321549251,"guid":"a6ef2967-0e65-42d0-b024-bb536530852d","subtype":"command","commandType":"auto","position":6.0,"command":"Vectors.getClass.getMethods mkString \"\\n\"","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"43d9ffe7-39b3-4a07-9546-5d6da8168d73"},{"version":"CommandV1","origId":503877321549252,"guid":"7fa458f5-40ac-4f32-a66b-78884c4a03e6","subtype":"command","commandType":"auto","position":7.0,"command":"%md\n#### DenseVector","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"df6b1f4d-7a39-4b5b-a7d2-ac1300a94763"},{"version":"CommandV1","origId":503877321549253,"guid":"5e95c2ca-722e-43f0-a765-9c76e5bb50c7","subtype":"command","commandType":"auto","position":8.0,"command":"%md\n \nSpark provides a [DenseVector](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.mllib.linalg.DenseVector) class within the package [org.apache.spark.mllib.linalg](https://spark.apache.org/docs/1.5.0/api/scala/index.html#org.apache.spark.mllib.linalg.package).  `DenseVector` is used to store arrays of values for use in Spark.\n \n`DenseVector` objects exist locally and are not inherently distributed.  `DenseVector` objects can be used in the distributed setting by including them in `RDDs` or `DataFrames`.\n \nYou can create a dense vector by using the [Vectors](https://spark.apache.org/docs/1.5.0/api/scala/index.html#org.apache.spark.mllib.linalg.Vectors$) object and calling `Vectors.dense`.  The `Vectors` object also contains a method for creating `SparseVectors`.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"22efe8e7-cbf6-4d52-9986-b8113db1769c"},{"version":"CommandV1","origId":503877321549254,"guid":"029824a8-a0e9-4fa0-a8fc-47f8da225c73","subtype":"command","commandType":"auto","position":9.0,"command":"// Create a DenseVector using Vectors\nval denseVector = Vectors.dense(Array(1.0, 2.0, 3.0))\n \nprintln(s\"denseVector.getClass: ${denseVector.getClass}\")\nprintln(s\"denseVector: $denseVector\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"fa57ede6-4300-4e06-920b-95fda132aa2b"},{"version":"CommandV1","origId":503877321549255,"guid":"af965ffa-5e1d-4b33-8da9-79a6f4ee2ac9","subtype":"command","commandType":"auto","position":10.0,"command":"%md\n** Norm **\n \nWe can calculate the norm of a vector using `Vectors.norm`.  The norm calculation is:\n \n  \\\\[ ||x|| _p = \\bigg( \\sum_i^n |x_i|^p \\bigg)^{1/p} \\\\]\n \n \n \nSometimes we'll want to normalize our features before training a model.  Later on we'll use the `ml` library to perform this normalization using a transformer.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e79acdeb-260a-487e-a00b-9b2ed0ece8b9"},{"version":"CommandV1","origId":503877321549256,"guid":"989d925c-3ce5-45a9-bb7a-93bcd396f74a","subtype":"command","commandType":"auto","position":11.0,"command":"Vectors.norm(denseVector, 2)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0a803987-a0c9-4e93-92d3-9d0cf259b4a0"},{"version":"CommandV1","origId":503877321549257,"guid":"9ba68f39-5db9-4aa7-81ab-d67ca9a0428e","subtype":"command","commandType":"auto","position":12.0,"command":"%md\nSometimes we'll want to treat a vector as an array.  We can convert both sparse and dense vectors to arrays by calling the `toArray` method on the vector.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"aa4f3415-a6ba-4e8e-851a-b2a0f89a6633"},{"version":"CommandV1","origId":503877321549258,"guid":"2b89abfe-c730-4497-bc6b-bc652b27bfec","subtype":"command","commandType":"auto","position":13.0,"command":"val denseArray = denseVector.toArray","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2adedffc-01c4-466d-a0de-85caf2e63503"},{"version":"CommandV1","origId":503877321549259,"guid":"45c36a7d-de90-49ef-b18a-de82dd1dbbe7","subtype":"command","commandType":"auto","position":14.0,"command":"%md\n#### SparseVector","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2de6c116-dea7-46ab-981b-8416284128cf"},{"version":"CommandV1","origId":503877321549260,"guid":"6a7690a2-9f7a-455b-b8fd-98e4cc25bcbd","subtype":"command","commandType":"auto","position":15.0,"command":"%md\nLet's create a `SparseVector` using [Vectors.sparse](https://spark.apache.org/docs/1.5.0/api/scala/index.html#org.apache.spark.mllib.linalg.Vectors$)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f27ac703-b0ce-4fd5-b23a-6877f0da6939"},{"version":"CommandV1","origId":503877321549261,"guid":"31ad2191-3224-4ea6-9cd2-08297f5c27cc","subtype":"command","commandType":"auto","position":16.0,"command":"// Using asInstanceOf so we can access its SparseVector specific attributes later\nval sparseVector = Vectors.sparse(10, Array(2, 7), Array(1.0, 5.0)).asInstanceOf[SparseVector]","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ae14543b-0d58-40f8-b64b-6537493a9029"},{"version":"CommandV1","origId":503877321549262,"guid":"89e3604e-2b33-4fa0-a80a-ba05af29908b","subtype":"command","commandType":"auto","position":17.0,"command":"%md\n \nLet's take a look at what fields and methods are available with a `SparseVector`.  Here are links to the [Python](https://spark.apache.org/docs/latest/api/python/pyspark.mllib.html#pyspark.mllib.linalg.SparseVector) and [Scala](http://spark.apache.org/docs/latest/api/scala/#org.apache.spark.mllib.linalg.SparseVector) APIs for `SparseVector`.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"78fdf53a-c59d-468e-b635-e593fa398263"},{"version":"CommandV1","origId":503877321549263,"guid":"2f33275f-5700-470a-9610-88277e19c86d","subtype":"command","commandType":"auto","position":18.0,"command":"// Note that this is the object\nprintln(SparseVector.getClass.getMethods mkString \"\\n\")\nprintln(s\"\\n${SparseVector.getClass}\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"940797bc-2205-46be-818e-0aa616ec21d8"},{"version":"CommandV1","origId":503877321549264,"guid":"9afb7894-012d-42e3-89c5-2901483eee97","subtype":"command","commandType":"auto","position":19.0,"command":"// This is an instance of the class\nprintln(sparseVector.getClass.getMethods mkString \"\\n\")\n \nprintln(s\"\\n${SparseVector.getClass}\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f6f780f9-6687-4af3-ba15-61923e89ee5f"},{"version":"CommandV1","origId":503877321549265,"guid":"5f524dc8-f646-4514-9855-03d34cbb1641","subtype":"command","commandType":"auto","position":20.0,"command":"sparseVector.indices","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"84a4ca32-4629-4d17-8b38-c6462a2bfbb6"},{"version":"CommandV1","origId":503877321549266,"guid":"247e3b99-ced6-481c-89f9-8398683f702a","subtype":"command","commandType":"auto","position":21.0,"command":"import scala.runtime.ScalaRunTime.stringOf\nprintln(s\"sparseVector.size: ${sparseVector.size}\")\nprintln(s\"sparseVector.size.getClass: ${sparseVector.size.getClass}\")\n \nprintln(s\"\\nsparseVector.indices: ${stringOf(sparseVector.indices)}\")\nprintln(s\"sparseVector.indices.getClass: ${sparseVector.indices(0).getClass}\")\n \nprintln(s\"\\nsparseVector.values: ${stringOf(sparseVector.values)}\")\nprintln(s\"sparseVector.values.getClass: ${sparseVector.values(0).getClass}\\n\\n\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8c3faa61-b346-4348-a916-920cce4074aa"},{"version":"CommandV1","origId":503877321549267,"guid":"118d2819-2490-4da1-92f2-03dad7fecef9","subtype":"command","commandType":"auto","position":22.0,"command":"Vectors.norm(sparseVector, 2)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"10e03146-6204-4f67-912c-6830e5d0775d"},{"version":"CommandV1","origId":503877321549268,"guid":"10a108db-96dd-45d8-9b8a-7925af2866c2","subtype":"command","commandType":"auto","position":23.0,"command":"%md\n#### LabeledPoint","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f7262d3f-21c0-4697-ae0e-d604c278059c"},{"version":"CommandV1","origId":503877321549269,"guid":"2b66b702-1172-4c60-8680-68c7f5ae7713","subtype":"command","commandType":"auto","position":24.0,"command":"%md\n \nIn MLlib, labeled training instances are stored using the [LabeledPoint](http://spark.apache.org/docs/latest/api/scala/#org.apache.spark.mllib.regression.LabeledPoint) object.  Note that the features and label for a `LabeledPoint` are stored in the `features` and `label` attribute of the object.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a61949fc-09f7-4493-9f40-7cc51255723a"},{"version":"CommandV1","origId":503877321549270,"guid":"746dff96-c2f2-494d-b940-8181fef1d8be","subtype":"command","commandType":"auto","position":25.0,"command":"import org.apache.spark.mllib.regression.LabeledPoint","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"92382e75-506c-4935-8c06-ff69535d299b"},{"version":"CommandV1","origId":503877321549271,"guid":"f00423ef-09af-4470-aef6-52e81202bb1a","subtype":"command","commandType":"auto","position":26.0,"command":"val labeledPoint = LabeledPoint(1992, Vectors.dense(Array(3.0, 5.5, 10.0)))\nprintln(s\"labeledPoint: $labeledPoint\")\n \nprintln(s\"\\nlabeledPoint.features: ${stringOf(labeledPoint.features)}\")\nprintln(s\"labeledPoint.features.getClass: ${labeledPoint.features.getClass}\")\n \nprintln(s\"\\nlabeledPoint.label: ${labeledPoint.label}\")\nprintln(s\"labeledPoint.label.getClass: ${labeledPoint.label.getClass}\\n\\n\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1dce8abb-3445-4e6e-8358-5fbf620ad9c7"},{"version":"CommandV1","origId":503877321549272,"guid":"1f4b8bba-ff9b-49bd-a04b-657475ff7a87","subtype":"command","commandType":"auto","position":27.0,"command":"val labeledPointSparse = LabeledPoint(1992, Vectors.sparse(10, Array(0, 1, 2), Array(3.0, 5.5, 10.0)))\nprintln(s\"labeledPointSparse: $labeledPointSparse\")\n \nprintln(s\"\\nlabeledPointSparse.features: ${stringOf(labeledPointSparse.features)}\")\nprintln(s\"labeledPointSparse.features.getClass: ${labeledPointSparse.features.getClass}\")\n \nprintln(s\"\\nlabeledPointSparse.label: ${labeledPointSparse.label}\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3b064dcb-4fb2-44cc-a0cc-114036c8c27d"},{"version":"CommandV1","origId":503877321549273,"guid":"9912bec1-74bd-4fe0-9af4-d5973d672018","subtype":"command","commandType":"auto","position":28.0,"command":"%md\n#### Rating","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6e48af11-59ff-4ec7-a6fc-320a0f3f4ab6"},{"version":"CommandV1","origId":503877321549274,"guid":"cf823fe2-f53a-483c-8ab7-aa1438d9ff0e","subtype":"command","commandType":"auto","position":29.0,"command":"%md\nWhen performing collaborative filtering we aren't working with vectors or labeled points, so we need another type of object to capture the relationship between users, products, and ratings.  This is represented by a `Rating` which can be found in the [Python](http://spark.apache.org/docs/latest/api/python/pyspark.mllib.html#pyspark.mllib.recommendation.Rating) and [Scala](https://spark.apache.org/docs/1.5.0/api/scala/index.html#org.apache.spark.mllib.recommendation.Rating) APIs.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ad43d640-14af-42ee-8a3b-a7b09e281562"},{"version":"CommandV1","origId":503877321549275,"guid":"5086e927-1c01-467a-9cdf-35c432a1c2b5","subtype":"command","commandType":"auto","position":30.0,"command":"import org.apache.spark.mllib.recommendation.Rating","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"18c76c46-64ad-4010-af61-42437cf14550"},{"version":"CommandV1","origId":503877321549276,"guid":"dc4463d2-4dd8-49a0-9dd6-842ae090aa4f","subtype":"command","commandType":"auto","position":31.0,"command":"val rating = Rating(4, 10, 2.0)\nprintln(s\"rating: $rating\")\nprintln(s\"rating.user: ${rating.user}\")\nprintln(s\"rating.product: ${rating.product}\")\nprintln(s\"rating.rating: ${rating.rating}\\n\\n\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"23c10558-eeba-4203-bba0-54944e5f7c64"},{"version":"CommandV1","origId":503877321549277,"guid":"464cdec0-68bd-4db5-81fb-296ae3991c4f","subtype":"command","commandType":"auto","position":32.0,"command":"%md\n#### DataFrames\n \nWhen using Spark's ML library rather than MLlib you'll be working with `DataFrames` instead of `RDDs`.  In this section we'll show how you can create a `DataFrame` using MLlib datatypes.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5d1eee8d-b466-47f4-8c0b-569f8424e6f3"},{"version":"CommandV1","origId":503877321549278,"guid":"0d2f281b-03cf-4b54-bc09-8e5de5c69bc7","subtype":"command","commandType":"auto","position":33.0,"command":"%md\nWhen using Scala we can create a case class to capture the structure of a row of data.  Below, we'll create a case class for an address.  We can use case classes to generate `DataFrames`.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"472b8ced-ed8e-4ed7-b9d4-92bfabec6ad4"},{"version":"CommandV1","origId":503877321549279,"guid":"db9190b8-e13e-4f29-b831-10fb729b9ad5","subtype":"command","commandType":"auto","position":34.0,"command":"case class Address(city: String, state: String)\nval address = Address(\"Boulder\", \"CO\")\n \nprintln(s\"address: $address\")\nprintln(s\"address.city: ${address.city}\")\nprintln(s\"address.state: ${address.state}\\n\\n\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b3346be7-19eb-46cf-b7f1-58bc1b2dd05e"},{"version":"CommandV1","origId":503877321549280,"guid":"503ebb03-adf6-4257-b3c3-45e374e8eee0","subtype":"command","commandType":"auto","position":35.0,"command":"display(sqlContext.createDataFrame(Seq(Address(\"Boulder\", \"CO\"), Address(\"New York\", \"NY\"))))","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8b99c964-d643-4c65-b814-dc607d3a7ff2"},{"version":"CommandV1","origId":503877321549281,"guid":"4cc5d10f-7f33-467d-b1f1-dc650301175e","subtype":"command","commandType":"auto","position":36.0,"command":"%md\nLet's create a `DataFrame` with a couple of rows where the first column is the label and the second is the features.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"86af2b31-45d1-4641-a210-7befb1788edf"},{"version":"CommandV1","origId":503877321549282,"guid":"fa267e6c-db11-4d02-94cb-f640c2100de3","subtype":"command","commandType":"auto","position":37.0,"command":"import org.apache.spark.mllib.linalg.Vector\n \ncase class LabelAndFeatures(label: Double, features: Vector)\nval row1 = LabelAndFeatures(10, Vectors.dense(Array(1.0, 2.0)))\nval row2 = LabelAndFeatures(20, Vectors.dense(Array(1.5, 2.2)))\n \nval df = sqlContext.createDataFrame(Seq(row1, row2))\ndisplay(df)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8be8ada1-4732-48db-89a4-aa4f33a63770"},{"version":"CommandV1","origId":503877321549283,"guid":"eb114816-219c-4835-9bc7-c1f06063e31e","subtype":"command","commandType":"auto","position":38.0,"command":"%md\n#### Exercises","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4a85e614-8239-417d-b15d-456db5b004fd"},{"version":"CommandV1","origId":503877321549284,"guid":"b9940a84-e69f-482c-a237-9b88c41064d3","subtype":"command","commandType":"auto","position":39.0,"command":"%md\nCreate a `DenseVector` with the values 1.5, 2.5, 3.0 (in that order).","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b43b2153-b4f9-40b5-aa0f-04763f34df54"},{"version":"CommandV1","origId":503877321549285,"guid":"3643c736-7ea5-455d-8bfc-c4ec7338f304","subtype":"command","commandType":"auto","position":40.0,"command":"// ANSWER\nval denseVec = Vectors.dense(Array(1.5, 2.5, 3.0))","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"01133d9a-ab10-4ad4-8d7b-45003864c2f8"},{"version":"CommandV1","origId":503877321549286,"guid":"a7fe849a-9870-4bb5-81f4-88da718e5757","subtype":"command","commandType":"auto","position":41.0,"command":"// TEST\nassert(denseVec == new DenseVector(Array(1.5, 2.5, 3.0)), \"incorrect value for denseVec\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ffe2529f-4969-43b1-98c0-9cc596d74736"},{"version":"CommandV1","origId":503877321549287,"guid":"8fc6dde9-5426-46fc-ad9f-f763c12f594b","subtype":"command","commandType":"auto","position":42.0,"command":"%md\nCreate a `LabeledPoint` with a label equal to 10.0 and features equal to `denseVec`","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"44df87f1-f2a7-4d03-aad4-c5dd88601c5f"},{"version":"CommandV1","origId":503877321549288,"guid":"2d956e27-474e-43f8-9517-6b13eaf8ee02","subtype":"command","commandType":"auto","position":43.0,"command":"// ANSWER\nval labeledP = LabeledPoint(10.0, denseVec)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"9686dedd-7ae0-40f1-9cd0-51efd132fe06"},{"version":"CommandV1","origId":503877321549289,"guid":"30b9b001-0f37-4d64-b7f6-313be02f665a","subtype":"command","commandType":"auto","position":44.0,"command":"// TEST\nassert(labeledP.toString == \"(10.0,[1.5,2.5,3.0])\", \"incorrect value for labeledP\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"682a90ef-9901-4ad2-81b7-075757001123"},{"version":"CommandV1","origId":503877321549290,"guid":"47b47733-477a-4772-8b0b-dd324a9ced8d","subtype":"command","commandType":"auto","position":45.0,"command":"%md\n** Challenge Question [Intentionally Hard]**\n \nCreate a `udf` that pulls the first element out of a column that contains `DenseVectors`.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"28f57fe1-caa4-4041-85e4-2fd08c6e8c60"},{"version":"CommandV1","origId":503877321549291,"guid":"b0a76e93-1046-432f-b732-e88aa2cde5d9","subtype":"command","commandType":"auto","position":46.0,"command":"// ANSWER\nimport org.apache.spark.sql.functions.udf\n \nval firstElement = udf { v: Vector => v(0) }\n \nval df2 = df.select(firstElement($\"features\").as(\"first\"))\ndf2.show()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c61b440b-7586-45a2-b979-5baa31702798"},{"version":"CommandV1","origId":503877321549292,"guid":"eed1efbd-04a7-4cc9-9b04-c8f58bb45b11","subtype":"command","commandType":"auto","position":47.0,"command":"// TEST\nassert(df2.rdd.map(_(0)).collect().deep == Array(1.0, 1.5).deep, \"incorrect implementation of firstElement\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1d5b6adf-e442-4a78-8a61-9f65ab89f4e9"}],"dashboards":[],"guid":"521c43c4-659f-46bc-be7c-6492b2c6846f","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}