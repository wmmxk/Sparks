{"version":"NotebookV1","origId":503877321549358,"name":"Scala-Guide","language":"scala","commands":[{"version":"CommandV1","origId":503877321549360,"guid":"e12fab14-699c-4be7-8cef-b66400059a8b","subtype":"command","commandType":"auto","position":1.0,"command":"%md\n# Programming Spark with Scala\n\nBelow you'll find links to Scala API documentation, and see some of the common Scala idioms, expressions and language features used when programming Spark. We assume you have some exposure to the Scala language, focusing on beginner-to-intermediate features which are useful developing Spark applications in Scala.\n\n**Quick tip:** If you are fairly new to Scala, use the <a href=\"http://docs.scala-lang.org/cheatsheets/\" target=\"_blank\">official cheat sheet</a> early and often!","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4a16d008-600b-4240-b7e5-9b21d3221819"},{"version":"CommandV1","origId":503877321549361,"guid":"7cfda7eb-f0d0-4d73-a4c0-bd6f0c13860e","subtype":"command","commandType":"auto","position":2.0,"command":"%md\n## Spark Programming Guides\n* <a href=\"http://spark.apache.org/docs/1.6.1/programming-guide.html#resilient-distributed-datasets-rdds\" target=\"_blank\">RDDs</a>\n* <a href=\"http://spark.apache.org/docs/1.6.1/sql-programming-guide.html\" target=\"_blank\">DataFrames</a>\n* <a href=\"http://spark.apache.org/docs/1.6.1/streaming-programming-guide.html\" target=\"_blank\">Streaming</a>\n* <a href=\"http://spark.apache.org/docs/1.6.1/ml-guide.html\" target=\"_blank\">Machine Learning Pipelines</a>\n\n## Spark Scala API Docs\n\n* <a href=\"http://spark.apache.org/docs/1.6.1/api/scala/index.html#org.apache.spark.package\" target=\"_blank\">Scala API Docs Home</a>\n* <a href=\"http://spark.apache.org/docs/1.6.1/api/scala/index.html#org.apache.spark.rdd.RDD\" target=\"_blank\">RDDs (common interface)</a>\n* <a href=\"http://spark.apache.org/docs/1.6.1/api/scala/index.html#org.apache.spark.rdd.PairRDDFunctions\" target=\"_blank\">Additional methods for Pair RDDs</a>\n* <a href=\"http://spark.apache.org/docs/1.6.1/api/scala/index.html#org.apache.spark.sql.DataFrame\" target=\"_blank\">DataFrames</a>\n* <a href=\"http://spark.apache.org/docs/1.6.1/api/scala/index.html#org.apache.spark.sql.functions$\" target=\"_blank\">SQL Functions</a> (used on DataFrame columns)\n* <a href=\"http://spark.apache.org/docs/1.6.1/api/scala/index.html#org.apache.spark.streaming.package\" target=\"_blank\">Streaming</a>\n* <a href=\"http://spark.apache.org/docs/1.6.1/api/scala/index.html#org.apache.spark.ml.package\" target=\"_blank\">Machine Learning Pipelines</a>\n\n## Scala Language Documentation\n\n* <a href=\"http://docs.scala-lang.org/cheatsheets/\" target=\"_blank\">Scala Cheat Sheet</a> (If you're new to Scala, this is the most important link!)\n* <a href=\"http://www.scala-lang.org/documentation/\" target=\"_blank\">Official Docs Home</a>\n* <a href=\"http://otfried.org/scala/string.html\" target=\"_blank\">Scala String methods</a> (useful for ETL)\n* <a href=\"http://docs.scala-lang.org/overviews/\" target=\"_blank\">Scala Overviews and Guides</a> (Collections, string interpolation, and more)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"421a1ca3-351b-4edd-9ed4-44f2f97d2089"},{"version":"CommandV1","origId":503877321549362,"guid":"244513aa-aba9-4af9-b460-0b94611dd996","subtype":"command","commandType":"auto","position":3.0,"command":"%md\n# Lambdas\nA _lambda_, also called an \"anonymous function\", is a way to express a function inline, which is then applied to a set of data. It's commonly used in big data programming, and Spark is no different. It turns out Scala has two different syntaxes for lambdas, each of which is useful in different contexts.\n\n## Standard Lambas\nThe syntax looks like:\n\n    // Lambda with one argument, returning double its value\n    n => n*2\n    // Lambda taking two arguments, multiplying its value\n    (x, y) => x * y\n\n\nNotice that:\n\n* The expression contains a `=>` symbol, sometimes called a \"rocket\".\n* Arguments are declared on the left hand side of the rocket.\n* There is no return statement. The return value is whatever is on the rocket's right side.\n* This entire expression evaluates to a function object. It can be passed to map, filter, etc.\n* Parentheses around the arguments are required for a lambda with two or more arguments, but optional for a single argument.\n\nLet's see how this is used in code.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"28c14126-564d-4cce-b142-621554e9b965"},{"version":"CommandV1","origId":503877321549363,"guid":"d156fe8f-b788-412f-9795-54cc3ba9b07f","subtype":"command","commandType":"auto","position":4.0,"command":"// A collection to work with\nval numbers = Seq(2, 8, -1, 3, 4, -12, 7)\n\n// You use the lambda expression in the same place you would \n// normally use a function.\nprintln(\"Doubling the numbers:\")\nprintln(numbers.map(number => number * 2))\n\n// It works with boolean expressions too.\nprintln(\"Positive numbers:\")\nprintln(numbers.filter( (number) => number > 0))\n\n// Lambdas can take several arugments.\nprintln(\"Sum of numbers:\")\nprintln(numbers.reduce((a, b) => a+b))","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c2bfdbba-492b-4e5e-90d2-e5c1d6bb0195"},{"version":"CommandV1","origId":503877321549364,"guid":"6ef52b5f-c744-4a53-bd7f-ee6348342902","subtype":"command","commandType":"auto","position":5.0,"command":"%md\n## Shorter Lambda Form\nYou can write lambdas in a more concise syntax, using underscores:\n\n    // Lambda with one argument, returning double its value:\n    _ * 2\n    // (equivalent to \"n => n*2\")\n\n    // Lambda taking two arguments, multiplying their values:\n    _ * _\n    // (equivalent to \"(x, y) => x * y\")\n\n\nIn this compact form, the variable is implicit, and represented by the underscore. As a result, you can only use it for simpler, one-line lambda functions, where the variable is used only once in calculating the value.\n\nSome examples to make it more clear:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ef7e7066-e787-41dd-bc3e-0c706de17a76"},{"version":"CommandV1","origId":503877321549365,"guid":"123f37d3-d66f-445a-ac78-de4d160fc327","subtype":"command","commandType":"auto","position":6.0,"command":"// The same collection\nval numbers = Seq(2, 8, -1, 3, 4, -12, 7)\n\n// You use the short form anywhere a standard lambda would fit.\nprintln(\"Doubling the numbers:\")\nprintln(numbers.map( _ * 2 ))\n// It's a good idea to use plenty of spaces, for readability, but you don't have to.\nprintln(\"Doubling the numbers (different spacing and op order):\")\nprintln(numbers.map(2*_))\n\n// It works with boolean expressions too.\nprintln(\"Positive numbers:\")\nprintln(numbers.filter( _ > 0))\n\n// Lambdas can take several arugments.\nprintln(\"Sum of numbers:\")\nprintln(numbers.reduce( _ + _ ))","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8eb4ec23-6c76-4c9e-9ae7-64ffec43a01e"},{"version":"CommandV1","origId":503877321549366,"guid":"a421df99-7893-4ec3-9924-b6cd2cc1a9de","subtype":"command","commandType":"auto","position":7.0,"command":"%md\n# Case Classes\n\nScala includes an immutable tuple type.\n\n    // (name, gpa, major)\n    val student_info = (\"John Doe\", 3.8, \"chemistry\")\n    // You can write student_info._2 to get the GPA.\n\nThis lets us conveniently work with records as immutable, ordered fields of data. In Scala Spark programming, we often find it valuable to define a _case class_. This is a useful, simple form of a regular Scala class, which we can often use instead of a tuple:\n\n    case class Student(name: String, gpa: Double, major: String)\n    val student_info = Student(\"John Doe\", 3.8, \"chemistry\")\n    println(\"GPA: \" + student_info.gpa)\n\nThe result is often more readable and easy to work with in Spark programs:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"521a7a6a-f50a-46e4-a2f2-b2979e5e2735"},{"version":"CommandV1","origId":503877321549367,"guid":"de53cd04-dfa1-4ac8-8bac-5ed67a3c3bc0","subtype":"command","commandType":"auto","position":8.0,"command":"// To use, first define a case class, using the \"case\" keyword.\ncase class Student(name: String, gpa: Double, major: String)\n\n// This lets us create Student objects, with a syntax similar to if we had defined a Student class.\nval student_john = Student(\"John Doe\", 3.8, \"chemistry\")\n\n// We can reference its fields by name:\nprintln(\"Using namedtuple fields...\")\nprintln(\"Student name: \" + student_john.name)\nprintln(\"Student GPA: \" + student_john.gpa)\nprintln(\"Student major: \" + student_john.major)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"097eec44-9ff4-4a3c-86f7-6493349e0634"},{"version":"CommandV1","origId":503877321549368,"guid":"b351e531-575c-4586-ab47-15602737b2f5","subtype":"command","commandType":"auto","position":9.0,"command":"%md\n# String Operations\n\nEspecially when loading and transforming data, you will often need to munge some text. Scala's string type (called `String`) has \n<a href=\"http://otfried.org/scala/string.html\" target=\"_blank\">many built-in methods</a>. Note none of them modify the original string; they instead create and return a new, different string. Here are some that you may find particularly useful:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"bb36fef6-2890-401c-b8f2-0625344955bb"},{"version":"CommandV1","origId":503877321549369,"guid":"30b049d9-1670-4336-aba1-131c2055d61f","subtype":"command","commandType":"auto","position":10.0,"command":"val poem = \"  Beauty is truth; truth, beauty. \\t \"\nval underscored = \"__Beauty is truth; truth, beauty.__\"\nval advice = \"Genius without education is like silver in the mine.\"\n\n// trim: Strips whitespace from the front and end of a line.\n// (Remember: in Scala, if a method doesn't take arguments, the parentheses are optional.)\nprintln(\"Trimmed:\")\nprintln('<' + poem.trim + '>')\n\n// To split a string by a separation character, use .split().\nprintln(\"Split by semicolon:\")\nprintln(poem.split(\";\"))\n// To split by whitespace, pass in \"\"\"\\s+\"\"\" or \"\\\\s+\".\nprintln(\"Split by whitespace:\")\nprintln(advice.split(\"\"\"\\s+\"\"\"))\n\n// To go the opposite direction, use .mkString().\nval pets = Seq(\"dog\", \"cat\", \"bird\", \"goat\", \"llama\")\nprintln(\"Pets:\")\nprintln(pets.mkString(\", \"))\n\n// .toUpperCase() and .toLowerCase() are often useful for normalizing data.\nprintln(\"whispered advice:\")\nprintln(advice.toLowerCase())\nprintln(\"SHOUTED ADVICE:\")\nprintln(advice.toUpperCase())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3fcb0235-0548-4336-850b-08285f573d5e"},{"version":"CommandV1","origId":503877321549370,"guid":"c07ad261-2aa3-4e2c-877f-027c2b535fc0","subtype":"command","commandType":"auto","position":11.0,"command":"","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1a0f5091-2967-40f2-9cf2-ac5d0b1a4ca3"}],"dashboards":[],"guid":"31092d87-a677-4920-9e2f-a501aeae2cd2","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}