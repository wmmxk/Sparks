{"version":"NotebookV1","origId":503877321548870,"name":"65a-Lab-ANN-Solution","language":"scala","commands":[{"version":"CommandV1","origId":503877321548872,"guid":"d0b6ab6b-23a6-46c8-b6c5-02cf2c77712a","subtype":"command","commandType":"auto","position":1.0,"command":"val training = sqlContext.read.format(\"libsvm\").load(\"/databricks-datasets/mnist-digits/data-001/mnist-digits-train.txt\").cache\nval test = sqlContext.read.format(\"libsvm\").load(\"/databricks-datasets/mnist-digits/data-001/mnist-digits-test.txt\").cache","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"20455286-6e8e-440b-9df2-3173a96c779a"},{"version":"CommandV1","origId":503877321548873,"guid":"dbe78e3f-6f2c-43e8-9136-047f1ae8a72e","subtype":"command","commandType":"auto","position":2.0,"command":"display(training)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"63fc1e30-d262-4bd4-8ad4-dda64c4281c5"},{"version":"CommandV1","origId":503877321548874,"guid":"026dd8f4-7cc1-4372-a917-9d5e26589473","subtype":"command","commandType":"auto","position":3.0,"command":"display(test)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e0e0c679-f160-4557-a2ef-9a33c8542818"},{"version":"CommandV1","origId":503877321548875,"guid":"97655a8e-fa29-465f-a2f2-266884f43316","subtype":"command","commandType":"auto","position":4.0,"command":"%md ## Train a ... Multilayer Perception Classifier","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c2ab1f07-4caa-4a38-87d4-e8aebeda80b5"},{"version":"CommandV1","origId":503877321548876,"guid":"4d066fe2-c96e-4eac-afc0-a96b309c1346","subtype":"command","commandType":"auto","position":5.0,"command":"%md Note that the dimensions of the two sets of vectors are different (780 vs 778). This is an artifact of the file format in which they are stored (take a look at the raw text, with spark.read.text, and you'll be able to deduce the problem). We need the dimension to match for the neural-net classifier. If they don't you'll get a reasonably friendly error message telling you the problem.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c18cf8b7-8c0e-4b69-ae3b-1a63e49d0ca3"},{"version":"CommandV1","origId":503877321548877,"guid":"3c919cf5-5dbc-4139-986d-ae05465edf4e","subtype":"command","commandType":"auto","position":6.0,"command":"import org.apache.spark.ml.linalg.Vectors\nimport org.apache.spark.ml.linalg.SparseVector\n\nval make780 = spark.udf.register(\"make780\", (v:SparseVector) => Vectors.sparse(780, v.indices, v.values))","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"de869fe9-ca06-4f3a-b0fb-07ab2ddbf6c4"},{"version":"CommandV1","origId":503877321548878,"guid":"ff3b3f02-ea9c-4695-8223-1cec584b1bae","subtype":"command","commandType":"auto","position":7.0,"command":"val testFixed = test.select('label, make780('features)).withColumnRenamed(\"UDF(features)\", \"features\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2b31a2eb-352b-4fff-8f99-884c787c8ef5"},{"version":"CommandV1","origId":503877321548879,"guid":"34901bd1-94e6-4670-ab27-0da103d24533","subtype":"command","commandType":"auto","position":8.0,"command":"display(testFixed)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"13cf084d-4cbb-4f14-84d1-82222c24d711"},{"version":"CommandV1","origId":503877321548880,"guid":"08da98d8-c9e6-43de-b512-d3d6aaffe255","subtype":"command","commandType":"auto","position":9.0,"command":"// Import the ML algorithms we will use.\nimport org.apache.spark.ml.classification.MultilayerPerceptronClassifier\nimport org.apache.spark.ml.feature.StringIndexer\nimport org.apache.spark.ml.Pipeline","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"18142142-f371-46f3-a0df-1a853460bad3"},{"version":"CommandV1","origId":503877321548881,"guid":"48ec0d88-f95d-4e24-b084-c8e17df07d1a","subtype":"command","commandType":"auto","position":10.0,"command":"val indexer = new StringIndexer().setInputCol(\"label\").setOutputCol(\"indexedLabel\")\n\nval mlp = new MultilayerPerceptronClassifier().setLabelCol(\"indexedLabel\")\n\n// One config we need for the MLP is the configuration of layers:\n\nmlp.setLayers(Array(780, 10, 10))\n\nval pipeline = new Pipeline().setStages(Array(indexer, mlp))","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3f9c9532-45dd-405f-9809-3a731aa7756f"},{"version":"CommandV1","origId":503877321548882,"guid":"50ae2faf-ed5d-4802-a7be-675050673adc","subtype":"command","commandType":"auto","position":11.0,"command":"%md Now, let's fit a model to our data.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"7b12aa42-db47-4fca-9926-08835a92f40c"},{"version":"CommandV1","origId":503877321548883,"guid":"d0bf4db4-e385-4a1d-89c7-bfb7a1f54339","subtype":"command","commandType":"auto","position":12.0,"command":"val model = pipeline.fit(training)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ee4a21f4-ecee-46b6-aaaa-b3743466243d"},{"version":"CommandV1","origId":503877321548884,"guid":"aaa69771-5c9d-4808-86aa-e1d5e01a7e0e","subtype":"command","commandType":"auto","position":13.0,"command":"%md You'll note -- if you play with this -- that neural nets take a long time to train :)\n\nPart of that is community edition, but part of that has to do with the nature of neural nets themselves. They are provably very powerful, but require a lot of data and time relative to many other models.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"dddc9922-0cf5-4b06-a1a5-5a513cde5ee2"},{"version":"CommandV1","origId":503877321548885,"guid":"6a2cdc1a-bc78-4eed-8721-e60026be5b88","subtype":"command","commandType":"auto","position":14.0,"command":"import org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\nval evaluator = new MulticlassClassificationEvaluator().setLabelCol(\"indexedLabel\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"829c467b-1080-42fd-b6c7-8a3de4d33df1"},{"version":"CommandV1","origId":503877321548886,"guid":"daa4c046-f854-4d02-8312-20e31d1665fa","subtype":"command","commandType":"auto","position":15.0,"command":"val predictions = model.transform(testFixed)\n\nevaluator.setMetricName(\"accuracy\")\nevaluator.evaluate(predictions)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"7648a8a0-9bca-4ffd-b96c-2d860147d592"},{"version":"CommandV1","origId":503877321548887,"guid":"17a049ec-4ed4-448f-9f6d-f9a887e81f2e","subtype":"command","commandType":"auto","position":16.0,"command":"%md Just a quick stab, and we've already done better than most of our tree-based classifiers. Before we get too pleased though, bear in mind the limited time we've invested in all of the schemes for this data set ... for further reading, look at the best published benchmarks for MNIST (well over 99% accuracy), other architectures that perform well for this sort of problem, like CNNs, and remember the \"no free lunch theorem\" ...","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"994e8341-b756-4d3d-a582-630801e35501"}],"dashboards":[],"guid":"26f4b423-02d9-4790-af7c-79df641b0429","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}